//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Stores;
using CommerceBuilder.Taxes;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Taxes
{
    /// <summary>
    /// This class represents a TaxRule object in the database.
    /// </summary>
    public partial class TaxRule : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public TaxRule() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="taxRuleId">Value of TaxRuleId.</param>
        /// </summary>
        public TaxRule(Int32 taxRuleId)
        {
            this.TaxRuleId = taxRuleId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "TaxRuleId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "TaxRate");
          columnNames.Add(prefix + "UseBillingAddress");
          columnNames.Add(prefix + "GroupRuleId");
          columnNames.Add(prefix + "TaxCodeId");
          columnNames.Add(prefix + "Priority");
          columnNames.Add(prefix + "RoundingRuleId");
          columnNames.Add(prefix + "UsePerItemTax");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given TaxRule object from the given database data reader.
        /// </summary>
        /// <param name="taxRule">The TaxRule object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(TaxRule taxRule, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            taxRule.TaxRuleId = dr.GetInt32(0);
            taxRule.StoreId = dr.GetInt32(1);
            taxRule.Name = dr.GetString(2);
            taxRule.TaxRate = dr.GetDecimal(3);
            taxRule.UseBillingAddress = dr.GetBoolean(4);
            taxRule.GroupRuleId = dr.GetByte(5);
            taxRule.TaxCodeId = NullableData.GetInt32(dr, 6);
            taxRule.Priority = dr.GetInt16(7);
            taxRule.RoundingRuleId = dr.GetByte(8);
            taxRule.UsePerItemTax = dr.GetBoolean(9);
            taxRule.IsDirty = false;
        }

#endregion

        private Int32 _TaxRuleId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private LSDecimal _TaxRate;
        private Boolean _UseBillingAddress;
        private Byte _GroupRuleId;
        private Int32 _TaxCodeId;
        private Int16 _Priority;
        private Byte _RoundingRuleId;
        private Boolean _UsePerItemTax;
        private bool _IsDirty;

        /// <summary>
        /// TaxRuleId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 TaxRuleId
        {
            get { return this._TaxRuleId; }
            set
            {
                if (this._TaxRuleId != value)
                {
                    this._TaxRuleId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxRate
        /// </summary>
        public LSDecimal TaxRate
        {
            get { return this._TaxRate; }
            set
            {
                if (this._TaxRate != value)
                {
                    this._TaxRate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UseBillingAddress
        /// </summary>
        public Boolean UseBillingAddress
        {
            get { return this._UseBillingAddress; }
            set
            {
                if (this._UseBillingAddress != value)
                {
                    this._UseBillingAddress = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// GroupRuleId
        /// </summary>
        public Byte GroupRuleId
        {
            get { return this._GroupRuleId; }
            set
            {
                if (this._GroupRuleId != value)
                {
                    this._GroupRuleId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxCodeId
        /// </summary>
        public Int32 TaxCodeId
        {
            get { return this._TaxCodeId; }
            set
            {
                if (this._TaxCodeId != value)
                {
                    this._TaxCodeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Priority
        /// </summary>
        public Int16 Priority
        {
            get { return this._Priority; }
            set
            {
                if (this._Priority != value)
                {
                    this._Priority = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// RoundingRuleId
        /// </summary>
        public Byte RoundingRuleId
        {
            get { return this._RoundingRuleId; }
            set
            {
                if (this._RoundingRuleId != value)
                {
                    this._RoundingRuleId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UsePerItemTax
        /// </summary>
        public Boolean UsePerItemTax
        {
            get { return this._UsePerItemTax; }
            set
            {
                if (this._UsePerItemTax != value)
                {
                    this._UsePerItemTax = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this TaxRule object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.TaxRuleGroupsLoaded && this.TaxRuleGroups.IsDirty) return true;
                if (this.TaxRuleShipZonesLoaded && this.TaxRuleShipZones.IsDirty) return true;
                if (this.TaxRuleTaxCodesLoaded && this.TaxRuleTaxCodes.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this TaxRule are properly associated with this TaxRule object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.TaxRuleGroupsLoaded) { foreach (TaxRuleGroup taxRuleGroup in this.TaxRuleGroups) { taxRuleGroup.TaxRuleId = this.TaxRuleId; } }
            if (this.TaxRuleShipZonesLoaded) { foreach (TaxRuleShipZone taxRuleShipZone in this.TaxRuleShipZones) { taxRuleShipZone.TaxRuleId = this.TaxRuleId; } }
            if (this.TaxRuleTaxCodesLoaded) { foreach (TaxRuleTaxCode taxRuleTaxCode in this.TaxRuleTaxCodes) { taxRuleTaxCode.TaxRuleId = this.TaxRuleId; } }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this TaxRule object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Associations
        private TaxRuleGroupCollection _TaxRuleGroups;
        private TaxRuleShipZoneCollection _TaxRuleShipZones;
        private TaxRuleTaxCodeCollection _TaxRuleTaxCodes;

        /// <summary>
        /// A collection of TaxRuleGroup objects associated with this TaxRule object.
        /// </summary>
        public TaxRuleGroupCollection TaxRuleGroups
        {
            get
            {
                if (!this.TaxRuleGroupsLoaded)
                {
                    this._TaxRuleGroups = TaxRuleGroupDataSource.LoadForTaxRule(this.TaxRuleId);
                }
                return this._TaxRuleGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxRuleGroupsLoaded { get { return (this._TaxRuleGroups != null); } }
        /// <summary>
        /// A collection of TaxRuleShipZone objects associated with this TaxRule object.
        /// </summary>
        public TaxRuleShipZoneCollection TaxRuleShipZones
        {
            get
            {
                if (!this.TaxRuleShipZonesLoaded)
                {
                    this._TaxRuleShipZones = TaxRuleShipZoneDataSource.LoadForTaxRule(this.TaxRuleId);
                }
                return this._TaxRuleShipZones;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxRuleShipZonesLoaded { get { return (this._TaxRuleShipZones != null); } }
        /// <summary>
        /// A collection of TaxRuleTaxCode objects associated with this TaxRule object.
        /// </summary>
        public TaxRuleTaxCodeCollection TaxRuleTaxCodes
        {
            get
            {
                if (!this.TaxRuleTaxCodesLoaded)
                {
                    this._TaxRuleTaxCodes = TaxRuleTaxCodeDataSource.LoadForTaxRule(this.TaxRuleId);
                }
                return this._TaxRuleTaxCodes;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxRuleTaxCodesLoaded { get { return (this._TaxRuleTaxCodes != null); } }
#endregion

        /// <summary>
        /// Deletes this TaxRule object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_TaxRules");
            deleteQuery.Append(" WHERE TaxRuleId = @TaxRuleId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@TaxRuleId", System.Data.DbType.Int32, this.TaxRuleId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this TaxRule object from the database for the given primary key.
        /// </summary>
        /// <param name="taxRuleId">Value of TaxRuleId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 taxRuleId)
        {
            bool result = false;
            this.TaxRuleId = taxRuleId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxRules");
            selectQuery.Append(" WHERE TaxRuleId = @taxRuleId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxRuleId", System.Data.DbType.Int32, taxRuleId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this TaxRule object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.TaxRuleId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_TaxRules");
                    selectQuery.Append(" WHERE TaxRuleId = @TaxRuleId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@TaxRuleId", System.Data.DbType.Int32, this.TaxRuleId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_TaxRules SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", TaxRate = @TaxRate");
                    updateQuery.Append(", UseBillingAddress = @UseBillingAddress");
                    updateQuery.Append(", GroupRuleId = @GroupRuleId");
                    updateQuery.Append(", TaxCodeId = @TaxCodeId");
                    updateQuery.Append(", Priority = @Priority");
                    updateQuery.Append(", RoundingRuleId = @RoundingRuleId");
                    updateQuery.Append(", UsePerItemTax = @UsePerItemTax");
                    updateQuery.Append(" WHERE TaxRuleId = @TaxRuleId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@TaxRuleId", System.Data.DbType.Int32, this.TaxRuleId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@TaxRate", System.Data.DbType.Decimal, this.TaxRate);
                        database.AddInParameter(updateCommand, "@UseBillingAddress", System.Data.DbType.Boolean, this.UseBillingAddress);
                        database.AddInParameter(updateCommand, "@GroupRuleId", System.Data.DbType.Byte, this.GroupRuleId);
                        database.AddInParameter(updateCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(updateCommand, "@Priority", System.Data.DbType.Int16, this.Priority);
                        database.AddInParameter(updateCommand, "@RoundingRuleId", System.Data.DbType.Byte, this.RoundingRuleId);
                        database.AddInParameter(updateCommand, "@UsePerItemTax", System.Data.DbType.Boolean, this.UsePerItemTax);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_TaxRules (StoreId, Name, TaxRate, UseBillingAddress, GroupRuleId, TaxCodeId, Priority, RoundingRuleId, UsePerItemTax)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @TaxRate, @UseBillingAddress, @GroupRuleId, @TaxCodeId, @Priority, @RoundingRuleId, @UsePerItemTax)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@TaxRuleId", System.Data.DbType.Int32, this.TaxRuleId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@TaxRate", System.Data.DbType.Decimal, this.TaxRate);
                        database.AddInParameter(insertCommand, "@UseBillingAddress", System.Data.DbType.Boolean, this.UseBillingAddress);
                        database.AddInParameter(insertCommand, "@GroupRuleId", System.Data.DbType.Byte, this.GroupRuleId);
                        database.AddInParameter(insertCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(insertCommand, "@Priority", System.Data.DbType.Int16, this.Priority);
                        database.AddInParameter(insertCommand, "@RoundingRuleId", System.Data.DbType.Byte, this.RoundingRuleId);
                        database.AddInParameter(insertCommand, "@UsePerItemTax", System.Data.DbType.Boolean, this.UsePerItemTax);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._TaxRuleId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this TaxRule object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.TaxRuleGroupsLoaded) this.TaxRuleGroups.Save();
            if (this.TaxRuleShipZonesLoaded) this.TaxRuleShipZones.Save();
            if (this.TaxRuleTaxCodesLoaded) this.TaxRuleTaxCodes.Save();
        }

     }
}
