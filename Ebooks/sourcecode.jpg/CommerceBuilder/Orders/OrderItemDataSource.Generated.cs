//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// DataSource class for OrderItem objects
    /// </summary>
    public partial class OrderItemDataSource
    {
        /// <summary>
        /// Deletes a OrderItem object from the database
        /// </summary>
        /// <param name="orderItem">The OrderItem object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(OrderItem orderItem)
        {
            return orderItem.Delete();
        }

        /// <summary>
        /// Deletes a OrderItem object with given id from the database
        /// </summary>
        /// <param name="orderItemId">Value of OrderItemId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 orderItemId)
        {
            OrderItem orderItem = new OrderItem();
            if (orderItem.Load(orderItemId)) return orderItem.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a OrderItem object to the database.
        /// </summary>
        /// <param name="orderItem">The OrderItem object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(OrderItem orderItem) { return orderItem.Save(); }

        /// <summary>
        /// Loads a OrderItem object for given Id from the database.
        /// </summary>
        /// <param name="orderItemId">Value of OrderItemId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded OrderItem object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItem Load(Int32 orderItemId)
        {
            return OrderItemDataSource.Load(orderItemId, true);
        }

        /// <summary>
        /// Loads a OrderItem object for given Id from the database.
        /// </summary>
        /// <param name="orderItemId">Value of OrderItemId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded OrderItem object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItem Load(Int32 orderItemId, bool useCache)
        {
            if (orderItemId == 0) return null;
            OrderItem orderItem = null;
            string key = "OrderItem_" + orderItemId.ToString();
            if (useCache)
            {
                orderItem = ContextCache.GetObject(key) as OrderItem;
                if (orderItem != null) return orderItem;
            }
            orderItem = new OrderItem();
            if (orderItem.Load(orderItemId))
            {
                if (useCache) ContextCache.SetObject(key, orderItem);
                return orderItem;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of OrderItem objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the OrderItem objects that should be loaded.</param>
        /// <returns>The number of OrderItem objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderItems" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderItem objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderItem.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItems");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            OrderItemCollection results = new OrderItemCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderItem orderItem = new OrderItem();
                        OrderItem.LoadDataReader(orderItem, dr);
                        results.Add(orderItem);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderItem objects for the given OrderId in the database.
        /// <param name="orderId">The given OrderId</param>
        /// </summary>
        /// <returns>The Number of OrderItem objects for the given OrderId in the database.</returns>
        public static int CountForOrder(Int32 orderId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderItems WHERE OrderId = @orderId");
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrder(Int32 orderId)
        {
            return LoadForOrder(orderId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrder(Int32 orderId, string sortExpression)
        {
            return LoadForOrder(orderId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrder(Int32 orderId, int maximumRows, int startRowIndex)
        {
            return LoadForOrder(orderId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderId from the database
        /// </summary>
        /// <param name="orderId">The given OrderId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrder(Int32 orderId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderItem.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItems");
            selectQuery.Append(" WHERE OrderId = @orderId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
            //EXECUTE THE COMMAND
            OrderItemCollection results = new OrderItemCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderItem orderItem = new OrderItem();
                        OrderItem.LoadDataReader(orderItem, dr);
                        results.Add(orderItem);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderItem objects for the given OrderShipmentId in the database.
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// </summary>
        /// <returns>The Number of OrderItem objects for the given OrderShipmentId in the database.</returns>
        public static int CountForOrderShipment(Int32 orderShipmentId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderItems WHERE OrderShipmentId = @orderShipmentId");
            database.AddInParameter(selectCommand, "@orderShipmentId", System.Data.DbType.Int32, NullableData.DbNullify(orderShipmentId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrderShipment(Int32 orderShipmentId)
        {
            return LoadForOrderShipment(orderShipmentId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrderShipment(Int32 orderShipmentId, string sortExpression)
        {
            return LoadForOrderShipment(orderShipmentId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrderShipment(Int32 orderShipmentId, int maximumRows, int startRowIndex)
        {
            return LoadForOrderShipment(orderShipmentId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForOrderShipment(Int32 orderShipmentId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderItem.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItems");
            selectQuery.Append(" WHERE OrderShipmentId = @orderShipmentId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderShipmentId", System.Data.DbType.Int32, NullableData.DbNullify(orderShipmentId));
            //EXECUTE THE COMMAND
            OrderItemCollection results = new OrderItemCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderItem orderItem = new OrderItem();
                        OrderItem.LoadDataReader(orderItem, dr);
                        results.Add(orderItem);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderItem objects for the given ProductId in the database.
        /// <param name="productId">The given ProductId</param>
        /// </summary>
        /// <returns>The Number of OrderItem objects for the given ProductId in the database.</returns>
        public static int CountForProduct(Int32 productId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderItems WHERE ProductId = @productId");
            database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, NullableData.DbNullify(productId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given ProductId from the database
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForProduct(Int32 productId)
        {
            return LoadForProduct(productId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given ProductId from the database
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForProduct(Int32 productId, string sortExpression)
        {
            return LoadForProduct(productId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given ProductId from the database
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForProduct(Int32 productId, int maximumRows, int startRowIndex)
        {
            return LoadForProduct(productId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given ProductId from the database
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForProduct(Int32 productId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderItem.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItems");
            selectQuery.Append(" WHERE ProductId = @productId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, NullableData.DbNullify(productId));
            //EXECUTE THE COMMAND
            OrderItemCollection results = new OrderItemCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderItem orderItem = new OrderItem();
                        OrderItem.LoadDataReader(orderItem, dr);
                        results.Add(orderItem);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderItem objects for the given TaxCodeId in the database.
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// </summary>
        /// <returns>The Number of OrderItem objects for the given TaxCodeId in the database.</returns>
        public static int CountForTaxCode(Int32 taxCodeId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderItems WHERE TaxCodeId = @taxCodeId");
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(taxCodeId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForTaxCode(Int32 taxCodeId)
        {
            return LoadForTaxCode(taxCodeId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForTaxCode(Int32 taxCodeId, string sortExpression)
        {
            return LoadForTaxCode(taxCodeId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex)
        {
            return LoadForTaxCode(taxCodeId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderItem.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItems");
            selectQuery.Append(" WHERE TaxCodeId = @taxCodeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(taxCodeId));
            //EXECUTE THE COMMAND
            OrderItemCollection results = new OrderItemCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderItem orderItem = new OrderItem();
                        OrderItem.LoadDataReader(orderItem, dr);
                        results.Add(orderItem);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderItem objects for the given WishlistItemId in the database.
        /// <param name="wishlistItemId">The given WishlistItemId</param>
        /// </summary>
        /// <returns>The Number of OrderItem objects for the given WishlistItemId in the database.</returns>
        public static int CountForWishlistItem(Int32 wishlistItemId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderItems WHERE WishlistItemId = @wishlistItemId");
            database.AddInParameter(selectCommand, "@wishlistItemId", System.Data.DbType.Int32, NullableData.DbNullify(wishlistItemId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WishlistItemId from the database
        /// </summary>
        /// <param name="wishlistItemId">The given WishlistItemId</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWishlistItem(Int32 wishlistItemId)
        {
            return LoadForWishlistItem(wishlistItemId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WishlistItemId from the database
        /// </summary>
        /// <param name="wishlistItemId">The given WishlistItemId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWishlistItem(Int32 wishlistItemId, string sortExpression)
        {
            return LoadForWishlistItem(wishlistItemId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WishlistItemId from the database
        /// </summary>
        /// <param name="wishlistItemId">The given WishlistItemId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWishlistItem(Int32 wishlistItemId, int maximumRows, int startRowIndex)
        {
            return LoadForWishlistItem(wishlistItemId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WishlistItemId from the database
        /// </summary>
        /// <param name="wishlistItemId">The given WishlistItemId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWishlistItem(Int32 wishlistItemId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderItem.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItems");
            selectQuery.Append(" WHERE WishlistItemId = @wishlistItemId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@wishlistItemId", System.Data.DbType.Int32, NullableData.DbNullify(wishlistItemId));
            //EXECUTE THE COMMAND
            OrderItemCollection results = new OrderItemCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderItem orderItem = new OrderItem();
                        OrderItem.LoadDataReader(orderItem, dr);
                        results.Add(orderItem);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderItem objects for the given WrapStyleId in the database.
        /// <param name="wrapStyleId">The given WrapStyleId</param>
        /// </summary>
        /// <returns>The Number of OrderItem objects for the given WrapStyleId in the database.</returns>
        public static int CountForWrapStyle(Int32 wrapStyleId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderItems WHERE WrapStyleId = @wrapStyleId");
            database.AddInParameter(selectCommand, "@wrapStyleId", System.Data.DbType.Int32, NullableData.DbNullify(wrapStyleId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WrapStyleId from the database
        /// </summary>
        /// <param name="wrapStyleId">The given WrapStyleId</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWrapStyle(Int32 wrapStyleId)
        {
            return LoadForWrapStyle(wrapStyleId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WrapStyleId from the database
        /// </summary>
        /// <param name="wrapStyleId">The given WrapStyleId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWrapStyle(Int32 wrapStyleId, string sortExpression)
        {
            return LoadForWrapStyle(wrapStyleId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WrapStyleId from the database
        /// </summary>
        /// <param name="wrapStyleId">The given WrapStyleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWrapStyle(Int32 wrapStyleId, int maximumRows, int startRowIndex)
        {
            return LoadForWrapStyle(wrapStyleId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderItem objects for the given WrapStyleId from the database
        /// </summary>
        /// <param name="wrapStyleId">The given WrapStyleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderItem objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderItemCollection LoadForWrapStyle(Int32 wrapStyleId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderItem.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderItems");
            selectQuery.Append(" WHERE WrapStyleId = @wrapStyleId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@wrapStyleId", System.Data.DbType.Int32, NullableData.DbNullify(wrapStyleId));
            //EXECUTE THE COMMAND
            OrderItemCollection results = new OrderItemCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderItem orderItem = new OrderItem();
                        OrderItem.LoadDataReader(orderItem, dr);
                        results.Add(orderItem);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Gets the next value of the OrderBy field for OrderItem objects.
        /// </summary>
        /// <param name="orderId">The OrderId for which to get the next OrderBy value</param>
        /// <returns>The next value of the OrderBy field for OrderItem objects</returns>
        public static short GetNextOrderBy(Int32 orderId)
        {
            Database database = Token.Instance.Database;
            using (DbCommand selectCommand = database.GetSqlStringCommand("SELECT (Max(OrderBy) + 1) AS NextOrderBy FROM ac_OrderItems WHERE OrderId = @orderId"))
            {
                database.AddInParameter(selectCommand, "@orderId", System.Data.DbType.Int32, orderId);
                object result = database.ExecuteScalar(selectCommand);
                if (result.Equals(DBNull.Value)) return 1;
                return (short)(int)result;
            }
        }

        /// <summary>
        /// Updates/Saves the given OrderItem object to the database.
        /// </summary>
        /// <param name="orderItem">The OrderItem object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(OrderItem orderItem) { return orderItem.Save(); }

    }
}
