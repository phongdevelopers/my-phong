//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// DataSource class for OrderStatus objects
    /// </summary>
    public partial class OrderStatusDataSource
    {
        /// <summary>
        /// Deletes a OrderStatus object from the database
        /// </summary>
        /// <param name="orderStatus">The OrderStatus object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(OrderStatus orderStatus)
        {
            return orderStatus.Delete();
        }

        /// <summary>
        /// Deletes a OrderStatus object with given id from the database
        /// </summary>
        /// <param name="orderStatusId">Value of OrderStatusId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 orderStatusId)
        {
            OrderStatus orderStatus = new OrderStatus();
            if (orderStatus.Load(orderStatusId)) return orderStatus.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a OrderStatus object to the database.
        /// </summary>
        /// <param name="orderStatus">The OrderStatus object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(OrderStatus orderStatus) { return orderStatus.Save(); }

        /// <summary>
        /// Loads a OrderStatus object for given Id from the database.
        /// </summary>
        /// <param name="orderStatusId">Value of OrderStatusId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded OrderStatus object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatus Load(Int32 orderStatusId)
        {
            return OrderStatusDataSource.Load(orderStatusId, true);
        }

        /// <summary>
        /// Loads a OrderStatus object for given Id from the database.
        /// </summary>
        /// <param name="orderStatusId">Value of OrderStatusId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded OrderStatus object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatus Load(Int32 orderStatusId, bool useCache)
        {
            if (orderStatusId == 0) return null;
            OrderStatus orderStatus = null;
            string key = "OrderStatus_" + orderStatusId.ToString();
            if (useCache)
            {
                orderStatus = ContextCache.GetObject(key) as OrderStatus;
                if (orderStatus != null) return orderStatus;
            }
            orderStatus = new OrderStatus();
            if (orderStatus.Load(orderStatusId))
            {
                if (useCache) ContextCache.SetObject(key, orderStatus);
                return orderStatus;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of OrderStatus objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the OrderStatus objects that should be loaded.</param>
        /// <returns>The number of OrderStatus objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderStatuses" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderStatus.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderStatuses");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            OrderStatusCollection results = new OrderStatusCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderStatus orderStatus = new OrderStatus();
                        OrderStatus.LoadDataReader(orderStatus, dr);
                        results.Add(orderStatus);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderStatus objects associated with the given EmailTemplateId
        /// </summary>
        /// <param name="emailTemplateId">The given EmailTemplateId</param>
        /// <returns>The number of OrderStatus objects associated with with the given EmailTemplateId</returns>
        public static int CountForEmailTemplate(Int32 emailTemplateId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderStatusEmails WHERE EmailTemplateId = @emailTemplateId");
            database.AddInParameter(selectCommand, "@emailTemplateId", System.Data.DbType.Int32, emailTemplateId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the OrderStatus objects associated with the given EmailTemplateId
        /// </summary>
        /// <param name="emailTemplateId">The given EmailTemplateId</param>
        /// <returns>A collection of OrderStatus objects associated with with the given EmailTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForEmailTemplate(Int32 emailTemplateId)
        {
            return OrderStatusDataSource.LoadForEmailTemplate(emailTemplateId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the OrderStatus objects associated with the given EmailTemplateId
        /// </summary>
        /// <param name="emailTemplateId">The given EmailTemplateId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatus objects associated with with the given EmailTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForEmailTemplate(Int32 emailTemplateId, string sortExpression)
        {
            return OrderStatusDataSource.LoadForEmailTemplate(emailTemplateId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the OrderStatus objects associated with the given EmailTemplateId
        /// </summary>
        /// <param name="emailTemplateId">The given EmailTemplateId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderStatus objects associated with with the given EmailTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForEmailTemplate(Int32 emailTemplateId, int maximumRows, int startRowIndex)
        {
            return OrderStatusDataSource.LoadForEmailTemplate(emailTemplateId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the OrderStatus objects associated with the given EmailTemplateId
        /// </summary>
        /// <param name="emailTemplateId">The given EmailTemplateId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatus objects associated with with the given EmailTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForEmailTemplate(Int32 emailTemplateId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderStatus.GetColumnNames("ac_OrderStatuses"));
            selectQuery.Append(" FROM ac_OrderStatuses, ac_OrderStatusEmails");
            selectQuery.Append(" WHERE ac_OrderStatuses.OrderStatusId = ac_OrderStatusEmails.OrderStatusId");
            selectQuery.Append(" AND ac_OrderStatusEmails.EmailTemplateId = @emailTemplateId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@emailTemplateId", System.Data.DbType.Int32, emailTemplateId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            OrderStatusCollection results = new OrderStatusCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderStatus orderStatus = new OrderStatus();
                        OrderStatus.LoadDataReader(orderStatus, dr);
                        results.Add(orderStatus);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderStatus objects for the current store.
        /// </summary>
        /// <returns>The Number of OrderStatus objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderStatuses WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects for the current store from the database
        /// </summary>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatus objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatus objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderStatus.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderStatuses");
            selectQuery.Append(" WHERE StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            OrderStatusCollection results = new OrderStatusCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderStatus orderStatus = new OrderStatus();
                        OrderStatus.LoadDataReader(orderStatus, dr);
                        results.Add(orderStatus);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Gets the next value of the OrderBy field for OrderStatus objects.
        /// </summary>
        /// <returns>The next value of the OrderBy field for OrderStatus objects</returns>
        public static short GetNextOrderBy()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            using (DbCommand selectCommand = database.GetSqlStringCommand("SELECT (Max(OrderBy) + 1) AS NextOrderBy FROM ac_OrderStatuses WHERE StoreId = @storeId"))
            {
                database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
                object result = database.ExecuteScalar(selectCommand);
                if (result.Equals(DBNull.Value)) return 1;
                return (short)(int)result;
            }
        }

        /// <summary>
        /// Updates/Saves the given OrderStatus object to the database.
        /// </summary>
        /// <param name="orderStatus">The OrderStatus object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(OrderStatus orderStatus) { return orderStatus.Save(); }

    }
}
