//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Messaging;
using CommerceBuilder.Orders;
using CommerceBuilder.Stores;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Messaging
{
    /// <summary>
    /// This class represents a EmailTemplate object in the database.
    /// </summary>
    public partial class EmailTemplate : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public EmailTemplate() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="emailTemplateId">Value of EmailTemplateId.</param>
        /// </summary>
        public EmailTemplate(Int32 emailTemplateId)
        {
            this.EmailTemplateId = emailTemplateId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "EmailTemplateId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "ToAddress");
          columnNames.Add(prefix + "FromAddress");
          columnNames.Add(prefix + "ReplyToAddress");
          columnNames.Add(prefix + "CCList");
          columnNames.Add(prefix + "BCCList");
          columnNames.Add(prefix + "Subject");
          columnNames.Add(prefix + "ContentFileName");
          columnNames.Add(prefix + "IsHTML");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given EmailTemplate object from the given database data reader.
        /// </summary>
        /// <param name="emailTemplate">The EmailTemplate object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(EmailTemplate emailTemplate, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            emailTemplate.EmailTemplateId = dr.GetInt32(0);
            emailTemplate.StoreId = dr.GetInt32(1);
            emailTemplate.Name = dr.GetString(2);
            emailTemplate.ToAddress = dr.GetString(3);
            emailTemplate.FromAddress = dr.GetString(4);
            emailTemplate.ReplyToAddress = NullableData.GetString(dr, 5);
            emailTemplate.CCList = NullableData.GetString(dr, 6);
            emailTemplate.BCCList = NullableData.GetString(dr, 7);
            emailTemplate.Subject = NullableData.GetString(dr, 8);
            emailTemplate.ContentFileName = NullableData.GetString(dr, 9);
            emailTemplate.IsHTML = dr.GetBoolean(10);
            emailTemplate.IsDirty = false;
        }

#endregion

        private Int32 _EmailTemplateId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _ToAddress = string.Empty;
        private String _FromAddress = string.Empty;
        private String _ReplyToAddress = string.Empty;
        private String _CCList = string.Empty;
        private String _BCCList = string.Empty;
        private String _Subject = string.Empty;
        private String _ContentFileName = string.Empty;
        private Boolean _IsHTML;
        private bool _IsDirty;

        /// <summary>
        /// EmailTemplateId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 EmailTemplateId
        {
            get { return this._EmailTemplateId; }
            set
            {
                if (this._EmailTemplateId != value)
                {
                    this._EmailTemplateId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ToAddress
        /// </summary>
        public String ToAddress
        {
            get { return this._ToAddress; }
            set
            {
                if (this._ToAddress != value)
                {
                    this._ToAddress = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FromAddress
        /// </summary>
        public String FromAddress
        {
            get { return this._FromAddress; }
            set
            {
                if (this._FromAddress != value)
                {
                    this._FromAddress = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReplyToAddress
        /// </summary>
        public String ReplyToAddress
        {
            get { return this._ReplyToAddress; }
            set
            {
                if (this._ReplyToAddress != value)
                {
                    this._ReplyToAddress = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CCList
        /// </summary>
        public String CCList
        {
            get { return this._CCList; }
            set
            {
                if (this._CCList != value)
                {
                    this._CCList = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BCCList
        /// </summary>
        public String BCCList
        {
            get { return this._BCCList; }
            set
            {
                if (this._BCCList != value)
                {
                    this._BCCList = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Subject
        /// </summary>
        public String Subject
        {
            get { return this._Subject; }
            set
            {
                if (this._Subject != value)
                {
                    this._Subject = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ContentFileName
        /// </summary>
        public String ContentFileName
        {
            get { return this._ContentFileName; }
            set
            {
                if (this._ContentFileName != value)
                {
                    this._ContentFileName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsHTML
        /// </summary>
        public Boolean IsHTML
        {
            get { return this._IsHTML; }
            set
            {
                if (this._IsHTML != value)
                {
                    this._IsHTML = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this EmailTemplate object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.TriggersLoaded && this.Triggers.IsDirty) return true;
                if (this.OrderStatusEmailsLoaded && this.OrderStatusEmails.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this EmailTemplate are properly associated with this EmailTemplate object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.TriggersLoaded) { foreach (EmailTemplateTrigger emailTemplateTrigger in this.Triggers) { emailTemplateTrigger.EmailTemplateId = this.EmailTemplateId; } }
            if (this.OrderStatusEmailsLoaded) { foreach (OrderStatusEmail orderStatusEmail in this.OrderStatusEmails) { orderStatusEmail.EmailTemplateId = this.EmailTemplateId; } }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this EmailTemplate object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private EmailTemplateTriggerCollection _Triggers;

        /// <summary>
        /// A collection of EmailTemplateTrigger objects associated with this EmailTemplate object.
        /// </summary>
        public EmailTemplateTriggerCollection Triggers
        {
            get
            {
                if (!this.TriggersLoaded)
                {
                    this._Triggers = EmailTemplateTriggerDataSource.LoadForEmailTemplate(this.EmailTemplateId);
                }
                return this._Triggers;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TriggersLoaded { get { return (this._Triggers != null); } }

#endregion

#region Associations
        private OrderStatusEmailCollection _OrderStatusEmails;

        /// <summary>
        /// A collection of OrderStatusEmail objects associated with this EmailTemplate object.
        /// </summary>
        public OrderStatusEmailCollection OrderStatusEmails
        {
            get
            {
                if (!this.OrderStatusEmailsLoaded)
                {
                    this._OrderStatusEmails = OrderStatusEmailDataSource.LoadForEmailTemplate(this.EmailTemplateId);
                }
                return this._OrderStatusEmails;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderStatusEmailsLoaded { get { return (this._OrderStatusEmails != null); } }
#endregion

        /// <summary>
        /// Deletes this EmailTemplate object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_EmailTemplates");
            deleteQuery.Append(" WHERE EmailTemplateId = @EmailTemplateId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this EmailTemplate object from the database for the given primary key.
        /// </summary>
        /// <param name="emailTemplateId">Value of EmailTemplateId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 emailTemplateId)
        {
            bool result = false;
            this.EmailTemplateId = emailTemplateId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_EmailTemplates");
            selectQuery.Append(" WHERE EmailTemplateId = @emailTemplateId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@emailTemplateId", System.Data.DbType.Int32, emailTemplateId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this EmailTemplate object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.EmailTemplateId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_EmailTemplates");
                    selectQuery.Append(" WHERE EmailTemplateId = @EmailTemplateId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_EmailTemplates SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", ToAddress = @ToAddress");
                    updateQuery.Append(", FromAddress = @FromAddress");
                    updateQuery.Append(", ReplyToAddress = @ReplyToAddress");
                    updateQuery.Append(", CCList = @CCList");
                    updateQuery.Append(", BCCList = @BCCList");
                    updateQuery.Append(", Subject = @Subject");
                    updateQuery.Append(", ContentFileName = @ContentFileName");
                    updateQuery.Append(", IsHTML = @IsHTML");
                    updateQuery.Append(" WHERE EmailTemplateId = @EmailTemplateId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@ToAddress", System.Data.DbType.String, this.ToAddress);
                        database.AddInParameter(updateCommand, "@FromAddress", System.Data.DbType.String, this.FromAddress);
                        database.AddInParameter(updateCommand, "@ReplyToAddress", System.Data.DbType.String, NullableData.DbNullify(this.ReplyToAddress));
                        database.AddInParameter(updateCommand, "@CCList", System.Data.DbType.String, NullableData.DbNullify(this.CCList));
                        database.AddInParameter(updateCommand, "@BCCList", System.Data.DbType.String, NullableData.DbNullify(this.BCCList));
                        database.AddInParameter(updateCommand, "@Subject", System.Data.DbType.String, NullableData.DbNullify(this.Subject));
                        database.AddInParameter(updateCommand, "@ContentFileName", System.Data.DbType.String, NullableData.DbNullify(this.ContentFileName));
                        database.AddInParameter(updateCommand, "@IsHTML", System.Data.DbType.Boolean, this.IsHTML);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_EmailTemplates (StoreId, Name, ToAddress, FromAddress, ReplyToAddress, CCList, BCCList, Subject, ContentFileName, IsHTML)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @ToAddress, @FromAddress, @ReplyToAddress, @CCList, @BCCList, @Subject, @ContentFileName, @IsHTML)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@EmailTemplateId", System.Data.DbType.Int32, this.EmailTemplateId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@ToAddress", System.Data.DbType.String, this.ToAddress);
                        database.AddInParameter(insertCommand, "@FromAddress", System.Data.DbType.String, this.FromAddress);
                        database.AddInParameter(insertCommand, "@ReplyToAddress", System.Data.DbType.String, NullableData.DbNullify(this.ReplyToAddress));
                        database.AddInParameter(insertCommand, "@CCList", System.Data.DbType.String, NullableData.DbNullify(this.CCList));
                        database.AddInParameter(insertCommand, "@BCCList", System.Data.DbType.String, NullableData.DbNullify(this.BCCList));
                        database.AddInParameter(insertCommand, "@Subject", System.Data.DbType.String, NullableData.DbNullify(this.Subject));
                        database.AddInParameter(insertCommand, "@ContentFileName", System.Data.DbType.String, NullableData.DbNullify(this.ContentFileName));
                        database.AddInParameter(insertCommand, "@IsHTML", System.Data.DbType.Boolean, this.IsHTML);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._EmailTemplateId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this EmailTemplate object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.TriggersLoaded) this.Triggers.Save();
            if (this.OrderStatusEmailsLoaded) this.OrderStatusEmails.Save();
        }

     }
}
