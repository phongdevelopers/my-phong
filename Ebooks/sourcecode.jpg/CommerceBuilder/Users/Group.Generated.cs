//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Marketing;
using CommerceBuilder.Payments;
using CommerceBuilder.Products;
using CommerceBuilder.Shipping;
using CommerceBuilder.Stores;
using CommerceBuilder.Taxes;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Users
{
    /// <summary>
    /// This class represents a Group object in the database.
    /// </summary>
    public partial class Group : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Group() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="groupId">Value of GroupId.</param>
        /// </summary>
        public Group(Int32 groupId)
        {
            this.GroupId = groupId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "GroupId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "Description");
          columnNames.Add(prefix + "IsTaxExempt");
          columnNames.Add(prefix + "IsReadOnly");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Group object from the given database data reader.
        /// </summary>
        /// <param name="group">The Group object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Group group, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            group.GroupId = dr.GetInt32(0);
            group.StoreId = dr.GetInt32(1);
            group.Name = dr.GetString(2);
            group.Description = NullableData.GetString(dr, 3);
            group.IsTaxExempt = dr.GetBoolean(4);
            group.IsReadOnly = dr.GetBoolean(5);
            group.IsDirty = false;
        }

#endregion

        private Int32 _GroupId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _Description = string.Empty;
        private Boolean _IsTaxExempt;
        private Boolean _IsReadOnly;
        private bool _IsDirty;

        /// <summary>
        /// GroupId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 GroupId
        {
            get { return this._GroupId; }
            set
            {
                if (this._GroupId != value)
                {
                    this._GroupId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Description
        /// </summary>
        public String Description
        {
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this._Description = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsTaxExempt
        /// </summary>
        public Boolean IsTaxExempt
        {
            get { return this._IsTaxExempt; }
            set
            {
                if (this._IsTaxExempt != value)
                {
                    this._IsTaxExempt = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsReadOnly
        /// </summary>
        public Boolean IsReadOnly
        {
            get { return this._IsReadOnly; }
            set
            {
                if (this._IsReadOnly != value)
                {
                    this._IsReadOnly = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Group object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.AffiliatesLoaded && this.Affiliates.IsDirty) return true;
                if (this.CouponGroupsLoaded && this.CouponGroups.IsDirty) return true;
                if (this.GroupRolesLoaded && this.GroupRoles.IsDirty) return true;
                if (this.PaymentMethodGroupsLoaded && this.PaymentMethodGroups.IsDirty) return true;
                if (this.ShipMethodGroupsLoaded && this.ShipMethodGroups.IsDirty) return true;
                if (this.SpecialGroupsLoaded && this.SpecialGroups.IsDirty) return true;
                if (this.SubscriptionPlansLoaded && this.SubscriptionPlans.IsDirty) return true;
                if (this.TaxRuleGroupsLoaded && this.TaxRuleGroups.IsDirty) return true;
                if (this.UserGroupsLoaded && this.UserGroups.IsDirty) return true;
                if (this.VendorGroupsLoaded && this.VendorGroups.IsDirty) return true;
                if (this.VolumeDiscountGroupsLoaded && this.VolumeDiscountGroups.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Group are properly associated with this Group object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.AffiliatesLoaded) { foreach (Affiliate affiliate in this.Affiliates) { affiliate.GroupId = this.GroupId; } }
            if (this.CouponGroupsLoaded) { foreach (CouponGroup couponGroup in this.CouponGroups) { couponGroup.GroupId = this.GroupId; } }
            if (this.GroupRolesLoaded) { foreach (GroupRole groupRole in this.GroupRoles) { groupRole.GroupId = this.GroupId; } }
            if (this.PaymentMethodGroupsLoaded) { foreach (PaymentMethodGroup paymentMethodGroup in this.PaymentMethodGroups) { paymentMethodGroup.GroupId = this.GroupId; } }
            if (this.ShipMethodGroupsLoaded) { foreach (ShipMethodGroup shipMethodGroup in this.ShipMethodGroups) { shipMethodGroup.GroupId = this.GroupId; } }
            if (this.SpecialGroupsLoaded) { foreach (SpecialGroup specialGroup in this.SpecialGroups) { specialGroup.GroupId = this.GroupId; } }
            if (this.SubscriptionPlansLoaded) { foreach (SubscriptionPlan subscriptionPlan in this.SubscriptionPlans) { subscriptionPlan.GroupId = this.GroupId; } }
            if (this.TaxRuleGroupsLoaded) { foreach (TaxRuleGroup taxRuleGroup in this.TaxRuleGroups) { taxRuleGroup.GroupId = this.GroupId; } }
            if (this.UserGroupsLoaded) { foreach (UserGroup userGroup in this.UserGroups) { userGroup.GroupId = this.GroupId; } }
            if (this.VendorGroupsLoaded) { foreach (VendorGroup vendorGroup in this.VendorGroups) { vendorGroup.GroupId = this.GroupId; } }
            if (this.VolumeDiscountGroupsLoaded) { foreach (VolumeDiscountGroup volumeDiscountGroup in this.VolumeDiscountGroups) { volumeDiscountGroup.GroupId = this.GroupId; } }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this Group object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private AffiliateCollection _Affiliates;
        private SubscriptionPlanCollection _SubscriptionPlans;

        /// <summary>
        /// A collection of Affiliate objects associated with this Group object.
        /// </summary>
        public AffiliateCollection Affiliates
        {
            get
            {
                if (!this.AffiliatesLoaded)
                {
                    this._Affiliates = AffiliateDataSource.LoadForGroup(this.GroupId);
                }
                return this._Affiliates;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AffiliatesLoaded { get { return (this._Affiliates != null); } }

        /// <summary>
        /// A collection of SubscriptionPlan objects associated with this Group object.
        /// </summary>
        public SubscriptionPlanCollection SubscriptionPlans
        {
            get
            {
                if (!this.SubscriptionPlansLoaded)
                {
                    this._SubscriptionPlans = SubscriptionPlanDataSource.LoadForGroup(this.GroupId);
                }
                return this._SubscriptionPlans;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SubscriptionPlansLoaded { get { return (this._SubscriptionPlans != null); } }

#endregion

#region Associations
        private CouponGroupCollection _CouponGroups;
        private GroupRoleCollection _GroupRoles;
        private PaymentMethodGroupCollection _PaymentMethodGroups;
        private ShipMethodGroupCollection _ShipMethodGroups;
        private SpecialGroupCollection _SpecialGroups;
        private TaxRuleGroupCollection _TaxRuleGroups;
        private UserGroupCollection _UserGroups;
        private VendorGroupCollection _VendorGroups;
        private VolumeDiscountGroupCollection _VolumeDiscountGroups;

        /// <summary>
        /// A collection of CouponGroup objects associated with this Group object.
        /// </summary>
        public CouponGroupCollection CouponGroups
        {
            get
            {
                if (!this.CouponGroupsLoaded)
                {
                    this._CouponGroups = CouponGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._CouponGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CouponGroupsLoaded { get { return (this._CouponGroups != null); } }
        /// <summary>
        /// A collection of GroupRole objects associated with this Group object.
        /// </summary>
        public GroupRoleCollection GroupRoles
        {
            get
            {
                if (!this.GroupRolesLoaded)
                {
                    this._GroupRoles = GroupRoleDataSource.LoadForGroup(this.GroupId);
                }
                return this._GroupRoles;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool GroupRolesLoaded { get { return (this._GroupRoles != null); } }
        /// <summary>
        /// A collection of PaymentMethodGroup objects associated with this Group object.
        /// </summary>
        public PaymentMethodGroupCollection PaymentMethodGroups
        {
            get
            {
                if (!this.PaymentMethodGroupsLoaded)
                {
                    this._PaymentMethodGroups = PaymentMethodGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._PaymentMethodGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentMethodGroupsLoaded { get { return (this._PaymentMethodGroups != null); } }
        /// <summary>
        /// A collection of ShipMethodGroup objects associated with this Group object.
        /// </summary>
        public ShipMethodGroupCollection ShipMethodGroups
        {
            get
            {
                if (!this.ShipMethodGroupsLoaded)
                {
                    this._ShipMethodGroups = ShipMethodGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._ShipMethodGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodGroupsLoaded { get { return (this._ShipMethodGroups != null); } }
        /// <summary>
        /// A collection of SpecialGroup objects associated with this Group object.
        /// </summary>
        public SpecialGroupCollection SpecialGroups
        {
            get
            {
                if (!this.SpecialGroupsLoaded)
                {
                    this._SpecialGroups = SpecialGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._SpecialGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SpecialGroupsLoaded { get { return (this._SpecialGroups != null); } }
        /// <summary>
        /// A collection of TaxRuleGroup objects associated with this Group object.
        /// </summary>
        public TaxRuleGroupCollection TaxRuleGroups
        {
            get
            {
                if (!this.TaxRuleGroupsLoaded)
                {
                    this._TaxRuleGroups = TaxRuleGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._TaxRuleGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxRuleGroupsLoaded { get { return (this._TaxRuleGroups != null); } }
        /// <summary>
        /// A collection of UserGroup objects associated with this Group object.
        /// </summary>
        public UserGroupCollection UserGroups
        {
            get
            {
                if (!this.UserGroupsLoaded)
                {
                    this._UserGroups = UserGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._UserGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserGroupsLoaded { get { return (this._UserGroups != null); } }
        /// <summary>
        /// A collection of VendorGroup objects associated with this Group object.
        /// </summary>
        public VendorGroupCollection VendorGroups
        {
            get
            {
                if (!this.VendorGroupsLoaded)
                {
                    this._VendorGroups = VendorGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._VendorGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool VendorGroupsLoaded { get { return (this._VendorGroups != null); } }
        /// <summary>
        /// A collection of VolumeDiscountGroup objects associated with this Group object.
        /// </summary>
        public VolumeDiscountGroupCollection VolumeDiscountGroups
        {
            get
            {
                if (!this.VolumeDiscountGroupsLoaded)
                {
                    this._VolumeDiscountGroups = VolumeDiscountGroupDataSource.LoadForGroup(this.GroupId);
                }
                return this._VolumeDiscountGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool VolumeDiscountGroupsLoaded { get { return (this._VolumeDiscountGroups != null); } }
#endregion

        /// <summary>
        /// Deletes this Group object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Groups");
            deleteQuery.Append(" WHERE GroupId = @GroupId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@GroupId", System.Data.DbType.Int32, this.GroupId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Group object from the database for the given primary key.
        /// </summary>
        /// <param name="groupId">Value of GroupId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 groupId)
        {
            bool result = false;
            this.GroupId = groupId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Groups");
            selectQuery.Append(" WHERE GroupId = @groupId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@groupId", System.Data.DbType.Int32, groupId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Group object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.GroupId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Groups");
                    selectQuery.Append(" WHERE GroupId = @GroupId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@GroupId", System.Data.DbType.Int32, this.GroupId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Groups SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", Description = @Description");
                    updateQuery.Append(", IsTaxExempt = @IsTaxExempt");
                    updateQuery.Append(", IsReadOnly = @IsReadOnly");
                    updateQuery.Append(" WHERE GroupId = @GroupId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@GroupId", System.Data.DbType.Int32, this.GroupId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        database.AddInParameter(updateCommand, "@IsTaxExempt", System.Data.DbType.Boolean, this.IsTaxExempt);
                        database.AddInParameter(updateCommand, "@IsReadOnly", System.Data.DbType.Boolean, this.IsReadOnly);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Groups (StoreId, Name, Description, IsTaxExempt, IsReadOnly)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @Description, @IsTaxExempt, @IsReadOnly)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@GroupId", System.Data.DbType.Int32, this.GroupId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        database.AddInParameter(insertCommand, "@IsTaxExempt", System.Data.DbType.Boolean, this.IsTaxExempt);
                        database.AddInParameter(insertCommand, "@IsReadOnly", System.Data.DbType.Boolean, this.IsReadOnly);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._GroupId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Group object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.AffiliatesLoaded) this.Affiliates.Save();
            if (this.CouponGroupsLoaded) this.CouponGroups.Save();
            if (this.GroupRolesLoaded) this.GroupRoles.Save();
            if (this.PaymentMethodGroupsLoaded) this.PaymentMethodGroups.Save();
            if (this.ShipMethodGroupsLoaded) this.ShipMethodGroups.Save();
            if (this.SpecialGroupsLoaded) this.SpecialGroups.Save();
            if (this.SubscriptionPlansLoaded) this.SubscriptionPlans.Save();
            if (this.TaxRuleGroupsLoaded) this.TaxRuleGroups.Save();
            if (this.UserGroupsLoaded) this.UserGroups.Save();
            if (this.VendorGroupsLoaded) this.VendorGroups.Save();
            if (this.VolumeDiscountGroupsLoaded) this.VolumeDiscountGroups.Save();
        }

     }
}
