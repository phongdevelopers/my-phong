//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Products;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Users
{
    /// <summary>
    /// This class represents a WishlistItem object in the database.
    /// </summary>
    public partial class WishlistItem : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public WishlistItem() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="wishlistItemId">Value of WishlistItemId.</param>
        /// </summary>
        public WishlistItem(Int32 wishlistItemId)
        {
            this.WishlistItemId = wishlistItemId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "WishlistItemId");
          columnNames.Add(prefix + "WishlistId");
          columnNames.Add(prefix + "ProductId");
          columnNames.Add(prefix + "OptionList");
          columnNames.Add(prefix + "KitList");
          columnNames.Add(prefix + "Price");
          columnNames.Add(prefix + "LineMessage");
          columnNames.Add(prefix + "CreatedDate");
          columnNames.Add(prefix + "LastModifiedDate");
          columnNames.Add(prefix + "Desired");
          columnNames.Add(prefix + "Received");
          columnNames.Add(prefix + "Priority");
          columnNames.Add(prefix + "Comment");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given WishlistItem object from the given database data reader.
        /// </summary>
        /// <param name="wishlistItem">The WishlistItem object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(WishlistItem wishlistItem, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            wishlistItem.WishlistItemId = dr.GetInt32(0);
            wishlistItem.WishlistId = dr.GetInt32(1);
            wishlistItem.ProductId = dr.GetInt32(2);
            wishlistItem.OptionList = NullableData.GetString(dr, 3);
            wishlistItem.KitList = NullableData.GetString(dr, 4);
            wishlistItem.Price = NullableData.GetDecimal(dr, 5);
            wishlistItem.LineMessage = NullableData.GetString(dr, 6);
            wishlistItem.CreatedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(7));
            wishlistItem.LastModifiedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(8));
            wishlistItem.Desired = dr.GetInt16(9);
            wishlistItem.Received = dr.GetInt16(10);
            wishlistItem.Priority = dr.GetByte(11);
            wishlistItem.Comment = NullableData.GetString(dr, 12);
            wishlistItem.IsDirty = false;
        }

#endregion

        private Int32 _WishlistItemId;
        private Int32 _WishlistId;
        private Int32 _ProductId;
        private String _OptionList = string.Empty;
        private String _KitList = string.Empty;
        private LSDecimal _Price;
        private String _LineMessage = string.Empty;
        private DateTime _CreatedDate;
        private DateTime _LastModifiedDate;
        private Int16 _Desired;
        private Int16 _Received;
        private Byte _Priority;
        private String _Comment = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// WishlistItemId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 WishlistItemId
        {
            get { return this._WishlistItemId; }
            set
            {
                if (this._WishlistItemId != value)
                {
                    this._WishlistItemId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// WishlistId
        /// </summary>
        public Int32 WishlistId
        {
            get { return this._WishlistId; }
            set
            {
                if (this._WishlistId != value)
                {
                    this._WishlistId = value;
                    this.IsDirty = true;
                    this._Wishlist = null;
                }
            }
        }

        /// <summary>
        /// ProductId
        /// </summary>
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this._Product = null;
                }
            }
        }

        /// <summary>
        /// OptionList
        /// </summary>
        public String OptionList
        {
            get { return this._OptionList; }
            set
            {
                if (this._OptionList != value)
                {
                    this._OptionList = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// KitList
        /// </summary>
        public String KitList
        {
            get { return this._KitList; }
            set
            {
                if (this._KitList != value)
                {
                    this._KitList = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Price
        /// </summary>
        public LSDecimal Price
        {
            get { return this._Price; }
            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LineMessage
        /// </summary>
        public String LineMessage
        {
            get { return this._LineMessage; }
            set
            {
                if (this._LineMessage != value)
                {
                    this._LineMessage = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CreatedDate
        /// </summary>
        public DateTime CreatedDate
        {
            get { return this._CreatedDate; }
            set
            {
                if (this._CreatedDate != value)
                {
                    this._CreatedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastModifiedDate
        /// </summary>
        public DateTime LastModifiedDate
        {
            get { return this._LastModifiedDate; }
            set
            {
                if (this._LastModifiedDate != value)
                {
                    this._LastModifiedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Desired
        /// </summary>
        public Int16 Desired
        {
            get { return this._Desired; }
            set
            {
                if (this._Desired != value)
                {
                    this._Desired = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Received
        /// </summary>
        public Int16 Received
        {
            get { return this._Received; }
            set
            {
                if (this._Received != value)
                {
                    this._Received = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Priority
        /// </summary>
        public Byte Priority
        {
            get { return this._Priority; }
            set
            {
                if (this._Priority != value)
                {
                    this._Priority = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Comment
        /// </summary>
        public String Comment
        {
            get { return this._Comment; }
            set
            {
                if (this._Comment != value)
                {
                    this._Comment = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this WishlistItem object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.BasketItemsLoaded && this.BasketItems.IsDirty) return true;
                if (this.OrderItemsLoaded && this.OrderItems.IsDirty) return true;
                if (this.InputsLoaded && this.Inputs.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this WishlistItem are properly associated with this WishlistItem object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.BasketItemsLoaded) { foreach (BasketItem basketItem in this.BasketItems) { basketItem.WishlistItemId = this.WishlistItemId; } }
            if (this.OrderItemsLoaded) { foreach (OrderItem orderItem in this.OrderItems) { orderItem.WishlistItemId = this.WishlistItemId; } }
            if (this.InputsLoaded) { foreach (WishlistItemInput wishlistItemInput in this.Inputs) { wishlistItemInput.WishlistItemId = this.WishlistItemId; } }
        }

#region Parents
        private Product _Product;
        private Wishlist _Wishlist;

        /// <summary>
        /// The Product object that this WishlistItem object is associated with
        /// </summary>
        public Product Product
        {
            get
            {
                if (!this.ProductLoaded)
                {
                    this._Product = ProductDataSource.Load(this.ProductId);
                }
                return this._Product;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductLoaded { get { return ((this._Product != null) && (this._Product.ProductId == this.ProductId)); } }

        /// <summary>
        /// The Wishlist object that this WishlistItem object is associated with
        /// </summary>
        public Wishlist Wishlist
        {
            get
            {
                if (!this.WishlistLoaded)
                {
                    this._Wishlist = WishlistDataSource.Load(this.WishlistId);
                }
                return this._Wishlist;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WishlistLoaded { get { return ((this._Wishlist != null) && (this._Wishlist.WishlistId == this.WishlistId)); } }

#endregion

#region Children
        private BasketItemCollection _BasketItems;
        private OrderItemCollection _OrderItems;
        private WishlistItemInputCollection _Inputs;

        /// <summary>
        /// A collection of BasketItem objects associated with this WishlistItem object.
        /// </summary>
        public BasketItemCollection BasketItems
        {
            get
            {
                if (!this.BasketItemsLoaded)
                {
                    this._BasketItems = BasketItemDataSource.LoadForWishlistItem(this.WishlistItemId);
                }
                return this._BasketItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketItemsLoaded { get { return (this._BasketItems != null); } }

        /// <summary>
        /// A collection of OrderItem objects associated with this WishlistItem object.
        /// </summary>
        public OrderItemCollection OrderItems
        {
            get
            {
                if (!this.OrderItemsLoaded)
                {
                    this._OrderItems = OrderItemDataSource.LoadForWishlistItem(this.WishlistItemId);
                }
                return this._OrderItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemsLoaded { get { return (this._OrderItems != null); } }

        /// <summary>
        /// A collection of WishlistItemInput objects associated with this WishlistItem object.
        /// </summary>
        public WishlistItemInputCollection Inputs
        {
            get
            {
                if (!this.InputsLoaded)
                {
                    this._Inputs = WishlistItemInputDataSource.LoadForWishlistItem(this.WishlistItemId);
                }
                return this._Inputs;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool InputsLoaded { get { return (this._Inputs != null); } }

#endregion

        /// <summary>
        /// Deletes this WishlistItem object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_WishlistItems");
            deleteQuery.Append(" WHERE WishlistItemId = @WishlistItemId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@WishlistItemId", System.Data.DbType.Int32, this.WishlistItemId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this WishlistItem object from the database for the given primary key.
        /// </summary>
        /// <param name="wishlistItemId">Value of WishlistItemId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 wishlistItemId)
        {
            bool result = false;
            this.WishlistItemId = wishlistItemId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_WishlistItems");
            selectQuery.Append(" WHERE WishlistItemId = @wishlistItemId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@wishlistItemId", System.Data.DbType.Int32, wishlistItemId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this WishlistItem object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.WishlistItemId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.CreatedDate == System.DateTime.MinValue) this.CreatedDate = LocaleHelper.LocalNow;
                if (this.LastModifiedDate == System.DateTime.MinValue) this.LastModifiedDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_WishlistItems");
                    selectQuery.Append(" WHERE WishlistItemId = @WishlistItemId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@WishlistItemId", System.Data.DbType.Int32, this.WishlistItemId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_WishlistItems SET ");
                    updateQuery.Append("WishlistId = @WishlistId");
                    updateQuery.Append(", ProductId = @ProductId");
                    updateQuery.Append(", OptionList = @OptionList");
                    updateQuery.Append(", KitList = @KitList");
                    updateQuery.Append(", Price = @Price");
                    updateQuery.Append(", LineMessage = @LineMessage");
                    updateQuery.Append(", CreatedDate = @CreatedDate");
                    updateQuery.Append(", LastModifiedDate = @LastModifiedDate");
                    updateQuery.Append(", Desired = @Desired");
                    updateQuery.Append(", Received = @Received");
                    updateQuery.Append(", Priority = @Priority");
                    updateQuery.Append(", Comment = @Comment");
                    updateQuery.Append(" WHERE WishlistItemId = @WishlistItemId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@WishlistItemId", System.Data.DbType.Int32, this.WishlistItemId);
                        database.AddInParameter(updateCommand, "@WishlistId", System.Data.DbType.Int32, this.WishlistId);
                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(updateCommand, "@OptionList", System.Data.DbType.String, NullableData.DbNullify(this.OptionList));
                        database.AddInParameter(updateCommand, "@KitList", System.Data.DbType.String, NullableData.DbNullify(this.KitList));
                        database.AddInParameter(updateCommand, "@Price", System.Data.DbType.Decimal, NullableData.DbNullify(this.Price));
                        database.AddInParameter(updateCommand, "@LineMessage", System.Data.DbType.String, NullableData.DbNullify(this.LineMessage));
                        database.AddInParameter(updateCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        database.AddInParameter(updateCommand, "@LastModifiedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.LastModifiedDate));
                        database.AddInParameter(updateCommand, "@Desired", System.Data.DbType.Int16, this.Desired);
                        database.AddInParameter(updateCommand, "@Received", System.Data.DbType.Int16, this.Received);
                        database.AddInParameter(updateCommand, "@Priority", System.Data.DbType.Byte, this.Priority);
                        database.AddInParameter(updateCommand, "@Comment", System.Data.DbType.String, NullableData.DbNullify(this.Comment));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_WishlistItems (WishlistId, ProductId, OptionList, KitList, Price, LineMessage, CreatedDate, LastModifiedDate, Desired, Received, Priority, Comment)");
                    insertQuery.Append(" VALUES (@WishlistId, @ProductId, @OptionList, @KitList, @Price, @LineMessage, @CreatedDate, @LastModifiedDate, @Desired, @Received, @Priority, @Comment)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@WishlistItemId", System.Data.DbType.Int32, this.WishlistItemId);
                        database.AddInParameter(insertCommand, "@WishlistId", System.Data.DbType.Int32, this.WishlistId);
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@OptionList", System.Data.DbType.String, NullableData.DbNullify(this.OptionList));
                        database.AddInParameter(insertCommand, "@KitList", System.Data.DbType.String, NullableData.DbNullify(this.KitList));
                        database.AddInParameter(insertCommand, "@Price", System.Data.DbType.Decimal, NullableData.DbNullify(this.Price));
                        database.AddInParameter(insertCommand, "@LineMessage", System.Data.DbType.String, NullableData.DbNullify(this.LineMessage));
                        database.AddInParameter(insertCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        database.AddInParameter(insertCommand, "@LastModifiedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.LastModifiedDate));
                        database.AddInParameter(insertCommand, "@Desired", System.Data.DbType.Int16, this.Desired);
                        database.AddInParameter(insertCommand, "@Received", System.Data.DbType.Int16, this.Received);
                        database.AddInParameter(insertCommand, "@Priority", System.Data.DbType.Byte, this.Priority);
                        database.AddInParameter(insertCommand, "@Comment", System.Data.DbType.String, NullableData.DbNullify(this.Comment));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._WishlistItemId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this WishlistItem object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.BasketItemsLoaded) this.BasketItems.Save();
            if (this.OrderItemsLoaded) this.OrderItems.Save();
            if (this.InputsLoaded) this.Inputs.Save();
        }

     }
}
