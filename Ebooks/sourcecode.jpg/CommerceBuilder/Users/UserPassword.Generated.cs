//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Users
{
    /// <summary>
    /// This class represents a UserPassword object in the database.
    /// </summary>
    public partial class UserPassword : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UserPassword() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="userId">Value of UserId.</param>
        /// <param name="passwordNumber">Value of PasswordNumber.</param>
        /// </summary>
        public UserPassword(Int32 userId, Byte passwordNumber)
        {
            this.UserId = userId;
            this.PasswordNumber = passwordNumber;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "UserId");
          columnNames.Add(prefix + "PasswordNumber");
          columnNames.Add(prefix + "Password");
          columnNames.Add(prefix + "PasswordFormat");
          columnNames.Add(prefix + "CreateDate");
          columnNames.Add(prefix + "ForceExpiration");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given UserPassword object from the given database data reader.
        /// </summary>
        /// <param name="userPassword">The UserPassword object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(UserPassword userPassword, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            userPassword.UserId = dr.GetInt32(0);
            userPassword.PasswordNumber = dr.GetByte(1);
            userPassword.Password = dr.GetString(2);
            userPassword.PasswordFormat = NullableData.GetString(dr, 3);
            userPassword.CreateDate = LocaleHelper.ToLocalTime(dr.GetDateTime(4));
            userPassword.ForceExpiration = dr.GetBoolean(5);
            userPassword.IsDirty = false;
        }

#endregion

        private Int32 _UserId;
        private Byte _PasswordNumber;
        private String _Password = string.Empty;
        private String _PasswordFormat = string.Empty;
        private DateTime _CreateDate;
        private Boolean _ForceExpiration;
        private bool _IsDirty;

        /// <summary>
        /// UserId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 UserId
        {
            get { return this._UserId; }
            set
            {
                if (this._UserId != value)
                {
                    this._UserId = value;
                    this.IsDirty = true;
                    this._User = null;
                }
            }
        }

        /// <summary>
        /// PasswordNumber
        /// </summary>
        [DataObjectField(true, false, false)]
        public Byte PasswordNumber
        {
            get { return this._PasswordNumber; }
            set
            {
                if (this._PasswordNumber != value)
                {
                    this._PasswordNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Password
        /// </summary>
        public String Password
        {
            get { return this._Password; }
            set
            {
                if (this._Password != value)
                {
                    this._Password = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PasswordFormat
        /// </summary>
        public String PasswordFormat
        {
            get { return this._PasswordFormat; }
            set
            {
                if (this._PasswordFormat != value)
                {
                    this._PasswordFormat = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CreateDate
        /// </summary>
        public DateTime CreateDate
        {
            get { return this._CreateDate; }
            set
            {
                if (this._CreateDate != value)
                {
                    this._CreateDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ForceExpiration
        /// </summary>
        public Boolean ForceExpiration
        {
            get { return this._ForceExpiration; }
            set
            {
                if (this._ForceExpiration != value)
                {
                    this._ForceExpiration = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this UserPassword object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private User _User;

        /// <summary>
        /// The User object that this UserPassword object is associated with
        /// </summary>
        public User User
        {
            get
            {
                if (!this.UserLoaded)
                {
                    this._User = UserDataSource.Load(this.UserId);
                }
                return this._User;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserLoaded { get { return ((this._User != null) && (this._User.UserId == this.UserId)); } }

#endregion

        /// <summary>
        /// Deletes this UserPassword object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_UserPasswords");
            deleteQuery.Append(" WHERE UserId = @UserId AND PasswordNumber = @PasswordNumber");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                database.AddInParameter(deleteCommand, "@PasswordNumber", System.Data.DbType.Byte, this.PasswordNumber);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this UserPassword object from the database for the given primary key.
        /// </summary>
        /// <param name="userId">Value of UserId of the object to load.</param>
        /// <param name="passwordNumber">Value of PasswordNumber of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 userId, Byte passwordNumber)
        {
            bool result = false;
            this.UserId = userId;
            this.PasswordNumber = passwordNumber;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_UserPasswords");
            selectQuery.Append(" WHERE UserId = @userId AND PasswordNumber = @passwordNumber");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            database.AddInParameter(selectCommand, "@passwordNumber", System.Data.DbType.Byte, passwordNumber);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this UserPassword object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET DEFAULT FOR DATE FIELD
                if (this.CreateDate == System.DateTime.MinValue) this.CreateDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_UserPasswords");
                    selectQuery.Append(" WHERE UserId = @UserId AND PasswordNumber = @PasswordNumber");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        database.AddInParameter(selectCommand, "@PasswordNumber", System.Data.DbType.Byte, this.PasswordNumber);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_UserPasswords SET ");
                    updateQuery.Append("Password = @Password");
                    updateQuery.Append(", PasswordFormat = @PasswordFormat");
                    updateQuery.Append(", CreateDate = @CreateDate");
                    updateQuery.Append(", ForceExpiration = @ForceExpiration");
                    updateQuery.Append(" WHERE UserId = @UserId AND PasswordNumber = @PasswordNumber");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        database.AddInParameter(updateCommand, "@PasswordNumber", System.Data.DbType.Byte, this.PasswordNumber);
                        database.AddInParameter(updateCommand, "@Password", System.Data.DbType.String, this.Password);
                        database.AddInParameter(updateCommand, "@PasswordFormat", System.Data.DbType.String, NullableData.DbNullify(this.PasswordFormat));
                        database.AddInParameter(updateCommand, "@CreateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreateDate));
                        database.AddInParameter(updateCommand, "@ForceExpiration", System.Data.DbType.Boolean, this.ForceExpiration);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_UserPasswords (UserId, PasswordNumber, Password, PasswordFormat, CreateDate, ForceExpiration)");
                    insertQuery.Append(" VALUES (@UserId, @PasswordNumber, @Password, @PasswordFormat, @CreateDate, @ForceExpiration)");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        database.AddInParameter(insertCommand, "@PasswordNumber", System.Data.DbType.Byte, this.PasswordNumber);
                        database.AddInParameter(insertCommand, "@Password", System.Data.DbType.String, this.Password);
                        database.AddInParameter(insertCommand, "@PasswordFormat", System.Data.DbType.String, NullableData.DbNullify(this.PasswordFormat));
                        database.AddInParameter(insertCommand, "@CreateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreateDate));
                        database.AddInParameter(insertCommand, "@ForceExpiration", System.Data.DbType.Boolean, this.ForceExpiration);
                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
