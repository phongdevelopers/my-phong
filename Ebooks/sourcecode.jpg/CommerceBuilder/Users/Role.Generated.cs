//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Users
{
    /// <summary>
    /// This class represents a Role object in the database.
    /// </summary>
    public partial class Role : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Role() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="roleId">Value of RoleId.</param>
        /// </summary>
        public Role(Int32 roleId)
        {
            this.RoleId = roleId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "RoleId");
          columnNames.Add(prefix + "Name");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Role object from the given database data reader.
        /// </summary>
        /// <param name="role">The Role object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Role role, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            role.RoleId = dr.GetInt32(0);
            role.Name = dr.GetString(1);
            role.IsDirty = false;
        }

#endregion

        private Int32 _RoleId;
        private String _Name = string.Empty;
        private String _LoweredName = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// RoleId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 RoleId
        {
            get { return this._RoleId; }
            set
            {
                if (this._RoleId != value)
                {
                    this._RoleId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                    this._LoweredName = value.ToLowerInvariant();
                }
            }
        }

        /// <summary>
        /// LoweredName
        /// </summary>
        public String LoweredName
        {
            get { return this._LoweredName; }
        }

        /// <summary>
        /// Indicates whether this Role object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.GroupRolesLoaded && this.GroupRoles.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Role are properly associated with this Role object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.GroupRolesLoaded) { foreach (GroupRole groupRole in this.GroupRoles) { groupRole.RoleId = this.RoleId; } }
        }

#region Associations
        private GroupRoleCollection _GroupRoles;

        /// <summary>
        /// A collection of GroupRole objects associated with this Role object.
        /// </summary>
        public GroupRoleCollection GroupRoles
        {
            get
            {
                if (!this.GroupRolesLoaded)
                {
                    this._GroupRoles = GroupRoleDataSource.LoadForRole(this.RoleId);
                }
                return this._GroupRoles;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool GroupRolesLoaded { get { return (this._GroupRoles != null); } }
#endregion

        /// <summary>
        /// Deletes this Role object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Roles");
            deleteQuery.Append(" WHERE RoleId = @RoleId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@RoleId", System.Data.DbType.Int32, this.RoleId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Role object from the database for the given primary key.
        /// </summary>
        /// <param name="roleId">Value of RoleId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 roleId)
        {
            bool result = false;
            this.RoleId = roleId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Roles");
            selectQuery.Append(" WHERE RoleId = @roleId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@roleId", System.Data.DbType.Int32, roleId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Role object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.RoleId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Roles");
                    selectQuery.Append(" WHERE RoleId = @RoleId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@RoleId", System.Data.DbType.Int32, this.RoleId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Roles SET ");
                    updateQuery.Append("Name = @Name");
                    updateQuery.Append(", LoweredName = @LoweredName");
                    updateQuery.Append(" WHERE RoleId = @RoleId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@RoleId", System.Data.DbType.Int32, this.RoleId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@LoweredName", System.Data.DbType.String, this.LoweredName);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Roles (Name, LoweredName)");
                    insertQuery.Append(" VALUES (@Name, @LoweredName)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@RoleId", System.Data.DbType.Int32, this.RoleId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@LoweredName", System.Data.DbType.String, this.LoweredName);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._RoleId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Role object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.GroupRolesLoaded) this.GroupRoles.Save();
        }

     }
}
