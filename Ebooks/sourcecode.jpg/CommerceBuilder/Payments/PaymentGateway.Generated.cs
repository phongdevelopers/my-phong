//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Payments;
using CommerceBuilder.Stores;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Payments
{
    /// <summary>
    /// This class represents a PaymentGateway object in the database.
    /// </summary>
    public partial class PaymentGateway : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public PaymentGateway() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="paymentGatewayId">Value of PaymentGatewayId.</param>
        /// </summary>
        public PaymentGateway(Int32 paymentGatewayId)
        {
            this.PaymentGatewayId = paymentGatewayId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "PaymentGatewayId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "ClassId");
          columnNames.Add(prefix + "ConfigData");
          columnNames.Add(prefix + "ReCrypt");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given PaymentGateway object from the given database data reader.
        /// </summary>
        /// <param name="paymentGateway">The PaymentGateway object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(PaymentGateway paymentGateway, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            paymentGateway.PaymentGatewayId = dr.GetInt32(0);
            paymentGateway.StoreId = dr.GetInt32(1);
            paymentGateway.Name = dr.GetString(2);
            paymentGateway.ClassId = dr.GetString(3);
            paymentGateway.ConfigData = NullableData.GetString(dr, 4);
            paymentGateway.ReCrypt = dr.GetBoolean(5);
            paymentGateway.IsDirty = false;
        }

#endregion

        private Int32 _PaymentGatewayId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _ClassId = string.Empty;
        private String _ConfigData = string.Empty;
        private Boolean _ReCrypt;
        private bool _IsDirty;

        /// <summary>
        /// PaymentGatewayId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 PaymentGatewayId
        {
            get { return this._PaymentGatewayId; }
            set
            {
                if (this._PaymentGatewayId != value)
                {
                    this._PaymentGatewayId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ClassId
        /// </summary>
        public String ClassId
        {
            get { return this._ClassId; }
            set
            {
                if (this._ClassId != value)
                {
                    this._ClassId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ConfigData
        /// </summary>
        public String ConfigData
        {
            get { return this._ConfigData; }
            set
            {
                if (this._ConfigData != value)
                {
                    this._ConfigData = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReCrypt
        /// </summary>
        public Boolean ReCrypt
        {
            get { return this._ReCrypt; }
            set
            {
                if (this._ReCrypt != value)
                {
                    this._ReCrypt = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this PaymentGateway object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.PaymentMethodsLoaded && this.PaymentMethods.IsDirty) return true;
                if (this.TransactionsLoaded && this.Transactions.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this PaymentGateway are properly associated with this PaymentGateway object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.PaymentMethodsLoaded) { foreach (PaymentMethod paymentMethod in this.PaymentMethods) { paymentMethod.PaymentGatewayId = this.PaymentGatewayId; } }
            if (this.TransactionsLoaded) { foreach (Transaction transaction in this.Transactions) { transaction.PaymentGatewayId = this.PaymentGatewayId; } }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this PaymentGateway object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private PaymentMethodCollection _PaymentMethods;
        private TransactionCollection _Transactions;

        /// <summary>
        /// A collection of PaymentMethod objects associated with this PaymentGateway object.
        /// </summary>
        public PaymentMethodCollection PaymentMethods
        {
            get
            {
                if (!this.PaymentMethodsLoaded)
                {
                    this._PaymentMethods = PaymentMethodDataSource.LoadForPaymentGateway(this.PaymentGatewayId);
                }
                return this._PaymentMethods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentMethodsLoaded { get { return (this._PaymentMethods != null); } }

        /// <summary>
        /// A collection of Transaction objects associated with this PaymentGateway object.
        /// </summary>
        public TransactionCollection Transactions
        {
            get
            {
                if (!this.TransactionsLoaded)
                {
                    this._Transactions = TransactionDataSource.LoadForPaymentGateway(this.PaymentGatewayId);
                }
                return this._Transactions;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TransactionsLoaded { get { return (this._Transactions != null); } }

#endregion

        /// <summary>
        /// Deletes this PaymentGateway object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_PaymentGateways");
            deleteQuery.Append(" WHERE PaymentGatewayId = @PaymentGatewayId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@PaymentGatewayId", System.Data.DbType.Int32, this.PaymentGatewayId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this PaymentGateway object from the database for the given primary key.
        /// </summary>
        /// <param name="paymentGatewayId">Value of PaymentGatewayId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 paymentGatewayId)
        {
            bool result = false;
            this.PaymentGatewayId = paymentGatewayId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_PaymentGateways");
            selectQuery.Append(" WHERE PaymentGatewayId = @paymentGatewayId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@paymentGatewayId", System.Data.DbType.Int32, paymentGatewayId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this PaymentGateway object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.PaymentGatewayId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_PaymentGateways");
                    selectQuery.Append(" WHERE PaymentGatewayId = @PaymentGatewayId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@PaymentGatewayId", System.Data.DbType.Int32, this.PaymentGatewayId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_PaymentGateways SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", ClassId = @ClassId");
                    updateQuery.Append(", ConfigData = @ConfigData");
                    updateQuery.Append(", ReCrypt = @ReCrypt");
                    updateQuery.Append(" WHERE PaymentGatewayId = @PaymentGatewayId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@PaymentGatewayId", System.Data.DbType.Int32, this.PaymentGatewayId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@ClassId", System.Data.DbType.String, this.ClassId);
                        database.AddInParameter(updateCommand, "@ConfigData", System.Data.DbType.String, NullableData.DbNullify(this.ConfigData));
                        database.AddInParameter(updateCommand, "@ReCrypt", System.Data.DbType.Boolean, this.ReCrypt);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_PaymentGateways (StoreId, Name, ClassId, ConfigData, ReCrypt)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @ClassId, @ConfigData, @ReCrypt)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@PaymentGatewayId", System.Data.DbType.Int32, this.PaymentGatewayId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@ClassId", System.Data.DbType.String, this.ClassId);
                        database.AddInParameter(insertCommand, "@ConfigData", System.Data.DbType.String, NullableData.DbNullify(this.ConfigData));
                        database.AddInParameter(insertCommand, "@ReCrypt", System.Data.DbType.Boolean, this.ReCrypt);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._PaymentGatewayId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this PaymentGateway object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.PaymentMethodsLoaded) this.PaymentMethods.Save();
            if (this.TransactionsLoaded) this.Transactions.Save();
        }

     }
}
