//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Products;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a ProductCustomField object in the database.
    /// </summary>
    public partial class ProductCustomField : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ProductCustomField() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="productFieldId">Value of ProductFieldId.</param>
        /// </summary>
        public ProductCustomField(Int32 productFieldId)
        {
            this.ProductFieldId = productFieldId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ProductFieldId");
          columnNames.Add(prefix + "ProductId");
          columnNames.Add(prefix + "IsUserDefined");
          columnNames.Add(prefix + "IsVisible");
          columnNames.Add(prefix + "FieldName");
          columnNames.Add(prefix + "FieldValue");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given ProductCustomField object from the given database data reader.
        /// </summary>
        /// <param name="productCustomField">The ProductCustomField object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(ProductCustomField productCustomField, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            productCustomField.ProductFieldId = dr.GetInt32(0);
            productCustomField.ProductId = dr.GetInt32(1);
            productCustomField.IsUserDefined = dr.GetBoolean(2);
            productCustomField.IsVisible = dr.GetBoolean(3);
            productCustomField.FieldName = dr.GetString(4);
            productCustomField.FieldValue = NullableData.GetString(dr, 5);
            productCustomField.IsDirty = false;
        }

#endregion

        private Int32 _ProductFieldId;
        private Int32 _ProductId;
        private Boolean _IsUserDefined;
        private Boolean _IsVisible;
        private String _FieldName = string.Empty;
        private String _FieldValue = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// ProductFieldId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 ProductFieldId
        {
            get { return this._ProductFieldId; }
            set
            {
                if (this._ProductFieldId != value)
                {
                    this._ProductFieldId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ProductId
        /// </summary>
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this._Product = null;
                }
            }
        }

        /// <summary>
        /// IsUserDefined
        /// </summary>
        public Boolean IsUserDefined
        {
            get { return this._IsUserDefined; }
            set
            {
                if (this._IsUserDefined != value)
                {
                    this._IsUserDefined = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsVisible
        /// </summary>
        public Boolean IsVisible
        {
            get { return this._IsVisible; }
            set
            {
                if (this._IsVisible != value)
                {
                    this._IsVisible = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FieldName
        /// </summary>
        public String FieldName
        {
            get { return this._FieldName; }
            set
            {
                if (this._FieldName != value)
                {
                    this._FieldName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FieldValue
        /// </summary>
        public String FieldValue
        {
            get { return this._FieldValue; }
            set
            {
                if (this._FieldValue != value)
                {
                    this._FieldValue = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this ProductCustomField object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Product _Product;

        /// <summary>
        /// The Product object that this ProductCustomField object is associated with
        /// </summary>
        public Product Product
        {
            get
            {
                if (!this.ProductLoaded)
                {
                    this._Product = ProductDataSource.Load(this.ProductId);
                }
                return this._Product;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductLoaded { get { return ((this._Product != null) && (this._Product.ProductId == this.ProductId)); } }

#endregion

        /// <summary>
        /// Deletes this ProductCustomField object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_ProductCustomFields");
            deleteQuery.Append(" WHERE ProductFieldId = @ProductFieldId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ProductFieldId", System.Data.DbType.Int32, this.ProductFieldId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this ProductCustomField object from the database for the given primary key.
        /// </summary>
        /// <param name="productFieldId">Value of ProductFieldId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 productFieldId)
        {
            bool result = false;
            this.ProductFieldId = productFieldId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ProductCustomFields");
            selectQuery.Append(" WHERE ProductFieldId = @productFieldId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productFieldId", System.Data.DbType.Int32, productFieldId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this ProductCustomField object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.ProductFieldId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_ProductCustomFields");
                    selectQuery.Append(" WHERE ProductFieldId = @ProductFieldId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ProductFieldId", System.Data.DbType.Int32, this.ProductFieldId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_ProductCustomFields SET ");
                    updateQuery.Append("ProductId = @ProductId");
                    updateQuery.Append(", IsUserDefined = @IsUserDefined");
                    updateQuery.Append(", IsVisible = @IsVisible");
                    updateQuery.Append(", FieldName = @FieldName");
                    updateQuery.Append(", FieldValue = @FieldValue");
                    updateQuery.Append(" WHERE ProductFieldId = @ProductFieldId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@ProductFieldId", System.Data.DbType.Int32, this.ProductFieldId);
                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(updateCommand, "@IsUserDefined", System.Data.DbType.Boolean, this.IsUserDefined);
                        database.AddInParameter(updateCommand, "@IsVisible", System.Data.DbType.Boolean, this.IsVisible);
                        database.AddInParameter(updateCommand, "@FieldName", System.Data.DbType.String, this.FieldName);
                        database.AddInParameter(updateCommand, "@FieldValue", System.Data.DbType.String, NullableData.DbNullify(this.FieldValue));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_ProductCustomFields (ProductId, IsUserDefined, IsVisible, FieldName, FieldValue)");
                    insertQuery.Append(" VALUES (@ProductId, @IsUserDefined, @IsVisible, @FieldName, @FieldValue)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ProductFieldId", System.Data.DbType.Int32, this.ProductFieldId);
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@IsUserDefined", System.Data.DbType.Boolean, this.IsUserDefined);
                        database.AddInParameter(insertCommand, "@IsVisible", System.Data.DbType.Boolean, this.IsVisible);
                        database.AddInParameter(insertCommand, "@FieldName", System.Data.DbType.String, this.FieldName);
                        database.AddInParameter(insertCommand, "@FieldValue", System.Data.DbType.String, NullableData.DbNullify(this.FieldValue));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._ProductFieldId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
