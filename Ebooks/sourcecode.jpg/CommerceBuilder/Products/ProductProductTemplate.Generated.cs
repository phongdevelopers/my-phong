//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Products;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a ProductProductTemplate object in the database.
    /// </summary>
    public partial class ProductProductTemplate : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ProductProductTemplate() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="productId">Value of ProductId.</param>
        /// <param name="productTemplateId">Value of ProductTemplateId.</param>
        /// </summary>
        public ProductProductTemplate(Int32 productId, Int32 productTemplateId)
        {
            this.ProductId = productId;
            this.ProductTemplateId = productTemplateId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ProductId");
          columnNames.Add(prefix + "ProductTemplateId");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given ProductProductTemplate object from the given database data reader.
        /// </summary>
        /// <param name="productProductTemplate">The ProductProductTemplate object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(ProductProductTemplate productProductTemplate, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            productProductTemplate.ProductId = dr.GetInt32(0);
            productProductTemplate.ProductTemplateId = dr.GetInt32(1);
            productProductTemplate.IsDirty = false;
        }

#endregion

        private Int32 _ProductId;
        private Int32 _ProductTemplateId;
        private bool _IsDirty;

        /// <summary>
        /// ProductId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this._Product = null;
                }
            }
        }

        /// <summary>
        /// ProductTemplateId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 ProductTemplateId
        {
            get { return this._ProductTemplateId; }
            set
            {
                if (this._ProductTemplateId != value)
                {
                    this._ProductTemplateId = value;
                    this.IsDirty = true;
                    this._ProductTemplate = null;
                }
            }
        }

        /// <summary>
        /// Indicates whether this ProductProductTemplate object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Product _Product;
        private ProductTemplate _ProductTemplate;

        /// <summary>
        /// The Product object that this ProductProductTemplate object is associated with
        /// </summary>
        public Product Product
        {
            get
            {
                if (!this.ProductLoaded)
                {
                    this._Product = ProductDataSource.Load(this.ProductId);
                }
                return this._Product;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductLoaded { get { return ((this._Product != null) && (this._Product.ProductId == this.ProductId)); } }

        /// <summary>
        /// The ProductTemplate object that this ProductProductTemplate object is associated with
        /// </summary>
        public ProductTemplate ProductTemplate
        {
            get
            {
                if (!this.ProductTemplateLoaded)
                {
                    this._ProductTemplate = ProductTemplateDataSource.Load(this.ProductTemplateId);
                }
                return this._ProductTemplate;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductTemplateLoaded { get { return ((this._ProductTemplate != null) && (this._ProductTemplate.ProductTemplateId == this.ProductTemplateId)); } }

#endregion

        /// <summary>
        /// Deletes this ProductProductTemplate object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_ProductProductTemplates");
            deleteQuery.Append(" WHERE ProductId = @ProductId AND ProductTemplateId = @ProductTemplateId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                database.AddInParameter(deleteCommand, "@ProductTemplateId", System.Data.DbType.Int32, this.ProductTemplateId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }

        /// <summary>
        /// Load this ProductProductTemplate object from the database for the given primary key.
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to load.</param>
        /// <param name="productTemplateId">Value of ProductTemplateId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 productId, Int32 productTemplateId)
        {
            this.ProductId = productId;
            this.ProductTemplateId = productTemplateId;
            this.IsDirty = false;
            return true;
        }

        /// <summary>
        /// Saves this ProductProductTemplate object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //generate key(s) if needed
                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_ProductProductTemplates");
                    selectQuery.Append(" WHERE ProductId = @ProductId AND ProductTemplateId = @ProductTemplateId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(selectCommand, "@ProductTemplateId", System.Data.DbType.Int32, this.ProductTemplateId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                if (recordExists)
                {
                    //RECORD ALREADY EXISTS IN DATABASE
                    this.IsDirty = false;
                    return SaveResult.RecordUpdated;
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_ProductProductTemplates (ProductId, ProductTemplateId)");
                    insertQuery.Append(" VALUES (@ProductId, @ProductTemplateId)");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@ProductTemplateId", System.Data.DbType.Int32, this.ProductTemplateId);
                        int recordsAffected = database.ExecuteNonQuery(insertCommand);
                        //OBJECT IS NOT DIRTY IF RECORD WAS INSERTED
                        this.IsDirty = (recordsAffected == 0);
                        if (this.IsDirty) { return SaveResult.Failed; }
                        return SaveResult.RecordInserted;
                    }
                }

            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
