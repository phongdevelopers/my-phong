//Generated by DataSourceBaseGenerator_AssnWithColumns

using System;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
namespace CommerceBuilder.Products
{

    /// <summary>
    /// DataSource class for ProductKitComponent objects
    /// </summary>
    public partial class ProductKitComponentDataSource
    {
        /// <summary>
        /// Deletes a ProductKitComponent object from the database
        /// </summary>
        /// <param name="productKitComponent">The ProductKitComponent object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(ProductKitComponent productKitComponent)
        {
            return productKitComponent.Delete();
        }

        /// <summary>
        /// Deletes a ProductKitComponent object with given id from the database
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to delete.</param>
        /// <param name="kitComponentId">Value of KitComponentId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 productId, Int32 kitComponentId)
        {
            ProductKitComponent productKitComponent = new ProductKitComponent();
            if (productKitComponent.Load(productId, kitComponentId)) return productKitComponent.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a ProductKitComponent object to the database.
        /// </summary>
        /// <param name="productKitComponent">The ProductKitComponent object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(ProductKitComponent productKitComponent) { return productKitComponent.Save(); }

        /// <summary>
        /// Load a ProductKitComponent object for the given primary key from the database.
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to load.</param>
        /// <param name="kitComponentId">Value of KitComponentId of the object to load.</param>
        /// <returns>The loaded ProductKitComponent object.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductKitComponent Load(Int32 productId, Int32 kitComponentId)
        {
            ProductKitComponent productKitComponent = null;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + ProductKitComponent.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ProductKitComponents");
            selectQuery.Append(" WHERE ProductId = @productId AND KitComponentId = @kitComponentId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, productId);
            database.AddInParameter(selectCommand, "@kitComponentId", System.Data.DbType.Int32, kitComponentId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    productKitComponent = new ProductKitComponent();
                    ProductKitComponent.LoadDataReader(productKitComponent, dr);
                }
                dr.Close();
            }
            return productKitComponent;
        }

        /// <summary>
        /// Loads a collection of ProductKitComponent objects for the given criteria for KitComponent from the database.
        /// </summary>
        /// <param name="kitComponentId">Value of KitComponentId of the object to load.</param>
        /// <returns>A collection of ProductKitComponent objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductKitComponentCollection LoadForKitComponent(Int32 kitComponentId)
        {
            ProductKitComponentCollection ProductKitComponents = new ProductKitComponentCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT!
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + ProductKitComponent.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ProductKitComponents");
            selectQuery.Append(" WHERE KitComponentId = @kitComponentId");
            selectQuery.Append(" ORDER BY OrderBy");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@kitComponentId", System.Data.DbType.Int32, kitComponentId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    ProductKitComponent productKitComponent = new ProductKitComponent();
                    ProductKitComponent.LoadDataReader(productKitComponent, dr);
                    ProductKitComponents.Add(productKitComponent);
                }
                dr.Close();
            }
            return ProductKitComponents;
        }

        /// <summary>
        /// Loads a collection of ProductKitComponent objects for the given criteria for Product from the database.
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to load.</param>
        /// <returns>A collection of ProductKitComponent objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductKitComponentCollection LoadForProduct(Int32 productId)
        {
            ProductKitComponentCollection ProductKitComponents = new ProductKitComponentCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT!
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + ProductKitComponent.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ProductKitComponents");
            selectQuery.Append(" WHERE ProductId = @productId");
            selectQuery.Append(" ORDER BY OrderBy");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, productId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    ProductKitComponent productKitComponent = new ProductKitComponent();
                    ProductKitComponent.LoadDataReader(productKitComponent, dr);
                    ProductKitComponents.Add(productKitComponent);
                }
                dr.Close();
            }
            return ProductKitComponents;
        }

        /// <summary>
        /// Updates/Saves the given ProductKitComponent object to the database.
        /// </summary>
        /// <param name="productKitComponent">The ProductKitComponent object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(ProductKitComponent productKitComponent) { return productKitComponent.Save(); }

        /// <summary>
        /// Gets the next value of the OrderBy field for ProductKitComponent objects.
        /// </summary>
        /// <param name="productId">The ProductId for which to get the next OrderBy value</param>
        /// <returns>The next value of the OrderBy field for ProductKitComponent objects</returns>
        public static short GetNextOrderBy(Int32 productId)
        {
            Database database = Token.Instance.Database;
            using (DbCommand selectCommand = database.GetSqlStringCommand("SELECT (Max(OrderBy) + 1) AS NextOrderBy FROM ac_ProductKitComponents WHERE ProductId = @productId"))
            {
                database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, productId);
                object result = database.ExecuteScalar(selectCommand);
                if (result.Equals(DBNull.Value)) return 1;
                return (short)(int)result;
            }
        }

    }
}
