//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// DataSource class for Product objects
    /// </summary>
    public partial class ProductDataSource
    {
        /// <summary>
        /// Deletes a Product object from the database
        /// </summary>
        /// <param name="product">The Product object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(Product product)
        {
            return product.Delete();
        }

        /// <summary>
        /// Deletes a Product object with given id from the database
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 productId)
        {
            Product product = new Product();
            if (product.Load(productId)) return product.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a Product object to the database.
        /// </summary>
        /// <param name="product">The Product object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(Product product) { return product.Save(); }

        /// <summary>
        /// Loads a Product object for given Id from the database.
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded Product object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Product Load(Int32 productId)
        {
            return ProductDataSource.Load(productId, true);
        }

        /// <summary>
        /// Loads a Product object for given Id from the database.
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded Product object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Product Load(Int32 productId, bool useCache)
        {
            if (productId == 0) return null;
            Product product = null;
            string key = "Product_" + productId.ToString();
            if (useCache)
            {
                product = ContextCache.GetObject(key) as Product;
                if (product != null) return product;
            }
            product = new Product();
            if (product.Load(productId))
            {
                if (useCache) ContextCache.SetObject(key, product);
                return product;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of Product objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the Product objects that should be loaded.</param>
        /// <returns>The number of Product objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Products" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Product objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Product objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>The number of Product objects associated with with the given CouponId</returns>
        public static int CountForCoupon(Int32 couponId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_CouponProducts WHERE CouponId = @couponId");
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Product objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>A collection of Product objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForCoupon(Int32 couponId)
        {
            return ProductDataSource.LoadForCoupon(couponId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForCoupon(Int32 couponId, string sortExpression)
        {
            return ProductDataSource.LoadForCoupon(couponId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Product objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex)
        {
            return ProductDataSource.LoadForCoupon(couponId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames("ac_Products"));
            selectQuery.Append(" FROM ac_Products, ac_CouponProducts");
            selectQuery.Append(" WHERE ac_Products.ProductId = ac_CouponProducts.ProductId");
            selectQuery.Append(" AND ac_CouponProducts.CouponId = @couponId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects associated with the given KitComponentId
        /// </summary>
        /// <param name="kitComponentId">The given KitComponentId</param>
        /// <returns>The number of Product objects associated with with the given KitComponentId</returns>
        public static int CountForKitComponent(Int32 kitComponentId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ProductKitComponents WHERE KitComponentId = @kitComponentId");
            database.AddInParameter(selectCommand, "@kitComponentId", System.Data.DbType.Int32, kitComponentId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Product objects associated with the given KitComponentId
        /// </summary>
        /// <param name="kitComponentId">The given KitComponentId</param>
        /// <returns>A collection of Product objects associated with with the given KitComponentId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForKitComponent(Int32 kitComponentId)
        {
            return ProductDataSource.LoadForKitComponent(kitComponentId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given KitComponentId
        /// </summary>
        /// <param name="kitComponentId">The given KitComponentId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given KitComponentId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForKitComponent(Int32 kitComponentId, string sortExpression)
        {
            return ProductDataSource.LoadForKitComponent(kitComponentId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Product objects associated with the given KitComponentId
        /// </summary>
        /// <param name="kitComponentId">The given KitComponentId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects associated with with the given KitComponentId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForKitComponent(Int32 kitComponentId, int maximumRows, int startRowIndex)
        {
            return ProductDataSource.LoadForKitComponent(kitComponentId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given KitComponentId
        /// </summary>
        /// <param name="kitComponentId">The given KitComponentId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given KitComponentId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForKitComponent(Int32 kitComponentId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames("ac_Products"));
            selectQuery.Append(" FROM ac_Products, ac_ProductKitComponents");
            selectQuery.Append(" WHERE ac_Products.ProductId = ac_ProductKitComponents.ProductId");
            selectQuery.Append(" AND ac_ProductKitComponents.KitComponentId = @kitComponentId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@kitComponentId", System.Data.DbType.Int32, kitComponentId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects associated with the given OptionId
        /// </summary>
        /// <param name="optionId">The given OptionId</param>
        /// <returns>The number of Product objects associated with with the given OptionId</returns>
        public static int CountForOption(Int32 optionId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ProductOptions WHERE OptionId = @optionId");
            database.AddInParameter(selectCommand, "@optionId", System.Data.DbType.Int32, optionId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Product objects associated with the given OptionId
        /// </summary>
        /// <param name="optionId">The given OptionId</param>
        /// <returns>A collection of Product objects associated with with the given OptionId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForOption(Int32 optionId)
        {
            return ProductDataSource.LoadForOption(optionId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given OptionId
        /// </summary>
        /// <param name="optionId">The given OptionId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given OptionId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForOption(Int32 optionId, string sortExpression)
        {
            return ProductDataSource.LoadForOption(optionId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Product objects associated with the given OptionId
        /// </summary>
        /// <param name="optionId">The given OptionId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects associated with with the given OptionId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForOption(Int32 optionId, int maximumRows, int startRowIndex)
        {
            return ProductDataSource.LoadForOption(optionId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given OptionId
        /// </summary>
        /// <param name="optionId">The given OptionId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given OptionId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForOption(Int32 optionId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames("ac_Products"));
            selectQuery.Append(" FROM ac_Products, ac_ProductOptions");
            selectQuery.Append(" WHERE ac_Products.ProductId = ac_ProductOptions.ProductId");
            selectQuery.Append(" AND ac_ProductOptions.OptionId = @optionId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@optionId", System.Data.DbType.Int32, optionId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects associated with the given ProductTemplateId
        /// </summary>
        /// <param name="productTemplateId">The given ProductTemplateId</param>
        /// <returns>The number of Product objects associated with with the given ProductTemplateId</returns>
        public static int CountForProductTemplate(Int32 productTemplateId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ProductProductTemplates WHERE ProductTemplateId = @productTemplateId");
            database.AddInParameter(selectCommand, "@productTemplateId", System.Data.DbType.Int32, productTemplateId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Product objects associated with the given ProductTemplateId
        /// </summary>
        /// <param name="productTemplateId">The given ProductTemplateId</param>
        /// <returns>A collection of Product objects associated with with the given ProductTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForProductTemplate(Int32 productTemplateId)
        {
            return ProductDataSource.LoadForProductTemplate(productTemplateId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given ProductTemplateId
        /// </summary>
        /// <param name="productTemplateId">The given ProductTemplateId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given ProductTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForProductTemplate(Int32 productTemplateId, string sortExpression)
        {
            return ProductDataSource.LoadForProductTemplate(productTemplateId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Product objects associated with the given ProductTemplateId
        /// </summary>
        /// <param name="productTemplateId">The given ProductTemplateId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects associated with with the given ProductTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForProductTemplate(Int32 productTemplateId, int maximumRows, int startRowIndex)
        {
            return ProductDataSource.LoadForProductTemplate(productTemplateId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given ProductTemplateId
        /// </summary>
        /// <param name="productTemplateId">The given ProductTemplateId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given ProductTemplateId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForProductTemplate(Int32 productTemplateId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames("ac_Products"));
            selectQuery.Append(" FROM ac_Products, ac_ProductProductTemplates");
            selectQuery.Append(" WHERE ac_Products.ProductId = ac_ProductProductTemplates.ProductId");
            selectQuery.Append(" AND ac_ProductProductTemplates.ProductTemplateId = @productTemplateId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productTemplateId", System.Data.DbType.Int32, productTemplateId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <returns>The number of Product objects associated with with the given VolumeDiscountId</returns>
        public static int CountForVolumeDiscount(Int32 volumeDiscountId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ProductVolumeDiscounts WHERE VolumeDiscountId = @volumeDiscountId");
            database.AddInParameter(selectCommand, "@volumeDiscountId", System.Data.DbType.Int32, volumeDiscountId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Product objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <returns>A collection of Product objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVolumeDiscount(Int32 volumeDiscountId)
        {
            return ProductDataSource.LoadForVolumeDiscount(volumeDiscountId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVolumeDiscount(Int32 volumeDiscountId, string sortExpression)
        {
            return ProductDataSource.LoadForVolumeDiscount(volumeDiscountId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Product objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVolumeDiscount(Int32 volumeDiscountId, int maximumRows, int startRowIndex)
        {
            return ProductDataSource.LoadForVolumeDiscount(volumeDiscountId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Product objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVolumeDiscount(Int32 volumeDiscountId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames("ac_Products"));
            selectQuery.Append(" FROM ac_Products, ac_ProductVolumeDiscounts");
            selectQuery.Append(" WHERE ac_Products.ProductId = ac_ProductVolumeDiscounts.ProductId");
            selectQuery.Append(" AND ac_ProductVolumeDiscounts.VolumeDiscountId = @volumeDiscountId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@volumeDiscountId", System.Data.DbType.Int32, volumeDiscountId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects for the given ManufacturerId in the database.
        /// <param name="manufacturerId">The given ManufacturerId</param>
        /// </summary>
        /// <returns>The Number of Product objects for the given ManufacturerId in the database.</returns>
        public static int CountForManufacturer(Int32 manufacturerId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Products WHERE ManufacturerId = @manufacturerId");
            database.AddInParameter(selectCommand, "@manufacturerId", System.Data.DbType.Int32, NullableData.DbNullify(manufacturerId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Product objects for the given ManufacturerId from the database
        /// </summary>
        /// <param name="manufacturerId">The given ManufacturerId</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForManufacturer(Int32 manufacturerId)
        {
            return LoadForManufacturer(manufacturerId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given ManufacturerId from the database
        /// </summary>
        /// <param name="manufacturerId">The given ManufacturerId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForManufacturer(Int32 manufacturerId, string sortExpression)
        {
            return LoadForManufacturer(manufacturerId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given ManufacturerId from the database
        /// </summary>
        /// <param name="manufacturerId">The given ManufacturerId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForManufacturer(Int32 manufacturerId, int maximumRows, int startRowIndex)
        {
            return LoadForManufacturer(manufacturerId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given ManufacturerId from the database
        /// </summary>
        /// <param name="manufacturerId">The given ManufacturerId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForManufacturer(Int32 manufacturerId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            selectQuery.Append(" WHERE ManufacturerId = @manufacturerId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@manufacturerId", System.Data.DbType.Int32, NullableData.DbNullify(manufacturerId));
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects for the current store.
        /// </summary>
        /// <returns>The Number of Product objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Products WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Product objects for the current store from the database
        /// </summary>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Product objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            selectQuery.Append(" WHERE StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects for the given TaxCodeId in the database.
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// </summary>
        /// <returns>The Number of Product objects for the given TaxCodeId in the database.</returns>
        public static int CountForTaxCode(Int32 taxCodeId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Products WHERE TaxCodeId = @taxCodeId");
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(taxCodeId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Product objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForTaxCode(Int32 taxCodeId)
        {
            return LoadForTaxCode(taxCodeId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForTaxCode(Int32 taxCodeId, string sortExpression)
        {
            return LoadForTaxCode(taxCodeId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex)
        {
            return LoadForTaxCode(taxCodeId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            selectQuery.Append(" WHERE TaxCodeId = @taxCodeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(taxCodeId));
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects for the given VendorId in the database.
        /// <param name="vendorId">The given VendorId</param>
        /// </summary>
        /// <returns>The Number of Product objects for the given VendorId in the database.</returns>
        public static int CountForVendor(Int32 vendorId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Products WHERE VendorId = @vendorId");
            database.AddInParameter(selectCommand, "@vendorId", System.Data.DbType.Int32, NullableData.DbNullify(vendorId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Product objects for the given VendorId from the database
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVendor(Int32 vendorId)
        {
            return LoadForVendor(vendorId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given VendorId from the database
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVendor(Int32 vendorId, string sortExpression)
        {
            return LoadForVendor(vendorId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given VendorId from the database
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVendor(Int32 vendorId, int maximumRows, int startRowIndex)
        {
            return LoadForVendor(vendorId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given VendorId from the database
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForVendor(Int32 vendorId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            selectQuery.Append(" WHERE VendorId = @vendorId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@vendorId", System.Data.DbType.Int32, NullableData.DbNullify(vendorId));
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects for the given WarehouseId in the database.
        /// <param name="warehouseId">The given WarehouseId</param>
        /// </summary>
        /// <returns>The Number of Product objects for the given WarehouseId in the database.</returns>
        public static int CountForWarehouse(Int32 warehouseId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Products WHERE WarehouseId = @warehouseId");
            database.AddInParameter(selectCommand, "@warehouseId", System.Data.DbType.Int32, NullableData.DbNullify(warehouseId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WarehouseId from the database
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWarehouse(Int32 warehouseId)
        {
            return LoadForWarehouse(warehouseId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WarehouseId from the database
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWarehouse(Int32 warehouseId, string sortExpression)
        {
            return LoadForWarehouse(warehouseId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WarehouseId from the database
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWarehouse(Int32 warehouseId, int maximumRows, int startRowIndex)
        {
            return LoadForWarehouse(warehouseId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WarehouseId from the database
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWarehouse(Int32 warehouseId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            selectQuery.Append(" WHERE WarehouseId = @warehouseId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@warehouseId", System.Data.DbType.Int32, NullableData.DbNullify(warehouseId));
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Product objects for the given WrapGroupId in the database.
        /// <param name="wrapGroupId">The given WrapGroupId</param>
        /// </summary>
        /// <returns>The Number of Product objects for the given WrapGroupId in the database.</returns>
        public static int CountForWrapGroup(Int32 wrapGroupId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Products WHERE WrapGroupId = @wrapGroupId");
            database.AddInParameter(selectCommand, "@wrapGroupId", System.Data.DbType.Int32, NullableData.DbNullify(wrapGroupId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WrapGroupId from the database
        /// </summary>
        /// <param name="wrapGroupId">The given WrapGroupId</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWrapGroup(Int32 wrapGroupId)
        {
            return LoadForWrapGroup(wrapGroupId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WrapGroupId from the database
        /// </summary>
        /// <param name="wrapGroupId">The given WrapGroupId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWrapGroup(Int32 wrapGroupId, string sortExpression)
        {
            return LoadForWrapGroup(wrapGroupId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WrapGroupId from the database
        /// </summary>
        /// <param name="wrapGroupId">The given WrapGroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWrapGroup(Int32 wrapGroupId, int maximumRows, int startRowIndex)
        {
            return LoadForWrapGroup(wrapGroupId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Product objects for the given WrapGroupId from the database
        /// </summary>
        /// <param name="wrapGroupId">The given WrapGroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Product objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ProductCollection LoadForWrapGroup(Int32 wrapGroupId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Product.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            selectQuery.Append(" WHERE WrapGroupId = @wrapGroupId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@wrapGroupId", System.Data.DbType.Int32, NullableData.DbNullify(wrapGroupId));
            //EXECUTE THE COMMAND
            ProductCollection results = new ProductCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Product product = new Product();
                        Product.LoadDataReader(product, dr);
                        results.Add(product);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given Product object to the database.
        /// </summary>
        /// <param name="product">The Product object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(Product product) { return product.Save(); }

    }
}
