//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Products;
using CommerceBuilder.Taxes;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a WrapStyle object in the database.
    /// </summary>
    public partial class WrapStyle : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public WrapStyle() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="wrapStyleId">Value of WrapStyleId.</param>
        /// </summary>
        public WrapStyle(Int32 wrapStyleId)
        {
            this.WrapStyleId = wrapStyleId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "WrapStyleId");
          columnNames.Add(prefix + "WrapGroupId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "TaxCodeId");
          columnNames.Add(prefix + "Price");
          columnNames.Add(prefix + "ThumbnailUrl");
          columnNames.Add(prefix + "ImageUrl");
          columnNames.Add(prefix + "OrderBy");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given WrapStyle object from the given database data reader.
        /// </summary>
        /// <param name="wrapStyle">The WrapStyle object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(WrapStyle wrapStyle, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            wrapStyle.WrapStyleId = dr.GetInt32(0);
            wrapStyle.WrapGroupId = dr.GetInt32(1);
            wrapStyle.Name = dr.GetString(2);
            wrapStyle.TaxCodeId = NullableData.GetInt32(dr, 3);
            wrapStyle.Price = dr.GetDecimal(4);
            wrapStyle.ThumbnailUrl = NullableData.GetString(dr, 5);
            wrapStyle.ImageUrl = NullableData.GetString(dr, 6);
            wrapStyle.OrderBy = dr.GetInt16(7);
            wrapStyle.IsDirty = false;
        }

#endregion

        private Int32 _WrapStyleId;
        private Int32 _WrapGroupId;
        private String _Name = string.Empty;
        private Int32 _TaxCodeId;
        private LSDecimal _Price;
        private String _ThumbnailUrl = string.Empty;
        private String _ImageUrl = string.Empty;
        private Int16 _OrderBy = -1;
        private bool _IsDirty;

        /// <summary>
        /// WrapStyleId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 WrapStyleId
        {
            get { return this._WrapStyleId; }
            set
            {
                if (this._WrapStyleId != value)
                {
                    this._WrapStyleId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// WrapGroupId
        /// </summary>
        public Int32 WrapGroupId
        {
            get { return this._WrapGroupId; }
            set
            {
                if (this._WrapGroupId != value)
                {
                    this._WrapGroupId = value;
                    this.IsDirty = true;
                    this._WrapGroup = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxCodeId
        /// </summary>
        public Int32 TaxCodeId
        {
            get { return this._TaxCodeId; }
            set
            {
                if (this._TaxCodeId != value)
                {
                    this._TaxCodeId = value;
                    this.IsDirty = true;
                    this._TaxCode = null;
                }
            }
        }

        /// <summary>
        /// Price
        /// </summary>
        public LSDecimal Price
        {
            get { return this._Price; }
            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailUrl
        /// </summary>
        public String ThumbnailUrl
        {
            get { return this._ThumbnailUrl; }
            set
            {
                if (this._ThumbnailUrl != value)
                {
                    this._ThumbnailUrl = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ImageUrl
        /// </summary>
        public String ImageUrl
        {
            get { return this._ImageUrl; }
            set
            {
                if (this._ImageUrl != value)
                {
                    this._ImageUrl = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderBy
        /// </summary>
        public Int16 OrderBy
        {
            get { return this._OrderBy; }
            set
            {
                if (this._OrderBy != value)
                {
                    this._OrderBy = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this WrapStyle object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.BasketItemsLoaded && this.BasketItems.IsDirty) return true;
                if (this.OrderItemsLoaded && this.OrderItems.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this WrapStyle are properly associated with this WrapStyle object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.BasketItemsLoaded) { foreach (BasketItem basketItem in this.BasketItems) { basketItem.WrapStyleId = this.WrapStyleId; } }
            if (this.OrderItemsLoaded) { foreach (OrderItem orderItem in this.OrderItems) { orderItem.WrapStyleId = this.WrapStyleId; } }
        }

#region Parents
        private TaxCode _TaxCode;
        private WrapGroup _WrapGroup;

        /// <summary>
        /// The TaxCode object that this WrapStyle object is associated with
        /// </summary>
        public TaxCode TaxCode
        {
            get
            {
                if (!this.TaxCodeLoaded)
                {
                    this._TaxCode = TaxCodeDataSource.Load(this.TaxCodeId);
                }
                return this._TaxCode;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxCodeLoaded { get { return ((this._TaxCode != null) && (this._TaxCode.TaxCodeId == this.TaxCodeId)); } }

        /// <summary>
        /// The WrapGroup object that this WrapStyle object is associated with
        /// </summary>
        public WrapGroup WrapGroup
        {
            get
            {
                if (!this.WrapGroupLoaded)
                {
                    this._WrapGroup = WrapGroupDataSource.Load(this.WrapGroupId);
                }
                return this._WrapGroup;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WrapGroupLoaded { get { return ((this._WrapGroup != null) && (this._WrapGroup.WrapGroupId == this.WrapGroupId)); } }

#endregion

#region Children
        private BasketItemCollection _BasketItems;
        private OrderItemCollection _OrderItems;

        /// <summary>
        /// A collection of BasketItem objects associated with this WrapStyle object.
        /// </summary>
        public BasketItemCollection BasketItems
        {
            get
            {
                if (!this.BasketItemsLoaded)
                {
                    this._BasketItems = BasketItemDataSource.LoadForWrapStyle(this.WrapStyleId);
                }
                return this._BasketItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketItemsLoaded { get { return (this._BasketItems != null); } }

        /// <summary>
        /// A collection of OrderItem objects associated with this WrapStyle object.
        /// </summary>
        public OrderItemCollection OrderItems
        {
            get
            {
                if (!this.OrderItemsLoaded)
                {
                    this._OrderItems = OrderItemDataSource.LoadForWrapStyle(this.WrapStyleId);
                }
                return this._OrderItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemsLoaded { get { return (this._OrderItems != null); } }

#endregion

        /// <summary>
        /// Deletes this WrapStyle object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_WrapStyles");
            deleteQuery.Append(" WHERE WrapStyleId = @WrapStyleId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@WrapStyleId", System.Data.DbType.Int32, this.WrapStyleId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this WrapStyle object from the database for the given primary key.
        /// </summary>
        /// <param name="wrapStyleId">Value of WrapStyleId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 wrapStyleId)
        {
            bool result = false;
            this.WrapStyleId = wrapStyleId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_WrapStyles");
            selectQuery.Append(" WHERE WrapStyleId = @wrapStyleId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@wrapStyleId", System.Data.DbType.Int32, wrapStyleId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this WrapStyle object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.WrapStyleId == 0) recordExists = false;

                if (this.OrderBy < 0) this.OrderBy = WrapStyleDataSource.GetNextOrderBy(this.WrapGroupId);

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_WrapStyles");
                    selectQuery.Append(" WHERE WrapStyleId = @WrapStyleId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@WrapStyleId", System.Data.DbType.Int32, this.WrapStyleId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_WrapStyles SET ");
                    updateQuery.Append("WrapGroupId = @WrapGroupId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", TaxCodeId = @TaxCodeId");
                    updateQuery.Append(", Price = @Price");
                    updateQuery.Append(", ThumbnailUrl = @ThumbnailUrl");
                    updateQuery.Append(", ImageUrl = @ImageUrl");
                    updateQuery.Append(", OrderBy = @OrderBy");
                    updateQuery.Append(" WHERE WrapStyleId = @WrapStyleId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@WrapStyleId", System.Data.DbType.Int32, this.WrapStyleId);
                        database.AddInParameter(updateCommand, "@WrapGroupId", System.Data.DbType.Int32, this.WrapGroupId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(updateCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(updateCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(updateCommand, "@ImageUrl", System.Data.DbType.String, NullableData.DbNullify(this.ImageUrl));
                        database.AddInParameter(updateCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_WrapStyles (WrapGroupId, Name, TaxCodeId, Price, ThumbnailUrl, ImageUrl, OrderBy)");
                    insertQuery.Append(" VALUES (@WrapGroupId, @Name, @TaxCodeId, @Price, @ThumbnailUrl, @ImageUrl, @OrderBy)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@WrapStyleId", System.Data.DbType.Int32, this.WrapStyleId);
                        database.AddInParameter(insertCommand, "@WrapGroupId", System.Data.DbType.Int32, this.WrapGroupId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(insertCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(insertCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(insertCommand, "@ImageUrl", System.Data.DbType.String, NullableData.DbNullify(this.ImageUrl));
                        database.AddInParameter(insertCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._WrapStyleId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this WrapStyle object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.BasketItemsLoaded) this.BasketItems.Save();
            if (this.OrderItemsLoaded) this.OrderItems.Save();
        }

     }
}
