//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Stores;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Marketing
{
    /// <summary>
    /// This class represents a Affiliate object in the database.
    /// </summary>
    public partial class Affiliate : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Affiliate() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="affiliateId">Value of AffiliateId.</param>
        /// </summary>
        public Affiliate(Int32 affiliateId)
        {
            this.AffiliateId = affiliateId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "AffiliateId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "PayeeName");
          columnNames.Add(prefix + "FirstName");
          columnNames.Add(prefix + "LastName");
          columnNames.Add(prefix + "Company");
          columnNames.Add(prefix + "Address1");
          columnNames.Add(prefix + "Address2");
          columnNames.Add(prefix + "City");
          columnNames.Add(prefix + "Province");
          columnNames.Add(prefix + "PostalCode");
          columnNames.Add(prefix + "CountryCode");
          columnNames.Add(prefix + "PhoneNumber");
          columnNames.Add(prefix + "FaxNumber");
          columnNames.Add(prefix + "MobileNumber");
          columnNames.Add(prefix + "WebsiteUrl");
          columnNames.Add(prefix + "Email");
          columnNames.Add(prefix + "CommissionRate");
          columnNames.Add(prefix + "CommissionIsPercent");
          columnNames.Add(prefix + "CommissionOnTotal");
          columnNames.Add(prefix + "ReferralPeriodId");
          columnNames.Add(prefix + "ReferralDays");
          columnNames.Add(prefix + "GroupId");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Affiliate object from the given database data reader.
        /// </summary>
        /// <param name="affiliate">The Affiliate object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Affiliate affiliate, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            affiliate.AffiliateId = dr.GetInt32(0);
            affiliate.StoreId = dr.GetInt32(1);
            affiliate.Name = dr.GetString(2);
            affiliate.PayeeName = NullableData.GetString(dr, 3);
            affiliate.FirstName = NullableData.GetString(dr, 4);
            affiliate.LastName = NullableData.GetString(dr, 5);
            affiliate.Company = NullableData.GetString(dr, 6);
            affiliate.Address1 = NullableData.GetString(dr, 7);
            affiliate.Address2 = NullableData.GetString(dr, 8);
            affiliate.City = NullableData.GetString(dr, 9);
            affiliate.Province = NullableData.GetString(dr, 10);
            affiliate.PostalCode = NullableData.GetString(dr, 11);
            affiliate.CountryCode = NullableData.GetString(dr, 12);
            affiliate.PhoneNumber = NullableData.GetString(dr, 13);
            affiliate.FaxNumber = NullableData.GetString(dr, 14);
            affiliate.MobileNumber = NullableData.GetString(dr, 15);
            affiliate.WebsiteUrl = NullableData.GetString(dr, 16);
            affiliate.Email = NullableData.GetString(dr, 17);
            affiliate.CommissionRate = dr.GetDecimal(18);
            affiliate.CommissionIsPercent = dr.GetBoolean(19);
            affiliate.CommissionOnTotal = dr.GetBoolean(20);
            affiliate.ReferralPeriodId = dr.GetByte(21);
            affiliate.ReferralDays = dr.GetInt16(22);
            affiliate.GroupId = NullableData.GetInt32(dr, 23);
            affiliate.IsDirty = false;
        }

#endregion

        private Int32 _AffiliateId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _PayeeName = string.Empty;
        private String _FirstName = string.Empty;
        private String _LastName = string.Empty;
        private String _Company = string.Empty;
        private String _Address1 = string.Empty;
        private String _Address2 = string.Empty;
        private String _City = string.Empty;
        private String _Province = string.Empty;
        private String _PostalCode = string.Empty;
        private String _CountryCode = string.Empty;
        private String _PhoneNumber = string.Empty;
        private String _FaxNumber = string.Empty;
        private String _MobileNumber = string.Empty;
        private String _WebsiteUrl = string.Empty;
        private String _Email = string.Empty;
        private LSDecimal _CommissionRate;
        private Boolean _CommissionIsPercent;
        private Boolean _CommissionOnTotal;
        private Byte _ReferralPeriodId;
        private Int16 _ReferralDays;
        private Int32 _GroupId;
        private bool _IsDirty;

        /// <summary>
        /// AffiliateId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 AffiliateId
        {
            get { return this._AffiliateId; }
            set
            {
                if (this._AffiliateId != value)
                {
                    this._AffiliateId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PayeeName
        /// </summary>
        public String PayeeName
        {
            get { return this._PayeeName; }
            set
            {
                if (this._PayeeName != value)
                {
                    this._PayeeName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FirstName
        /// </summary>
        public String FirstName
        {
            get { return this._FirstName; }
            set
            {
                if (this._FirstName != value)
                {
                    this._FirstName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastName
        /// </summary>
        public String LastName
        {
            get { return this._LastName; }
            set
            {
                if (this._LastName != value)
                {
                    this._LastName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Company
        /// </summary>
        public String Company
        {
            get { return this._Company; }
            set
            {
                if (this._Company != value)
                {
                    this._Company = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Address1
        /// </summary>
        public String Address1
        {
            get { return this._Address1; }
            set
            {
                if (this._Address1 != value)
                {
                    this._Address1 = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Address2
        /// </summary>
        public String Address2
        {
            get { return this._Address2; }
            set
            {
                if (this._Address2 != value)
                {
                    this._Address2 = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// City
        /// </summary>
        public String City
        {
            get { return this._City; }
            set
            {
                if (this._City != value)
                {
                    this._City = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Province
        /// </summary>
        public String Province
        {
            get { return this._Province; }
            set
            {
                if (this._Province != value)
                {
                    this._Province = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PostalCode
        /// </summary>
        public String PostalCode
        {
            get { return this._PostalCode; }
            set
            {
                if (this._PostalCode != value)
                {
                    this._PostalCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CountryCode
        /// </summary>
        public String CountryCode
        {
            get { return this._CountryCode; }
            set
            {
                if (this._CountryCode != value)
                {
                    this._CountryCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PhoneNumber
        /// </summary>
        public String PhoneNumber
        {
            get { return this._PhoneNumber; }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this._PhoneNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FaxNumber
        /// </summary>
        public String FaxNumber
        {
            get { return this._FaxNumber; }
            set
            {
                if (this._FaxNumber != value)
                {
                    this._FaxNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MobileNumber
        /// </summary>
        public String MobileNumber
        {
            get { return this._MobileNumber; }
            set
            {
                if (this._MobileNumber != value)
                {
                    this._MobileNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// WebsiteUrl
        /// </summary>
        public String WebsiteUrl
        {
            get { return this._WebsiteUrl; }
            set
            {
                if (this._WebsiteUrl != value)
                {
                    this._WebsiteUrl = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Email
        /// </summary>
        public String Email
        {
            get { return this._Email; }
            set
            {
                if (this._Email != value)
                {
                    this._Email = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CommissionRate
        /// </summary>
        public LSDecimal CommissionRate
        {
            get { return this._CommissionRate; }
            set
            {
                if (this._CommissionRate != value)
                {
                    this._CommissionRate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CommissionIsPercent
        /// </summary>
        public Boolean CommissionIsPercent
        {
            get { return this._CommissionIsPercent; }
            set
            {
                if (this._CommissionIsPercent != value)
                {
                    this._CommissionIsPercent = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CommissionOnTotal
        /// </summary>
        public Boolean CommissionOnTotal
        {
            get { return this._CommissionOnTotal; }
            set
            {
                if (this._CommissionOnTotal != value)
                {
                    this._CommissionOnTotal = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReferralPeriodId
        /// </summary>
        public Byte ReferralPeriodId
        {
            get { return this._ReferralPeriodId; }
            set
            {
                if (this._ReferralPeriodId != value)
                {
                    this._ReferralPeriodId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReferralDays
        /// </summary>
        public Int16 ReferralDays
        {
            get { return this._ReferralDays; }
            set
            {
                if (this._ReferralDays != value)
                {
                    this._ReferralDays = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// GroupId
        /// </summary>
        public Int32 GroupId
        {
            get { return this._GroupId; }
            set
            {
                if (this._GroupId != value)
                {
                    this._GroupId = value;
                    this.IsDirty = true;
                    this._Group = null;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Affiliate object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.OrdersLoaded && this.Orders.IsDirty) return true;
                if (this.UsersLoaded && this.Users.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Affiliate are properly associated with this Affiliate object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.OrdersLoaded) { foreach (Order order in this.Orders) { order.AffiliateId = this.AffiliateId; } }
            if (this.UsersLoaded) { foreach (User user in this.Users) { user.AffiliateId = this.AffiliateId; } }
        }

#region Parents
        private Group _Group;
        private Store _Store;

        /// <summary>
        /// The Group object that this Affiliate object is associated with
        /// </summary>
        public Group Group
        {
            get
            {
                if (!this.GroupLoaded)
                {
                    this._Group = GroupDataSource.Load(this.GroupId);
                }
                return this._Group;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool GroupLoaded { get { return ((this._Group != null) && (this._Group.GroupId == this.GroupId)); } }

        /// <summary>
        /// The Store object that this Affiliate object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private OrderCollection _Orders;
        private UserCollection _Users;

        /// <summary>
        /// A collection of Order objects associated with this Affiliate object.
        /// </summary>
        public OrderCollection Orders
        {
            get
            {
                if (!this.OrdersLoaded)
                {
                    this._Orders = OrderDataSource.LoadForAffiliate(this.AffiliateId);
                }
                return this._Orders;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrdersLoaded { get { return (this._Orders != null); } }

        /// <summary>
        /// A collection of User objects associated with this Affiliate object.
        /// </summary>
        public UserCollection Users
        {
            get
            {
                if (!this.UsersLoaded)
                {
                    this._Users = UserDataSource.LoadForAffiliate(this.AffiliateId);
                }
                return this._Users;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UsersLoaded { get { return (this._Users != null); } }

#endregion

        /// <summary>
        /// Deletes this Affiliate object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Affiliates");
            deleteQuery.Append(" WHERE AffiliateId = @AffiliateId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@AffiliateId", System.Data.DbType.Int32, this.AffiliateId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Affiliate object from the database for the given primary key.
        /// </summary>
        /// <param name="affiliateId">Value of AffiliateId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 affiliateId)
        {
            bool result = false;
            this.AffiliateId = affiliateId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Affiliates");
            selectQuery.Append(" WHERE AffiliateId = @affiliateId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@affiliateId", System.Data.DbType.Int32, affiliateId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Affiliate object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.AffiliateId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Affiliates");
                    selectQuery.Append(" WHERE AffiliateId = @AffiliateId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@AffiliateId", System.Data.DbType.Int32, this.AffiliateId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Affiliates SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", PayeeName = @PayeeName");
                    updateQuery.Append(", FirstName = @FirstName");
                    updateQuery.Append(", LastName = @LastName");
                    updateQuery.Append(", Company = @Company");
                    updateQuery.Append(", Address1 = @Address1");
                    updateQuery.Append(", Address2 = @Address2");
                    updateQuery.Append(", City = @City");
                    updateQuery.Append(", Province = @Province");
                    updateQuery.Append(", PostalCode = @PostalCode");
                    updateQuery.Append(", CountryCode = @CountryCode");
                    updateQuery.Append(", PhoneNumber = @PhoneNumber");
                    updateQuery.Append(", FaxNumber = @FaxNumber");
                    updateQuery.Append(", MobileNumber = @MobileNumber");
                    updateQuery.Append(", WebsiteUrl = @WebsiteUrl");
                    updateQuery.Append(", Email = @Email");
                    updateQuery.Append(", CommissionRate = @CommissionRate");
                    updateQuery.Append(", CommissionIsPercent = @CommissionIsPercent");
                    updateQuery.Append(", CommissionOnTotal = @CommissionOnTotal");
                    updateQuery.Append(", ReferralPeriodId = @ReferralPeriodId");
                    updateQuery.Append(", ReferralDays = @ReferralDays");
                    updateQuery.Append(", GroupId = @GroupId");
                    updateQuery.Append(" WHERE AffiliateId = @AffiliateId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@AffiliateId", System.Data.DbType.Int32, this.AffiliateId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@PayeeName", System.Data.DbType.String, NullableData.DbNullify(this.PayeeName));
                        database.AddInParameter(updateCommand, "@FirstName", System.Data.DbType.String, NullableData.DbNullify(this.FirstName));
                        database.AddInParameter(updateCommand, "@LastName", System.Data.DbType.String, NullableData.DbNullify(this.LastName));
                        database.AddInParameter(updateCommand, "@Company", System.Data.DbType.String, NullableData.DbNullify(this.Company));
                        database.AddInParameter(updateCommand, "@Address1", System.Data.DbType.String, NullableData.DbNullify(this.Address1));
                        database.AddInParameter(updateCommand, "@Address2", System.Data.DbType.String, NullableData.DbNullify(this.Address2));
                        database.AddInParameter(updateCommand, "@City", System.Data.DbType.String, NullableData.DbNullify(this.City));
                        database.AddInParameter(updateCommand, "@Province", System.Data.DbType.String, NullableData.DbNullify(this.Province));
                        database.AddInParameter(updateCommand, "@PostalCode", System.Data.DbType.String, NullableData.DbNullify(this.PostalCode));
                        database.AddInParameter(updateCommand, "@CountryCode", System.Data.DbType.String, NullableData.DbNullify(this.CountryCode));
                        database.AddInParameter(updateCommand, "@PhoneNumber", System.Data.DbType.String, NullableData.DbNullify(this.PhoneNumber));
                        database.AddInParameter(updateCommand, "@FaxNumber", System.Data.DbType.String, NullableData.DbNullify(this.FaxNumber));
                        database.AddInParameter(updateCommand, "@MobileNumber", System.Data.DbType.String, NullableData.DbNullify(this.MobileNumber));
                        database.AddInParameter(updateCommand, "@WebsiteUrl", System.Data.DbType.String, NullableData.DbNullify(this.WebsiteUrl));
                        database.AddInParameter(updateCommand, "@Email", System.Data.DbType.String, NullableData.DbNullify(this.Email));
                        database.AddInParameter(updateCommand, "@CommissionRate", System.Data.DbType.Decimal, this.CommissionRate);
                        database.AddInParameter(updateCommand, "@CommissionIsPercent", System.Data.DbType.Boolean, this.CommissionIsPercent);
                        database.AddInParameter(updateCommand, "@CommissionOnTotal", System.Data.DbType.Boolean, this.CommissionOnTotal);
                        database.AddInParameter(updateCommand, "@ReferralPeriodId", System.Data.DbType.Byte, this.ReferralPeriodId);
                        database.AddInParameter(updateCommand, "@ReferralDays", System.Data.DbType.Int16, this.ReferralDays);
                        database.AddInParameter(updateCommand, "@GroupId", System.Data.DbType.Int32, NullableData.DbNullify(this.GroupId));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Affiliates (StoreId, Name, PayeeName, FirstName, LastName, Company, Address1, Address2, City, Province, PostalCode, CountryCode, PhoneNumber, FaxNumber, MobileNumber, WebsiteUrl, Email, CommissionRate, CommissionIsPercent, CommissionOnTotal, ReferralPeriodId, ReferralDays, GroupId)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @PayeeName, @FirstName, @LastName, @Company, @Address1, @Address2, @City, @Province, @PostalCode, @CountryCode, @PhoneNumber, @FaxNumber, @MobileNumber, @WebsiteUrl, @Email, @CommissionRate, @CommissionIsPercent, @CommissionOnTotal, @ReferralPeriodId, @ReferralDays, @GroupId)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@AffiliateId", System.Data.DbType.Int32, this.AffiliateId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@PayeeName", System.Data.DbType.String, NullableData.DbNullify(this.PayeeName));
                        database.AddInParameter(insertCommand, "@FirstName", System.Data.DbType.String, NullableData.DbNullify(this.FirstName));
                        database.AddInParameter(insertCommand, "@LastName", System.Data.DbType.String, NullableData.DbNullify(this.LastName));
                        database.AddInParameter(insertCommand, "@Company", System.Data.DbType.String, NullableData.DbNullify(this.Company));
                        database.AddInParameter(insertCommand, "@Address1", System.Data.DbType.String, NullableData.DbNullify(this.Address1));
                        database.AddInParameter(insertCommand, "@Address2", System.Data.DbType.String, NullableData.DbNullify(this.Address2));
                        database.AddInParameter(insertCommand, "@City", System.Data.DbType.String, NullableData.DbNullify(this.City));
                        database.AddInParameter(insertCommand, "@Province", System.Data.DbType.String, NullableData.DbNullify(this.Province));
                        database.AddInParameter(insertCommand, "@PostalCode", System.Data.DbType.String, NullableData.DbNullify(this.PostalCode));
                        database.AddInParameter(insertCommand, "@CountryCode", System.Data.DbType.String, NullableData.DbNullify(this.CountryCode));
                        database.AddInParameter(insertCommand, "@PhoneNumber", System.Data.DbType.String, NullableData.DbNullify(this.PhoneNumber));
                        database.AddInParameter(insertCommand, "@FaxNumber", System.Data.DbType.String, NullableData.DbNullify(this.FaxNumber));
                        database.AddInParameter(insertCommand, "@MobileNumber", System.Data.DbType.String, NullableData.DbNullify(this.MobileNumber));
                        database.AddInParameter(insertCommand, "@WebsiteUrl", System.Data.DbType.String, NullableData.DbNullify(this.WebsiteUrl));
                        database.AddInParameter(insertCommand, "@Email", System.Data.DbType.String, NullableData.DbNullify(this.Email));
                        database.AddInParameter(insertCommand, "@CommissionRate", System.Data.DbType.Decimal, this.CommissionRate);
                        database.AddInParameter(insertCommand, "@CommissionIsPercent", System.Data.DbType.Boolean, this.CommissionIsPercent);
                        database.AddInParameter(insertCommand, "@CommissionOnTotal", System.Data.DbType.Boolean, this.CommissionOnTotal);
                        database.AddInParameter(insertCommand, "@ReferralPeriodId", System.Data.DbType.Byte, this.ReferralPeriodId);
                        database.AddInParameter(insertCommand, "@ReferralDays", System.Data.DbType.Int16, this.ReferralDays);
                        database.AddInParameter(insertCommand, "@GroupId", System.Data.DbType.Int32, NullableData.DbNullify(this.GroupId));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._AffiliateId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Affiliate object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.OrdersLoaded) this.Orders.Save();
            if (this.UsersLoaded) this.Users.Save();
        }

     }
}
