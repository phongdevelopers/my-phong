//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Shipping
{
    /// <summary>
    /// DataSource class for ShipMethod objects
    /// </summary>
    public partial class ShipMethodDataSource
    {
        /// <summary>
        /// Deletes a ShipMethod object from the database
        /// </summary>
        /// <param name="shipMethod">The ShipMethod object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(ShipMethod shipMethod)
        {
            return shipMethod.Delete();
        }

        /// <summary>
        /// Deletes a ShipMethod object with given id from the database
        /// </summary>
        /// <param name="shipMethodId">Value of ShipMethodId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 shipMethodId)
        {
            ShipMethod shipMethod = new ShipMethod();
            if (shipMethod.Load(shipMethodId)) return shipMethod.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a ShipMethod object to the database.
        /// </summary>
        /// <param name="shipMethod">The ShipMethod object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(ShipMethod shipMethod) { return shipMethod.Save(); }

        /// <summary>
        /// Loads a ShipMethod object for given Id from the database.
        /// </summary>
        /// <param name="shipMethodId">Value of ShipMethodId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded ShipMethod object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethod Load(Int32 shipMethodId)
        {
            return ShipMethodDataSource.Load(shipMethodId, true);
        }

        /// <summary>
        /// Loads a ShipMethod object for given Id from the database.
        /// </summary>
        /// <param name="shipMethodId">Value of ShipMethodId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded ShipMethod object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethod Load(Int32 shipMethodId, bool useCache)
        {
            if (shipMethodId == 0) return null;
            ShipMethod shipMethod = null;
            string key = "ShipMethod_" + shipMethodId.ToString();
            if (useCache)
            {
                shipMethod = ContextCache.GetObject(key) as ShipMethod;
                if (shipMethod != null) return shipMethod;
            }
            shipMethod = new ShipMethod();
            if (shipMethod.Load(shipMethodId))
            {
                if (useCache) ContextCache.SetObject(key, shipMethod);
                return shipMethod;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the ShipMethod objects that should be loaded.</param>
        /// <returns>The number of ShipMethod objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethods" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ShipMethods");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>The number of ShipMethod objects associated with with the given CouponId</returns>
        public static int CountForCoupon(Int32 couponId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_CouponShipMethods WHERE CouponId = @couponId");
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>A collection of ShipMethod objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForCoupon(Int32 couponId)
        {
            return ShipMethodDataSource.LoadForCoupon(couponId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForCoupon(Int32 couponId, string sortExpression)
        {
            return ShipMethodDataSource.LoadForCoupon(couponId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex)
        {
            return ShipMethodDataSource.LoadForCoupon(couponId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames("ac_ShipMethods"));
            selectQuery.Append(" FROM ac_ShipMethods, ac_CouponShipMethods");
            selectQuery.Append(" WHERE ac_ShipMethods.ShipMethodId = ac_CouponShipMethods.ShipMethodId");
            selectQuery.Append(" AND ac_CouponShipMethods.CouponId = @couponId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <returns>The number of ShipMethod objects associated with with the given GroupId</returns>
        public static int CountForGroup(Int32 groupId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethodGroups WHERE GroupId = @groupId");
            database.AddInParameter(selectCommand, "@groupId", System.Data.DbType.Int32, groupId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <returns>A collection of ShipMethod objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForGroup(Int32 groupId)
        {
            return ShipMethodDataSource.LoadForGroup(groupId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForGroup(Int32 groupId, string sortExpression)
        {
            return ShipMethodDataSource.LoadForGroup(groupId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForGroup(Int32 groupId, int maximumRows, int startRowIndex)
        {
            return ShipMethodDataSource.LoadForGroup(groupId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForGroup(Int32 groupId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames("ac_ShipMethods"));
            selectQuery.Append(" FROM ac_ShipMethods, ac_ShipMethodGroups");
            selectQuery.Append(" WHERE ac_ShipMethods.ShipMethodId = ac_ShipMethodGroups.ShipMethodId");
            selectQuery.Append(" AND ac_ShipMethodGroups.GroupId = @groupId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@groupId", System.Data.DbType.Int32, groupId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <returns>The number of ShipMethod objects associated with with the given ShipZoneId</returns>
        public static int CountForShipZone(Int32 shipZoneId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethodShipZones WHERE ShipZoneId = @shipZoneId");
            database.AddInParameter(selectCommand, "@shipZoneId", System.Data.DbType.Int32, shipZoneId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <returns>A collection of ShipMethod objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipZone(Int32 shipZoneId)
        {
            return ShipMethodDataSource.LoadForShipZone(shipZoneId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipZone(Int32 shipZoneId, string sortExpression)
        {
            return ShipMethodDataSource.LoadForShipZone(shipZoneId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipZone(Int32 shipZoneId, int maximumRows, int startRowIndex)
        {
            return ShipMethodDataSource.LoadForShipZone(shipZoneId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given ShipZoneId
        /// </summary>
        /// <param name="shipZoneId">The given ShipZoneId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given ShipZoneId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipZone(Int32 shipZoneId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames("ac_ShipMethods"));
            selectQuery.Append(" FROM ac_ShipMethods, ac_ShipMethodShipZones");
            selectQuery.Append(" WHERE ac_ShipMethods.ShipMethodId = ac_ShipMethodShipZones.ShipMethodId");
            selectQuery.Append(" AND ac_ShipMethodShipZones.ShipZoneId = @shipZoneId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipZoneId", System.Data.DbType.Int32, shipZoneId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects associated with the given WarehouseId
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <returns>The number of ShipMethod objects associated with with the given WarehouseId</returns>
        public static int CountForWarehouse(Int32 warehouseId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethodWarehouses WHERE WarehouseId = @warehouseId");
            database.AddInParameter(selectCommand, "@warehouseId", System.Data.DbType.Int32, warehouseId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given WarehouseId
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <returns>A collection of ShipMethod objects associated with with the given WarehouseId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForWarehouse(Int32 warehouseId)
        {
            return ShipMethodDataSource.LoadForWarehouse(warehouseId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given WarehouseId
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given WarehouseId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForWarehouse(Int32 warehouseId, string sortExpression)
        {
            return ShipMethodDataSource.LoadForWarehouse(warehouseId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given WarehouseId
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given WarehouseId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForWarehouse(Int32 warehouseId, int maximumRows, int startRowIndex)
        {
            return ShipMethodDataSource.LoadForWarehouse(warehouseId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the ShipMethod objects associated with the given WarehouseId
        /// </summary>
        /// <param name="warehouseId">The given WarehouseId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects associated with with the given WarehouseId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForWarehouse(Int32 warehouseId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames("ac_ShipMethods"));
            selectQuery.Append(" FROM ac_ShipMethods, ac_ShipMethodWarehouses");
            selectQuery.Append(" WHERE ac_ShipMethods.ShipMethodId = ac_ShipMethodWarehouses.ShipMethodId");
            selectQuery.Append(" AND ac_ShipMethodWarehouses.WarehouseId = @warehouseId");
            selectQuery.Append(" AND StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@warehouseId", System.Data.DbType.Int32, warehouseId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects for the given ShipGatewayId in the database.
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// </summary>
        /// <returns>The Number of ShipMethod objects for the given ShipGatewayId in the database.</returns>
        public static int CountForShipGateway(Int32 shipGatewayId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethods WHERE ShipGatewayId = @shipGatewayId");
            database.AddInParameter(selectCommand, "@shipGatewayId", System.Data.DbType.Int32, NullableData.DbNullify(shipGatewayId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipGateway(Int32 shipGatewayId)
        {
            return LoadForShipGateway(shipGatewayId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipGateway(Int32 shipGatewayId, string sortExpression)
        {
            return LoadForShipGateway(shipGatewayId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipGateway(Int32 shipGatewayId, int maximumRows, int startRowIndex)
        {
            return LoadForShipGateway(shipGatewayId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForShipGateway(Int32 shipGatewayId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ShipMethods");
            selectQuery.Append(" WHERE ShipGatewayId = @shipGatewayId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipGatewayId", System.Data.DbType.Int32, NullableData.DbNullify(shipGatewayId));
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects for the current store.
        /// </summary>
        /// <returns>The Number of ShipMethod objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethods WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the current store from the database
        /// </summary>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ShipMethods");
            selectQuery.Append(" WHERE StoreId = @storeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of ShipMethod objects for the given TaxCodeId in the database.
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// </summary>
        /// <returns>The Number of ShipMethod objects for the given TaxCodeId in the database.</returns>
        public static int CountForTaxCode(Int32 taxCodeId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethods WHERE TaxCodeId = @taxCodeId");
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(taxCodeId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForTaxCode(Int32 taxCodeId)
        {
            return LoadForTaxCode(taxCodeId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForTaxCode(Int32 taxCodeId, string sortExpression)
        {
            return LoadForTaxCode(taxCodeId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex)
        {
            return LoadForTaxCode(taxCodeId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of ShipMethod objects for the given TaxCodeId from the database
        /// </summary>
        /// <param name="taxCodeId">The given TaxCodeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of ShipMethod objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipMethodCollection LoadForTaxCode(Int32 taxCodeId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "OrderBy";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + ShipMethod.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ShipMethods");
            selectQuery.Append(" WHERE TaxCodeId = @taxCodeId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(taxCodeId));
            //EXECUTE THE COMMAND
            ShipMethodCollection results = new ShipMethodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        ShipMethod shipMethod = new ShipMethod();
                        ShipMethod.LoadDataReader(shipMethod, dr);
                        results.Add(shipMethod);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Gets the next value of the OrderBy field for ShipMethod objects.
        /// </summary>
        /// <returns>The next value of the OrderBy field for ShipMethod objects</returns>
        public static short GetNextOrderBy()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            using (DbCommand selectCommand = database.GetSqlStringCommand("SELECT (Max(OrderBy) + 1) AS NextOrderBy FROM ac_ShipMethods WHERE StoreId = @storeId"))
            {
                database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
                object result = database.ExecuteScalar(selectCommand);
                if (result.Equals(DBNull.Value)) return 1;
                return (short)(int)result;
            }
        }

        /// <summary>
        /// Updates/Saves the given ShipMethod object to the database.
        /// </summary>
        /// <param name="shipMethod">The ShipMethod object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(ShipMethod shipMethod) { return shipMethod.Save(); }

    }
}
