//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Shipping
{
    /// <summary>
    /// This class represents a UpsOrigin object in the database.
    /// </summary>
    public partial class UpsOrigin : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public UpsOrigin() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="countryCode">Value of CountryCode.</param>
        /// </summary>
        public UpsOrigin(String countryCode)
        {
            this.CountryCode = countryCode;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "CountryCode");
          columnNames.Add(prefix + "CountryName");
          columnNames.Add(prefix + "CurrencyName");
          columnNames.Add(prefix + "CurrencyCode");
          columnNames.Add(prefix + "EuroAllowed");
          columnNames.Add(prefix + "MIVDollar");
          columnNames.Add(prefix + "MIVEuro");
          columnNames.Add(prefix + "UOM");
          columnNames.Add(prefix + "MaxWeight");
          columnNames.Add(prefix + "MaxMetricWeight");
          columnNames.Add(prefix + "EUMember");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given UpsOrigin object from the given database data reader.
        /// </summary>
        /// <param name="upsOrigin">The UpsOrigin object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(UpsOrigin upsOrigin, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            upsOrigin.CountryCode = dr.GetString(0);
            upsOrigin.CountryName = NullableData.GetString(dr, 1);
            upsOrigin.CurrencyName = NullableData.GetString(dr, 2);
            upsOrigin.CurrencyCode = NullableData.GetString(dr, 3);
            upsOrigin.EuroAllowed = NullableData.GetInt16(dr, 4);
            upsOrigin.MIVDollar = NullableData.GetDecimal(dr, 5);
            upsOrigin.MIVEuro = NullableData.GetDecimal(dr, 6);
            upsOrigin.UOM = NullableData.GetInt16(dr, 7);
            upsOrigin.MaxWeight = NullableData.GetDecimal(dr, 8);
            upsOrigin.MaxMetricWeight = NullableData.GetDecimal(dr, 9);
            upsOrigin.EUMember = NullableData.GetInt16(dr, 10);
            upsOrigin.IsDirty = false;
        }

#endregion

        private String _CountryCode = string.Empty;
        private String _CountryName = string.Empty;
        private String _CurrencyName = string.Empty;
        private String _CurrencyCode = string.Empty;
        private Int16 _EuroAllowed;
        private LSDecimal _MIVDollar;
        private LSDecimal _MIVEuro;
        private Int16 _UOM;
        private LSDecimal _MaxWeight;
        private LSDecimal _MaxMetricWeight;
        private Int16 _EUMember;
        private bool _IsDirty;

        /// <summary>
        /// CountryCode
        /// </summary>
        [DataObjectField(true, true, false)]
        public String CountryCode
        {
            get { return this._CountryCode; }
            set
            {
                if (this._CountryCode != value)
                {
                    this._CountryCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CountryName
        /// </summary>
        public String CountryName
        {
            get { return this._CountryName; }
            set
            {
                if (this._CountryName != value)
                {
                    this._CountryName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CurrencyName
        /// </summary>
        public String CurrencyName
        {
            get { return this._CurrencyName; }
            set
            {
                if (this._CurrencyName != value)
                {
                    this._CurrencyName = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CurrencyCode
        /// </summary>
        public String CurrencyCode
        {
            get { return this._CurrencyCode; }
            set
            {
                if (this._CurrencyCode != value)
                {
                    this._CurrencyCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// EuroAllowed
        /// </summary>
        public Int16 EuroAllowed
        {
            get { return this._EuroAllowed; }
            set
            {
                if (this._EuroAllowed != value)
                {
                    this._EuroAllowed = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MIVDollar
        /// </summary>
        public LSDecimal MIVDollar
        {
            get { return this._MIVDollar; }
            set
            {
                if (this._MIVDollar != value)
                {
                    this._MIVDollar = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MIVEuro
        /// </summary>
        public LSDecimal MIVEuro
        {
            get { return this._MIVEuro; }
            set
            {
                if (this._MIVEuro != value)
                {
                    this._MIVEuro = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UOM
        /// </summary>
        public Int16 UOM
        {
            get { return this._UOM; }
            set
            {
                if (this._UOM != value)
                {
                    this._UOM = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MaxWeight
        /// </summary>
        public LSDecimal MaxWeight
        {
            get { return this._MaxWeight; }
            set
            {
                if (this._MaxWeight != value)
                {
                    this._MaxWeight = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MaxMetricWeight
        /// </summary>
        public LSDecimal MaxMetricWeight
        {
            get { return this._MaxMetricWeight; }
            set
            {
                if (this._MaxMetricWeight != value)
                {
                    this._MaxMetricWeight = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// EUMember
        /// </summary>
        public Int16 EUMember
        {
            get { return this._EUMember; }
            set
            {
                if (this._EUMember != value)
                {
                    this._EUMember = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this UpsOrigin object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Deletes this UpsOrigin object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_UpsOrigin");
            deleteQuery.Append(" WHERE CountryCode = @CountryCode");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this UpsOrigin object from the database for the given primary key.
        /// </summary>
        /// <param name="countryCode">Value of CountryCode of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(String countryCode)
        {
            bool result = false;
            this.CountryCode = countryCode;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_UpsOrigin");
            selectQuery.Append(" WHERE CountryCode = @countryCode");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@countryCode", System.Data.DbType.String, countryCode);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this UpsOrigin object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_UpsOrigin");
                    selectQuery.Append(" WHERE CountryCode = @CountryCode");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_UpsOrigin SET ");
                    updateQuery.Append("CountryName = @CountryName");
                    updateQuery.Append(", CurrencyName = @CurrencyName");
                    updateQuery.Append(", CurrencyCode = @CurrencyCode");
                    updateQuery.Append(", EuroAllowed = @EuroAllowed");
                    updateQuery.Append(", MIVDollar = @MIVDollar");
                    updateQuery.Append(", MIVEuro = @MIVEuro");
                    updateQuery.Append(", UOM = @UOM");
                    updateQuery.Append(", MaxWeight = @MaxWeight");
                    updateQuery.Append(", MaxMetricWeight = @MaxMetricWeight");
                    updateQuery.Append(", EUMember = @EUMember");
                    updateQuery.Append(" WHERE CountryCode = @CountryCode");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                        database.AddInParameter(updateCommand, "@CountryName", System.Data.DbType.String, NullableData.DbNullify(this.CountryName));
                        database.AddInParameter(updateCommand, "@CurrencyName", System.Data.DbType.String, NullableData.DbNullify(this.CurrencyName));
                        database.AddInParameter(updateCommand, "@CurrencyCode", System.Data.DbType.String, NullableData.DbNullify(this.CurrencyCode));
                        database.AddInParameter(updateCommand, "@EuroAllowed", System.Data.DbType.Int16, NullableData.DbNullify(this.EuroAllowed));
                        database.AddInParameter(updateCommand, "@MIVDollar", System.Data.DbType.Decimal, NullableData.DbNullify(this.MIVDollar));
                        database.AddInParameter(updateCommand, "@MIVEuro", System.Data.DbType.Decimal, NullableData.DbNullify(this.MIVEuro));
                        database.AddInParameter(updateCommand, "@UOM", System.Data.DbType.Int16, NullableData.DbNullify(this.UOM));
                        database.AddInParameter(updateCommand, "@MaxWeight", System.Data.DbType.Decimal, NullableData.DbNullify(this.MaxWeight));
                        database.AddInParameter(updateCommand, "@MaxMetricWeight", System.Data.DbType.Decimal, NullableData.DbNullify(this.MaxMetricWeight));
                        database.AddInParameter(updateCommand, "@EUMember", System.Data.DbType.Int16, NullableData.DbNullify(this.EUMember));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_UpsOrigin (CountryCode, CountryName, CurrencyName, CurrencyCode, EuroAllowed, MIVDollar, MIVEuro, UOM, MaxWeight, MaxMetricWeight, EUMember)");
                    insertQuery.Append(" VALUES (@CountryCode, @CountryName, @CurrencyName, @CurrencyCode, @EuroAllowed, @MIVDollar, @MIVEuro, @UOM, @MaxWeight, @MaxMetricWeight, @EUMember)");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                        database.AddInParameter(insertCommand, "@CountryName", System.Data.DbType.String, NullableData.DbNullify(this.CountryName));
                        database.AddInParameter(insertCommand, "@CurrencyName", System.Data.DbType.String, NullableData.DbNullify(this.CurrencyName));
                        database.AddInParameter(insertCommand, "@CurrencyCode", System.Data.DbType.String, NullableData.DbNullify(this.CurrencyCode));
                        database.AddInParameter(insertCommand, "@EuroAllowed", System.Data.DbType.Int16, NullableData.DbNullify(this.EuroAllowed));
                        database.AddInParameter(insertCommand, "@MIVDollar", System.Data.DbType.Decimal, NullableData.DbNullify(this.MIVDollar));
                        database.AddInParameter(insertCommand, "@MIVEuro", System.Data.DbType.Decimal, NullableData.DbNullify(this.MIVEuro));
                        database.AddInParameter(insertCommand, "@UOM", System.Data.DbType.Int16, NullableData.DbNullify(this.UOM));
                        database.AddInParameter(insertCommand, "@MaxWeight", System.Data.DbType.Decimal, NullableData.DbNullify(this.MaxWeight));
                        database.AddInParameter(insertCommand, "@MaxMetricWeight", System.Data.DbType.Decimal, NullableData.DbNullify(this.MaxMetricWeight));
                        database.AddInParameter(insertCommand, "@EUMember", System.Data.DbType.Int16, NullableData.DbNullify(this.EUMember));
                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
