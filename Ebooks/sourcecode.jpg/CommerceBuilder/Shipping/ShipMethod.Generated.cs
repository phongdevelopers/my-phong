//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Marketing;
using CommerceBuilder.Orders;
using CommerceBuilder.Shipping;
using CommerceBuilder.Stores;
using CommerceBuilder.Taxes;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Shipping
{
    /// <summary>
    /// This class represents a ShipMethod object in the database.
    /// </summary>
    public partial class ShipMethod : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ShipMethod() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="shipMethodId">Value of ShipMethodId.</param>
        /// </summary>
        public ShipMethod(Int32 shipMethodId)
        {
            this.ShipMethodId = shipMethodId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ShipMethodId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "ShipMethodTypeId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "Surcharge");
          columnNames.Add(prefix + "ShipGatewayId");
          columnNames.Add(prefix + "ServiceCode");
          columnNames.Add(prefix + "MinPurchase");
          columnNames.Add(prefix + "SurchargeIsVisible");
          columnNames.Add(prefix + "SurchargeIsPercent");
          columnNames.Add(prefix + "TaxCodeId");
          columnNames.Add(prefix + "SurchargeTaxCodeId");
          columnNames.Add(prefix + "OrderBy");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given ShipMethod object from the given database data reader.
        /// </summary>
        /// <param name="shipMethod">The ShipMethod object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(ShipMethod shipMethod, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            shipMethod.ShipMethodId = dr.GetInt32(0);
            shipMethod.StoreId = dr.GetInt32(1);
            shipMethod.ShipMethodTypeId = dr.GetInt16(2);
            shipMethod.Name = dr.GetString(3);
            shipMethod.Surcharge = dr.GetDecimal(4);
            shipMethod.ShipGatewayId = NullableData.GetInt32(dr, 5);
            shipMethod.ServiceCode = NullableData.GetString(dr, 6);
            shipMethod.MinPurchase = dr.GetDecimal(7);
            shipMethod.SurchargeIsVisible = dr.GetBoolean(8);
            shipMethod.SurchargeIsPercent = NullableData.GetBoolean(dr, 9);
            shipMethod.TaxCodeId = NullableData.GetInt32(dr, 10);
            shipMethod.SurchargeTaxCodeId = NullableData.GetInt32(dr, 11);
            shipMethod.OrderBy = dr.GetInt16(12);
            shipMethod.IsDirty = false;
        }

#endregion

        private Int32 _ShipMethodId;
        private Int32 _StoreId;
        private Int16 _ShipMethodTypeId;
        private String _Name = string.Empty;
        private LSDecimal _Surcharge;
        private Int32 _ShipGatewayId;
        private String _ServiceCode = string.Empty;
        private LSDecimal _MinPurchase;
        private Boolean _SurchargeIsVisible;
        private Boolean _SurchargeIsPercent;
        private Int32 _TaxCodeId;
        private Int32 _SurchargeTaxCodeId;
        private Int16 _OrderBy = -1;
        private bool _IsDirty;

        /// <summary>
        /// ShipMethodId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 ShipMethodId
        {
            get { return this._ShipMethodId; }
            set
            {
                if (this._ShipMethodId != value)
                {
                    this._ShipMethodId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// ShipMethodTypeId
        /// </summary>
        public Int16 ShipMethodTypeId
        {
            get { return this._ShipMethodTypeId; }
            set
            {
                if (this._ShipMethodTypeId != value)
                {
                    this._ShipMethodTypeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Surcharge
        /// </summary>
        public LSDecimal Surcharge
        {
            get { return this._Surcharge; }
            set
            {
                if (this._Surcharge != value)
                {
                    this._Surcharge = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ShipGatewayId
        /// </summary>
        public Int32 ShipGatewayId
        {
            get { return this._ShipGatewayId; }
            set
            {
                if (this._ShipGatewayId != value)
                {
                    this._ShipGatewayId = value;
                    this.IsDirty = true;
                    this._ShipGateway = null;
                }
            }
        }

        /// <summary>
        /// ServiceCode
        /// </summary>
        public String ServiceCode
        {
            get { return this._ServiceCode; }
            set
            {
                if (this._ServiceCode != value)
                {
                    this._ServiceCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MinPurchase
        /// </summary>
        public LSDecimal MinPurchase
        {
            get { return this._MinPurchase; }
            set
            {
                if (this._MinPurchase != value)
                {
                    this._MinPurchase = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SurchargeIsVisible
        /// </summary>
        public Boolean SurchargeIsVisible
        {
            get { return this._SurchargeIsVisible; }
            set
            {
                if (this._SurchargeIsVisible != value)
                {
                    this._SurchargeIsVisible = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SurchargeIsPercent
        /// </summary>
        public Boolean SurchargeIsPercent
        {
            get { return this._SurchargeIsPercent; }
            set
            {
                if (this._SurchargeIsPercent != value)
                {
                    this._SurchargeIsPercent = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxCodeId
        /// </summary>
        public Int32 TaxCodeId
        {
            get { return this._TaxCodeId; }
            set
            {
                if (this._TaxCodeId != value)
                {
                    this._TaxCodeId = value;
                    this.IsDirty = true;
                    this._TaxCode = null;
                }
            }
        }

        /// <summary>
        /// SurchargeTaxCodeId
        /// </summary>
        public Int32 SurchargeTaxCodeId
        {
            get { return this._SurchargeTaxCodeId; }
            set
            {
                if (this._SurchargeTaxCodeId != value)
                {
                    this._SurchargeTaxCodeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderBy
        /// </summary>
        public Int16 OrderBy
        {
            get { return this._OrderBy; }
            set
            {
                if (this._OrderBy != value)
                {
                    this._OrderBy = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this ShipMethod object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.BasketShipmentsLoaded && this.BasketShipments.IsDirty) return true;
                if (this.CouponShipMethodsLoaded && this.CouponShipMethods.IsDirty) return true;
                if (this.OrderShipmentsLoaded && this.OrderShipments.IsDirty) return true;
                if (this.ShipMethodGroupsLoaded && this.ShipMethodGroups.IsDirty) return true;
                if (this.ShipMethodShipZonesLoaded && this.ShipMethodShipZones.IsDirty) return true;
                if (this.ShipMethodWarehousesLoaded && this.ShipMethodWarehouses.IsDirty) return true;
                if (this.ShipRateMatricesLoaded && this.ShipRateMatrices.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this ShipMethod are properly associated with this ShipMethod object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.BasketShipmentsLoaded) { foreach (BasketShipment basketShipment in this.BasketShipments) { basketShipment.ShipMethodId = this.ShipMethodId; } }
            if (this.CouponShipMethodsLoaded) { foreach (CouponShipMethod couponShipMethod in this.CouponShipMethods) { couponShipMethod.ShipMethodId = this.ShipMethodId; } }
            if (this.OrderShipmentsLoaded) { foreach (OrderShipment orderShipment in this.OrderShipments) { orderShipment.ShipMethodId = this.ShipMethodId; } }
            if (this.ShipMethodGroupsLoaded) { foreach (ShipMethodGroup shipMethodGroup in this.ShipMethodGroups) { shipMethodGroup.ShipMethodId = this.ShipMethodId; } }
            if (this.ShipMethodShipZonesLoaded) { foreach (ShipMethodShipZone shipMethodShipZone in this.ShipMethodShipZones) { shipMethodShipZone.ShipMethodId = this.ShipMethodId; } }
            if (this.ShipMethodWarehousesLoaded) { foreach (ShipMethodWarehouse shipMethodWarehouse in this.ShipMethodWarehouses) { shipMethodWarehouse.ShipMethodId = this.ShipMethodId; } }
            if (this.ShipRateMatricesLoaded) { foreach (ShipRateMatrix shipRateMatrix in this.ShipRateMatrices) { shipRateMatrix.ShipMethodId = this.ShipMethodId; } }
        }

#region Parents
        private ShipGateway _ShipGateway;
        private Store _Store;
        private TaxCode _TaxCode;

        /// <summary>
        /// The ShipGateway object that this ShipMethod object is associated with
        /// </summary>
        public ShipGateway ShipGateway
        {
            get
            {
                if (!this.ShipGatewayLoaded)
                {
                    this._ShipGateway = ShipGatewayDataSource.Load(this.ShipGatewayId);
                }
                return this._ShipGateway;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipGatewayLoaded { get { return ((this._ShipGateway != null) && (this._ShipGateway.ShipGatewayId == this.ShipGatewayId)); } }

        /// <summary>
        /// The Store object that this ShipMethod object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

        /// <summary>
        /// The TaxCode object that this ShipMethod object is associated with
        /// </summary>
        public TaxCode TaxCode
        {
            get
            {
                if (!this.TaxCodeLoaded)
                {
                    this._TaxCode = TaxCodeDataSource.Load(this.TaxCodeId);
                }
                return this._TaxCode;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxCodeLoaded { get { return ((this._TaxCode != null) && (this._TaxCode.TaxCodeId == this.TaxCodeId)); } }

#endregion

#region Children
        private BasketShipmentCollection _BasketShipments;
        private OrderShipmentCollection _OrderShipments;
        private ShipRateMatrixCollection _ShipRateMatrices;

        /// <summary>
        /// A collection of BasketShipment objects associated with this ShipMethod object.
        /// </summary>
        public BasketShipmentCollection BasketShipments
        {
            get
            {
                if (!this.BasketShipmentsLoaded)
                {
                    this._BasketShipments = BasketShipmentDataSource.LoadForShipMethod(this.ShipMethodId);
                }
                return this._BasketShipments;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketShipmentsLoaded { get { return (this._BasketShipments != null); } }

        /// <summary>
        /// A collection of OrderShipment objects associated with this ShipMethod object.
        /// </summary>
        public OrderShipmentCollection OrderShipments
        {
            get
            {
                if (!this.OrderShipmentsLoaded)
                {
                    this._OrderShipments = OrderShipmentDataSource.LoadForShipMethod(this.ShipMethodId);
                }
                return this._OrderShipments;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderShipmentsLoaded { get { return (this._OrderShipments != null); } }

        /// <summary>
        /// A collection of ShipRateMatrix objects associated with this ShipMethod object.
        /// </summary>
        public ShipRateMatrixCollection ShipRateMatrices
        {
            get
            {
                if (!this.ShipRateMatricesLoaded)
                {
                    this._ShipRateMatrices = ShipRateMatrixDataSource.LoadForShipMethod(this.ShipMethodId);
                }
                return this._ShipRateMatrices;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipRateMatricesLoaded { get { return (this._ShipRateMatrices != null); } }

#endregion

#region Associations
        private CouponShipMethodCollection _CouponShipMethods;
        private ShipMethodGroupCollection _ShipMethodGroups;
        private ShipMethodShipZoneCollection _ShipMethodShipZones;
        private ShipMethodWarehouseCollection _ShipMethodWarehouses;

        /// <summary>
        /// A collection of CouponShipMethod objects associated with this ShipMethod object.
        /// </summary>
        public CouponShipMethodCollection CouponShipMethods
        {
            get
            {
                if (!this.CouponShipMethodsLoaded)
                {
                    this._CouponShipMethods = CouponShipMethodDataSource.LoadForShipMethod(this.ShipMethodId);
                }
                return this._CouponShipMethods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CouponShipMethodsLoaded { get { return (this._CouponShipMethods != null); } }
        /// <summary>
        /// A collection of ShipMethodGroup objects associated with this ShipMethod object.
        /// </summary>
        public ShipMethodGroupCollection ShipMethodGroups
        {
            get
            {
                if (!this.ShipMethodGroupsLoaded)
                {
                    this._ShipMethodGroups = ShipMethodGroupDataSource.LoadForShipMethod(this.ShipMethodId);
                }
                return this._ShipMethodGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodGroupsLoaded { get { return (this._ShipMethodGroups != null); } }
        /// <summary>
        /// A collection of ShipMethodShipZone objects associated with this ShipMethod object.
        /// </summary>
        public ShipMethodShipZoneCollection ShipMethodShipZones
        {
            get
            {
                if (!this.ShipMethodShipZonesLoaded)
                {
                    this._ShipMethodShipZones = ShipMethodShipZoneDataSource.LoadForShipMethod(this.ShipMethodId);
                }
                return this._ShipMethodShipZones;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodShipZonesLoaded { get { return (this._ShipMethodShipZones != null); } }
        /// <summary>
        /// A collection of ShipMethodWarehouse objects associated with this ShipMethod object.
        /// </summary>
        public ShipMethodWarehouseCollection ShipMethodWarehouses
        {
            get
            {
                if (!this.ShipMethodWarehousesLoaded)
                {
                    this._ShipMethodWarehouses = ShipMethodWarehouseDataSource.LoadForShipMethod(this.ShipMethodId);
                }
                return this._ShipMethodWarehouses;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodWarehousesLoaded { get { return (this._ShipMethodWarehouses != null); } }
#endregion

        /// <summary>
        /// Deletes this ShipMethod object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_ShipMethods");
            deleteQuery.Append(" WHERE ShipMethodId = @ShipMethodId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this ShipMethod object from the database for the given primary key.
        /// </summary>
        /// <param name="shipMethodId">Value of ShipMethodId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 shipMethodId)
        {
            bool result = false;
            this.ShipMethodId = shipMethodId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ShipMethods");
            selectQuery.Append(" WHERE ShipMethodId = @shipMethodId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipMethodId", System.Data.DbType.Int32, shipMethodId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this ShipMethod object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.ShipMethodId == 0) recordExists = false;

                if (this.OrderBy < 0) this.OrderBy = ShipMethodDataSource.GetNextOrderBy();

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_ShipMethods");
                    selectQuery.Append(" WHERE ShipMethodId = @ShipMethodId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_ShipMethods SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", ShipMethodTypeId = @ShipMethodTypeId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", Surcharge = @Surcharge");
                    updateQuery.Append(", ShipGatewayId = @ShipGatewayId");
                    updateQuery.Append(", ServiceCode = @ServiceCode");
                    updateQuery.Append(", MinPurchase = @MinPurchase");
                    updateQuery.Append(", SurchargeIsVisible = @SurchargeIsVisible");
                    updateQuery.Append(", SurchargeIsPercent = @SurchargeIsPercent");
                    updateQuery.Append(", TaxCodeId = @TaxCodeId");
                    updateQuery.Append(", SurchargeTaxCodeId = @SurchargeTaxCodeId");
                    updateQuery.Append(", OrderBy = @OrderBy");
                    updateQuery.Append(" WHERE ShipMethodId = @ShipMethodId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@ShipMethodTypeId", System.Data.DbType.Int16, this.ShipMethodTypeId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@Surcharge", System.Data.DbType.Decimal, this.Surcharge);
                        database.AddInParameter(updateCommand, "@ShipGatewayId", System.Data.DbType.Int32, NullableData.DbNullify(this.ShipGatewayId));
                        database.AddInParameter(updateCommand, "@ServiceCode", System.Data.DbType.String, NullableData.DbNullify(this.ServiceCode));
                        database.AddInParameter(updateCommand, "@MinPurchase", System.Data.DbType.Decimal, this.MinPurchase);
                        database.AddInParameter(updateCommand, "@SurchargeIsVisible", System.Data.DbType.Boolean, this.SurchargeIsVisible);
                        database.AddInParameter(updateCommand, "@SurchargeIsPercent", System.Data.DbType.Boolean, NullableData.DbNullify(this.SurchargeIsPercent));
                        database.AddInParameter(updateCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(updateCommand, "@SurchargeTaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.SurchargeTaxCodeId));
                        database.AddInParameter(updateCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_ShipMethods (StoreId, ShipMethodTypeId, Name, Surcharge, ShipGatewayId, ServiceCode, MinPurchase, SurchargeIsVisible, SurchargeIsPercent, TaxCodeId, SurchargeTaxCodeId, OrderBy)");
                    insertQuery.Append(" VALUES (@StoreId, @ShipMethodTypeId, @Name, @Surcharge, @ShipGatewayId, @ServiceCode, @MinPurchase, @SurchargeIsVisible, @SurchargeIsPercent, @TaxCodeId, @SurchargeTaxCodeId, @OrderBy)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@ShipMethodTypeId", System.Data.DbType.Int16, this.ShipMethodTypeId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@Surcharge", System.Data.DbType.Decimal, this.Surcharge);
                        database.AddInParameter(insertCommand, "@ShipGatewayId", System.Data.DbType.Int32, NullableData.DbNullify(this.ShipGatewayId));
                        database.AddInParameter(insertCommand, "@ServiceCode", System.Data.DbType.String, NullableData.DbNullify(this.ServiceCode));
                        database.AddInParameter(insertCommand, "@MinPurchase", System.Data.DbType.Decimal, this.MinPurchase);
                        database.AddInParameter(insertCommand, "@SurchargeIsVisible", System.Data.DbType.Boolean, this.SurchargeIsVisible);
                        database.AddInParameter(insertCommand, "@SurchargeIsPercent", System.Data.DbType.Boolean, NullableData.DbNullify(this.SurchargeIsPercent));
                        database.AddInParameter(insertCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(insertCommand, "@SurchargeTaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.SurchargeTaxCodeId));
                        database.AddInParameter(insertCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._ShipMethodId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this ShipMethod object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.BasketShipmentsLoaded) this.BasketShipments.Save();
            if (this.CouponShipMethodsLoaded) this.CouponShipMethods.Save();
            if (this.OrderShipmentsLoaded) this.OrderShipments.Save();
            if (this.ShipMethodGroupsLoaded) this.ShipMethodGroups.Save();
            if (this.ShipMethodShipZonesLoaded) this.ShipMethodShipZones.Save();
            if (this.ShipMethodWarehousesLoaded) this.ShipMethodWarehouses.Save();
            if (this.ShipRateMatricesLoaded) this.ShipRateMatrices.Save();
        }

     }
}
