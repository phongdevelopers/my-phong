//CUSTOMIZED TO MAKE USEPCPM READONLY
//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Shipping;
using CommerceBuilder.Stores;
using CommerceBuilder.Taxes;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Shipping
{
    /// <summary>
    /// This class represents a ShipZone object in the database.
    /// </summary>
    public partial class ShipZone : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ShipZone() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="shipZoneId">Value of ShipZoneId.</param>
        /// </summary>
        public ShipZone(Int32 shipZoneId)
        {
            this.ShipZoneId = shipZoneId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ShipZoneId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "CountryRuleId");
          columnNames.Add(prefix + "ProvinceRuleId");
          columnNames.Add(prefix + "PostalCodeFilter");
          columnNames.Add(prefix + "ExcludePostalCodeFilter");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given ShipZone object from the given database data reader.
        /// </summary>
        /// <param name="shipZone">The ShipZone object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(ShipZone shipZone, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            shipZone.ShipZoneId = dr.GetInt32(0);
            shipZone.StoreId = dr.GetInt32(1);
            shipZone.Name = dr.GetString(2);
            shipZone.CountryRuleId = dr.GetByte(3);
            shipZone.ProvinceRuleId = dr.GetByte(4);
            shipZone.PostalCodeFilter = NullableData.GetString(dr, 5);
            shipZone.ExcludePostalCodeFilter = NullableData.GetString(dr, 6);
            shipZone.IsDirty = false;
        }

#endregion

        private Int32 _ShipZoneId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private Byte _CountryRuleId;
        private Byte _ProvinceRuleId;
        private String _PostalCodeFilter = string.Empty;
        private String _ExcludePostalCodeFilter = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// ShipZoneId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 ShipZoneId
        {
            get { return this._ShipZoneId; }
            set
            {
                if (this._ShipZoneId != value)
                {
                    this._ShipZoneId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CountryRuleId
        /// </summary>
        public Byte CountryRuleId
        {
            get { return this._CountryRuleId; }
            set
            {
                if (this._CountryRuleId != value)
                {
                    this._CountryRuleId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ProvinceRuleId
        /// </summary>
        public Byte ProvinceRuleId
        {
            get { return this._ProvinceRuleId; }
            set
            {
                if (this._ProvinceRuleId != value)
                {
                    this._ProvinceRuleId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PostalCodeFilter
        /// </summary>
        public String PostalCodeFilter
        {
            get { return this._PostalCodeFilter; }
            set
            {
                if (this._PostalCodeFilter != value)
                {
                    this._PostalCodeFilter = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ExcludePostalCodeFilter
        /// </summary>
        public String ExcludePostalCodeFilter
        {
            get { return this._ExcludePostalCodeFilter; }
            set
            {
                if (this._ExcludePostalCodeFilter != value)
                {
                    this._ExcludePostalCodeFilter = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Gets a value indicating whether the tax rule requires Postal Code Patterm Matching (PCMP)
        /// when determining whether an address falls within the zone.
        /// </summary>
        /// <remarks>
        /// If true, postal code must be matched with regular expression logic.  If false, postal 
        /// code filtering can take place via SQL where filter.
        /// </remarks>
        public Boolean UsePCPM
        {
            get
            {
                if (PostalCodeFilter.Contains(",")
                    || PostalCodeFilter.Contains("*")
                    || PostalCodeFilter.StartsWith("@")) return true;
                if (ExcludePostalCodeFilter.Contains(",")
                    || ExcludePostalCodeFilter.Contains("*")
                    || ExcludePostalCodeFilter.StartsWith("@")) return true;
                return false;
            }
        }

        /// <summary>
        /// Indicates whether this ShipZone object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.ShipMethodShipZonesLoaded && this.ShipMethodShipZones.IsDirty) return true;
                if (this.ShipZoneCountriesLoaded && this.ShipZoneCountries.IsDirty) return true;
                if (this.ShipZoneProvincesLoaded && this.ShipZoneProvinces.IsDirty) return true;
                if (this.TaxRuleShipZonesLoaded && this.TaxRuleShipZones.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this ShipZone are properly associated with this ShipZone object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.ShipMethodShipZonesLoaded) { foreach (ShipMethodShipZone shipMethodShipZone in this.ShipMethodShipZones) { shipMethodShipZone.ShipZoneId = this.ShipZoneId; } }
            if (this.ShipZoneCountriesLoaded) { foreach (ShipZoneCountry shipZoneCountry in this.ShipZoneCountries) { shipZoneCountry.ShipZoneId = this.ShipZoneId; } }
            if (this.ShipZoneProvincesLoaded) { foreach (ShipZoneProvince shipZoneProvince in this.ShipZoneProvinces) { shipZoneProvince.ShipZoneId = this.ShipZoneId; } }
            if (this.TaxRuleShipZonesLoaded) { foreach (TaxRuleShipZone taxRuleShipZone in this.TaxRuleShipZones) { taxRuleShipZone.ShipZoneId = this.ShipZoneId; } }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this ShipZone object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Associations
        private ShipMethodShipZoneCollection _ShipMethodShipZones;
        private ShipZoneCountryCollection _ShipZoneCountries;
        private ShipZoneProvinceCollection _ShipZoneProvinces;
        private TaxRuleShipZoneCollection _TaxRuleShipZones;

        /// <summary>
        /// A collection of ShipMethodShipZone objects associated with this ShipZone object.
        /// </summary>
        public ShipMethodShipZoneCollection ShipMethodShipZones
        {
            get
            {
                if (!this.ShipMethodShipZonesLoaded)
                {
                    this._ShipMethodShipZones = ShipMethodShipZoneDataSource.LoadForShipZone(this.ShipZoneId);
                }
                return this._ShipMethodShipZones;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodShipZonesLoaded { get { return (this._ShipMethodShipZones != null); } }
        /// <summary>
        /// A collection of ShipZoneCountry objects associated with this ShipZone object.
        /// </summary>
        public ShipZoneCountryCollection ShipZoneCountries
        {
            get
            {
                if (!this.ShipZoneCountriesLoaded)
                {
                    this._ShipZoneCountries = ShipZoneCountryDataSource.LoadForShipZone(this.ShipZoneId);
                }
                return this._ShipZoneCountries;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipZoneCountriesLoaded { get { return (this._ShipZoneCountries != null); } }
        /// <summary>
        /// A collection of ShipZoneProvince objects associated with this ShipZone object.
        /// </summary>
        public ShipZoneProvinceCollection ShipZoneProvinces
        {
            get
            {
                if (!this.ShipZoneProvincesLoaded)
                {
                    this._ShipZoneProvinces = ShipZoneProvinceDataSource.LoadForShipZone(this.ShipZoneId);
                }
                return this._ShipZoneProvinces;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipZoneProvincesLoaded { get { return (this._ShipZoneProvinces != null); } }
        /// <summary>
        /// A collection of TaxRuleShipZone objects associated with this ShipZone object.
        /// </summary>
        public TaxRuleShipZoneCollection TaxRuleShipZones
        {
            get
            {
                if (!this.TaxRuleShipZonesLoaded)
                {
                    this._TaxRuleShipZones = TaxRuleShipZoneDataSource.LoadForShipZone(this.ShipZoneId);
                }
                return this._TaxRuleShipZones;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxRuleShipZonesLoaded { get { return (this._TaxRuleShipZones != null); } }
#endregion

        /// <summary>
        /// Deletes this ShipZone object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_ShipZones");
            deleteQuery.Append(" WHERE ShipZoneId = @ShipZoneId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ShipZoneId", System.Data.DbType.Int32, this.ShipZoneId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this ShipZone object from the database for the given primary key.
        /// </summary>
        /// <param name="shipZoneId">Value of ShipZoneId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 shipZoneId)
        {
            bool result = false;
            this.ShipZoneId = shipZoneId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ShipZones");
            selectQuery.Append(" WHERE ShipZoneId = @shipZoneId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipZoneId", System.Data.DbType.Int32, shipZoneId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this ShipZone object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.ShipZoneId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_ShipZones");
                    selectQuery.Append(" WHERE ShipZoneId = @ShipZoneId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ShipZoneId", System.Data.DbType.Int32, this.ShipZoneId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_ShipZones SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", CountryRuleId = @CountryRuleId");
                    updateQuery.Append(", ProvinceRuleId = @ProvinceRuleId");
                    updateQuery.Append(", PostalCodeFilter = @PostalCodeFilter");
                    updateQuery.Append(", ExcludePostalCodeFilter = @ExcludePostalCodeFilter");
                    updateQuery.Append(", UsePCPM = @UsePCPM");
                    updateQuery.Append(" WHERE ShipZoneId = @ShipZoneId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@ShipZoneId", System.Data.DbType.Int32, this.ShipZoneId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@CountryRuleId", System.Data.DbType.Byte, this.CountryRuleId);
                        database.AddInParameter(updateCommand, "@ProvinceRuleId", System.Data.DbType.Byte, this.ProvinceRuleId);
                        database.AddInParameter(updateCommand, "@PostalCodeFilter", System.Data.DbType.String, NullableData.DbNullify(this.PostalCodeFilter));
                        database.AddInParameter(updateCommand, "@ExcludePostalCodeFilter", System.Data.DbType.String, NullableData.DbNullify(this.ExcludePostalCodeFilter));
                        database.AddInParameter(updateCommand, "@UsePCPM", System.Data.DbType.Boolean, this.UsePCPM);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_ShipZones (StoreId, Name, CountryRuleId, ProvinceRuleId, PostalCodeFilter, ExcludePostalCodeFilter, UsePCPM)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @CountryRuleId, @ProvinceRuleId, @PostalCodeFilter, @ExcludePostalCodeFilter, @UsePCPM)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ShipZoneId", System.Data.DbType.Int32, this.ShipZoneId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@CountryRuleId", System.Data.DbType.Byte, this.CountryRuleId);
                        database.AddInParameter(insertCommand, "@ProvinceRuleId", System.Data.DbType.Byte, this.ProvinceRuleId);
                        database.AddInParameter(insertCommand, "@PostalCodeFilter", System.Data.DbType.String, NullableData.DbNullify(this.PostalCodeFilter));
                        database.AddInParameter(insertCommand, "@ExcludePostalCodeFilter", System.Data.DbType.String, NullableData.DbNullify(this.ExcludePostalCodeFilter));
                        database.AddInParameter(insertCommand, "@UsePCPM", System.Data.DbType.Boolean, this.UsePCPM);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._ShipZoneId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this ShipZone object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.ShipMethodShipZonesLoaded) this.ShipMethodShipZones.Save();
            if (this.ShipZoneCountriesLoaded) this.ShipZoneCountries.Save();
            if (this.ShipZoneProvincesLoaded) this.ShipZoneProvinces.Save();
            if (this.TaxRuleShipZonesLoaded) this.TaxRuleShipZones.Save();
        }

     }
}
