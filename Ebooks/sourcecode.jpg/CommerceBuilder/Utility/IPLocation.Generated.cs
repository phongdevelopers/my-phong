//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Utility
{
    /// <summary>
    /// This class represents a IPLocation object in the database.
    /// </summary>
    public partial class IPLocation : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public IPLocation() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="iPRangeStart">Value of IPRangeStart.</param>
        /// <param name="iPRangeEnd">Value of IPRangeEnd.</param>
        /// </summary>
        public IPLocation(Int64 iPRangeStart, Int64 iPRangeEnd)
        {
            this.IPRangeStart = iPRangeStart;
            this.IPRangeEnd = iPRangeEnd;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "IPRangeStart");
          columnNames.Add(prefix + "IPRangeEnd");
          columnNames.Add(prefix + "CountryCode");
          columnNames.Add(prefix + "Region");
          columnNames.Add(prefix + "City");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given IPLocation object from the given database data reader.
        /// </summary>
        /// <param name="iPLocation">The IPLocation object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(IPLocation iPLocation, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            iPLocation.IPRangeStart = dr.GetInt64(0);
            iPLocation.IPRangeEnd = dr.GetInt64(1);
            iPLocation.CountryCode = dr.GetString(2);
            iPLocation.Region = NullableData.GetString(dr, 3);
            iPLocation.City = NullableData.GetString(dr, 4);
            iPLocation.IsDirty = false;
        }

#endregion

        private Int64 _IPRangeStart;
        private Int64 _IPRangeEnd;
        private String _CountryCode = string.Empty;
        private String _Region = string.Empty;
        private String _City = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// IPRangeStart
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int64 IPRangeStart
        {
            get { return this._IPRangeStart; }
            set
            {
                if (this._IPRangeStart != value)
                {
                    this._IPRangeStart = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IPRangeEnd
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int64 IPRangeEnd
        {
            get { return this._IPRangeEnd; }
            set
            {
                if (this._IPRangeEnd != value)
                {
                    this._IPRangeEnd = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CountryCode
        /// </summary>
        public String CountryCode
        {
            get { return this._CountryCode; }
            set
            {
                if (this._CountryCode != value)
                {
                    this._CountryCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Region
        /// </summary>
        public String Region
        {
            get { return this._Region; }
            set
            {
                if (this._Region != value)
                {
                    this._Region = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// City
        /// </summary>
        public String City
        {
            get { return this._City; }
            set
            {
                if (this._City != value)
                {
                    this._City = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this IPLocation object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Deletes this IPLocation object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_IPLocations");
            deleteQuery.Append(" WHERE IPRangeStart = @IPRangeStart AND IPRangeEnd = @IPRangeEnd");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@IPRangeStart", System.Data.DbType.Int64, this.IPRangeStart);
                database.AddInParameter(deleteCommand, "@IPRangeEnd", System.Data.DbType.Int64, this.IPRangeEnd);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this IPLocation object from the database for the given primary key.
        /// </summary>
        /// <param name="iPRangeStart">Value of IPRangeStart of the object to load.</param>
        /// <param name="iPRangeEnd">Value of IPRangeEnd of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int64 iPRangeStart, Int64 iPRangeEnd)
        {
            bool result = false;
            this.IPRangeStart = iPRangeStart;
            this.IPRangeEnd = iPRangeEnd;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_IPLocations");
            selectQuery.Append(" WHERE IPRangeStart = @iPRangeStart AND IPRangeEnd = @iPRangeEnd");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@iPRangeStart", System.Data.DbType.Int64, iPRangeStart);
            database.AddInParameter(selectCommand, "@iPRangeEnd", System.Data.DbType.Int64, iPRangeEnd);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this IPLocation object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_IPLocations");
                    selectQuery.Append(" WHERE IPRangeStart = @IPRangeStart AND IPRangeEnd = @IPRangeEnd");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@IPRangeStart", System.Data.DbType.Int64, this.IPRangeStart);
                        database.AddInParameter(selectCommand, "@IPRangeEnd", System.Data.DbType.Int64, this.IPRangeEnd);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_IPLocations SET ");
                    updateQuery.Append("CountryCode = @CountryCode");
                    updateQuery.Append(", Region = @Region");
                    updateQuery.Append(", City = @City");
                    updateQuery.Append(" WHERE IPRangeStart = @IPRangeStart AND IPRangeEnd = @IPRangeEnd");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@IPRangeStart", System.Data.DbType.Int64, this.IPRangeStart);
                        database.AddInParameter(updateCommand, "@IPRangeEnd", System.Data.DbType.Int64, this.IPRangeEnd);
                        database.AddInParameter(updateCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                        database.AddInParameter(updateCommand, "@Region", System.Data.DbType.String, NullableData.DbNullify(this.Region));
                        database.AddInParameter(updateCommand, "@City", System.Data.DbType.String, NullableData.DbNullify(this.City));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_IPLocations (IPRangeStart, IPRangeEnd, CountryCode, Region, City)");
                    insertQuery.Append(" VALUES (@IPRangeStart, @IPRangeEnd, @CountryCode, @Region, @City)");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@IPRangeStart", System.Data.DbType.Int64, this.IPRangeStart);
                        database.AddInParameter(insertCommand, "@IPRangeEnd", System.Data.DbType.Int64, this.IPRangeEnd);
                        database.AddInParameter(insertCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                        database.AddInParameter(insertCommand, "@Region", System.Data.DbType.String, NullableData.DbNullify(this.Region));
                        database.AddInParameter(insertCommand, "@City", System.Data.DbType.String, NullableData.DbNullify(this.City));
                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
