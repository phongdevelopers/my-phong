//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Utility;

namespace CommerceBuilder.DigitalDelivery
{
    /// <summary>
    /// This class represents a Download object in the database.
    /// </summary>
    public partial class Download : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Download() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="downloadId">Value of DownloadId.</param>
        /// </summary>
        public Download(Int32 downloadId)
        {
            this.DownloadId = downloadId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "DownloadId");
          columnNames.Add(prefix + "OrderItemDigitalGoodId");
          columnNames.Add(prefix + "DownloadDate");
          columnNames.Add(prefix + "RemoteAddr");
          columnNames.Add(prefix + "UserAgent");
          columnNames.Add(prefix + "Referrer");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Download object from the given database data reader.
        /// </summary>
        /// <param name="download">The Download object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Download download, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            download.DownloadId = dr.GetInt32(0);
            download.OrderItemDigitalGoodId = dr.GetInt32(1);
            download.DownloadDate = LocaleHelper.ToLocalTime(dr.GetDateTime(2));
            download.RemoteAddr = dr.GetString(3);
            download.UserAgent = dr.GetString(4);
            download.Referrer = dr.GetString(5);
            download.IsDirty = false;
        }

#endregion

        private Int32 _DownloadId;
        private Int32 _OrderItemDigitalGoodId;
        private DateTime _DownloadDate;
        private String _RemoteAddr = string.Empty;
        private String _UserAgent = string.Empty;
        private String _Referrer = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// DownloadId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 DownloadId
        {
            get { return this._DownloadId; }
            set
            {
                if (this._DownloadId != value)
                {
                    this._DownloadId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderItemDigitalGoodId
        /// </summary>
        public Int32 OrderItemDigitalGoodId
        {
            get { return this._OrderItemDigitalGoodId; }
            set
            {
                if (this._OrderItemDigitalGoodId != value)
                {
                    this._OrderItemDigitalGoodId = value;
                    this.IsDirty = true;
                    this._OrderItemDigitalGood = null;
                }
            }
        }

        /// <summary>
        /// DownloadDate
        /// </summary>
        public DateTime DownloadDate
        {
            get { return this._DownloadDate; }
            set
            {
                if (this._DownloadDate != value)
                {
                    this._DownloadDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// RemoteAddr
        /// </summary>
        public String RemoteAddr
        {
            get { return this._RemoteAddr; }
            set
            {
                if (this._RemoteAddr != value)
                {
                    this._RemoteAddr = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UserAgent
        /// </summary>
        public String UserAgent
        {
            get { return this._UserAgent; }
            set
            {
                if (this._UserAgent != value)
                {
                    this._UserAgent = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Referrer
        /// </summary>
        public String Referrer
        {
            get { return this._Referrer; }
            set
            {
                if (this._Referrer != value)
                {
                    this._Referrer = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Download object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private OrderItemDigitalGood _OrderItemDigitalGood;

        /// <summary>
        /// The OrderItemDigitalGood object that this Download object is associated with
        /// </summary>
        public OrderItemDigitalGood OrderItemDigitalGood
        {
            get
            {
                if (!this.OrderItemDigitalGoodLoaded)
                {
                    this._OrderItemDigitalGood = OrderItemDigitalGoodDataSource.Load(this.OrderItemDigitalGoodId);
                }
                return this._OrderItemDigitalGood;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemDigitalGoodLoaded { get { return ((this._OrderItemDigitalGood != null) && (this._OrderItemDigitalGood.OrderItemDigitalGoodId == this.OrderItemDigitalGoodId)); } }

#endregion

        /// <summary>
        /// Deletes this Download object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Downloads");
            deleteQuery.Append(" WHERE DownloadId = @DownloadId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@DownloadId", System.Data.DbType.Int32, this.DownloadId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Download object from the database for the given primary key.
        /// </summary>
        /// <param name="downloadId">Value of DownloadId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 downloadId)
        {
            bool result = false;
            this.DownloadId = downloadId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Downloads");
            selectQuery.Append(" WHERE DownloadId = @downloadId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@downloadId", System.Data.DbType.Int32, downloadId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Download object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.DownloadId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.DownloadDate == System.DateTime.MinValue) this.DownloadDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Downloads");
                    selectQuery.Append(" WHERE DownloadId = @DownloadId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@DownloadId", System.Data.DbType.Int32, this.DownloadId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Downloads SET ");
                    updateQuery.Append("OrderItemDigitalGoodId = @OrderItemDigitalGoodId");
                    updateQuery.Append(", DownloadDate = @DownloadDate");
                    updateQuery.Append(", RemoteAddr = @RemoteAddr");
                    updateQuery.Append(", UserAgent = @UserAgent");
                    updateQuery.Append(", Referrer = @Referrer");
                    updateQuery.Append(" WHERE DownloadId = @DownloadId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@DownloadId", System.Data.DbType.Int32, this.DownloadId);
                        database.AddInParameter(updateCommand, "@OrderItemDigitalGoodId", System.Data.DbType.Int32, this.OrderItemDigitalGoodId);
                        database.AddInParameter(updateCommand, "@DownloadDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.DownloadDate));
                        database.AddInParameter(updateCommand, "@RemoteAddr", System.Data.DbType.String, this.RemoteAddr);
                        database.AddInParameter(updateCommand, "@UserAgent", System.Data.DbType.String, this.UserAgent);
                        database.AddInParameter(updateCommand, "@Referrer", System.Data.DbType.String, this.Referrer);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Downloads (OrderItemDigitalGoodId, DownloadDate, RemoteAddr, UserAgent, Referrer)");
                    insertQuery.Append(" VALUES (@OrderItemDigitalGoodId, @DownloadDate, @RemoteAddr, @UserAgent, @Referrer)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@DownloadId", System.Data.DbType.Int32, this.DownloadId);
                        database.AddInParameter(insertCommand, "@OrderItemDigitalGoodId", System.Data.DbType.Int32, this.OrderItemDigitalGoodId);
                        database.AddInParameter(insertCommand, "@DownloadDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.DownloadDate));
                        database.AddInParameter(insertCommand, "@RemoteAddr", System.Data.DbType.String, this.RemoteAddr);
                        database.AddInParameter(insertCommand, "@UserAgent", System.Data.DbType.String, this.UserAgent);
                        database.AddInParameter(insertCommand, "@Referrer", System.Data.DbType.String, this.Referrer);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._DownloadId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
