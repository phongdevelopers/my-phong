//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.DigitalDelivery
{
    /// <summary>
    /// DataSource class for DigitalGood objects
    /// </summary>
    public partial class DigitalGoodDataSource
    {
        /// <summary>
        /// Deletes a DigitalGood object from the database
        /// </summary>
        /// <param name="digitalGood">The DigitalGood object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(DigitalGood digitalGood)
        {
            return digitalGood.Delete();
        }

        /// <summary>
        /// Deletes a DigitalGood object with given id from the database
        /// </summary>
        /// <param name="digitalGoodId">Value of DigitalGoodId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 digitalGoodId)
        {
            DigitalGood digitalGood = new DigitalGood();
            if (digitalGood.Load(digitalGoodId)) return digitalGood.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a DigitalGood object to the database.
        /// </summary>
        /// <param name="digitalGood">The DigitalGood object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(DigitalGood digitalGood) { return digitalGood.Save(); }

        /// <summary>
        /// Loads a DigitalGood object for given Id from the database.
        /// </summary>
        /// <param name="digitalGoodId">Value of DigitalGoodId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded DigitalGood object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGood Load(Int32 digitalGoodId)
        {
            return DigitalGoodDataSource.Load(digitalGoodId, true);
        }

        /// <summary>
        /// Loads a DigitalGood object for given Id from the database.
        /// </summary>
        /// <param name="digitalGoodId">Value of DigitalGoodId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded DigitalGood object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGood Load(Int32 digitalGoodId, bool useCache)
        {
            if (digitalGoodId == 0) return null;
            DigitalGood digitalGood = null;
            string key = "DigitalGood_" + digitalGoodId.ToString();
            if (useCache)
            {
                digitalGood = ContextCache.GetObject(key) as DigitalGood;
                if (digitalGood != null) return digitalGood;
            }
            digitalGood = new DigitalGood();
            if (digitalGood.Load(digitalGoodId))
            {
                if (useCache) ContextCache.SetObject(key, digitalGood);
                return digitalGood;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of DigitalGood objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the DigitalGood objects that should be loaded.</param>
        /// <returns>The number of DigitalGood objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_DigitalGoods" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + DigitalGood.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_DigitalGoods");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            DigitalGoodCollection results = new DigitalGoodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        DigitalGood digitalGood = new DigitalGood();
                        DigitalGood.LoadDataReader(digitalGood, dr);
                        results.Add(digitalGood);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of DigitalGood objects for the given LicenseAgreementId in the database.
        /// <param name="licenseAgreementId">The given LicenseAgreementId</param>
        /// </summary>
        /// <returns>The Number of DigitalGood objects for the given LicenseAgreementId in the database.</returns>
        public static int CountForLicenseAgreement(Int32 licenseAgreementId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_DigitalGoods WHERE LicenseAgreementId = @licenseAgreementId");
            database.AddInParameter(selectCommand, "@licenseAgreementId", System.Data.DbType.Int32, NullableData.DbNullify(licenseAgreementId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given LicenseAgreementId from the database
        /// </summary>
        /// <param name="licenseAgreementId">The given LicenseAgreementId</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForLicenseAgreement(Int32 licenseAgreementId)
        {
            return LoadForLicenseAgreement(licenseAgreementId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given LicenseAgreementId from the database
        /// </summary>
        /// <param name="licenseAgreementId">The given LicenseAgreementId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForLicenseAgreement(Int32 licenseAgreementId, string sortExpression)
        {
            return LoadForLicenseAgreement(licenseAgreementId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given LicenseAgreementId from the database
        /// </summary>
        /// <param name="licenseAgreementId">The given LicenseAgreementId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForLicenseAgreement(Int32 licenseAgreementId, int maximumRows, int startRowIndex)
        {
            return LoadForLicenseAgreement(licenseAgreementId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given LicenseAgreementId from the database
        /// </summary>
        /// <param name="licenseAgreementId">The given LicenseAgreementId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForLicenseAgreement(Int32 licenseAgreementId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + DigitalGood.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_DigitalGoods");
            selectQuery.Append(" WHERE LicenseAgreementId = @licenseAgreementId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@licenseAgreementId", System.Data.DbType.Int32, NullableData.DbNullify(licenseAgreementId));
            //EXECUTE THE COMMAND
            DigitalGoodCollection results = new DigitalGoodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        DigitalGood digitalGood = new DigitalGood();
                        DigitalGood.LoadDataReader(digitalGood, dr);
                        results.Add(digitalGood);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of DigitalGood objects for the given ReadmeId in the database.
        /// <param name="readmeId">The given ReadmeId</param>
        /// </summary>
        /// <returns>The Number of DigitalGood objects for the given ReadmeId in the database.</returns>
        public static int CountForReadme(Int32 readmeId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_DigitalGoods WHERE ReadmeId = @readmeId");
            database.AddInParameter(selectCommand, "@readmeId", System.Data.DbType.Int32, NullableData.DbNullify(readmeId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given ReadmeId from the database
        /// </summary>
        /// <param name="readmeId">The given ReadmeId</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForReadme(Int32 readmeId)
        {
            return LoadForReadme(readmeId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given ReadmeId from the database
        /// </summary>
        /// <param name="readmeId">The given ReadmeId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForReadme(Int32 readmeId, string sortExpression)
        {
            return LoadForReadme(readmeId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given ReadmeId from the database
        /// </summary>
        /// <param name="readmeId">The given ReadmeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForReadme(Int32 readmeId, int maximumRows, int startRowIndex)
        {
            return LoadForReadme(readmeId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the given ReadmeId from the database
        /// </summary>
        /// <param name="readmeId">The given ReadmeId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForReadme(Int32 readmeId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + DigitalGood.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_DigitalGoods");
            selectQuery.Append(" WHERE ReadmeId = @readmeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@readmeId", System.Data.DbType.Int32, NullableData.DbNullify(readmeId));
            //EXECUTE THE COMMAND
            DigitalGoodCollection results = new DigitalGoodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        DigitalGood digitalGood = new DigitalGood();
                        DigitalGood.LoadDataReader(digitalGood, dr);
                        results.Add(digitalGood);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of DigitalGood objects for the current store.
        /// </summary>
        /// <returns>The Number of DigitalGood objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_DigitalGoods WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the current store from the database
        /// </summary>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of DigitalGood objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of DigitalGood objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static DigitalGoodCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + DigitalGood.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_DigitalGoods");
            selectQuery.Append(" WHERE StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            DigitalGoodCollection results = new DigitalGoodCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        DigitalGood digitalGood = new DigitalGood();
                        DigitalGood.LoadDataReader(digitalGood, dr);
                        results.Add(digitalGood);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given DigitalGood object to the database.
        /// </summary>
        /// <param name="digitalGood">The DigitalGood object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(DigitalGood digitalGood) { return digitalGood.Save(); }

    }
}
