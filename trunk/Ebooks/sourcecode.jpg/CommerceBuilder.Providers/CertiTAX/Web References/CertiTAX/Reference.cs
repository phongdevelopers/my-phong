//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace CommerceBuilder.Taxes.Providers.CCH.CertiTAX {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CertiCalcSoap", Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(MarshalByRefObject))]
    public partial class CertiCalc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AbandonOperationCompleted;
        
        private System.Threading.SendOrPostCallback Abandon1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Abandon2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateOperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate2OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate3OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate4OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate5OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate6OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate7OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate8OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate9OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate10OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate11OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate12OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate13OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate14OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate15OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate16OperationCompleted;
        
        private System.Threading.SendOrPostCallback Calculate17OperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback Cancel1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Cancel2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitOperationCompleted;
        
        private System.Threading.SendOrPostCallback Commit1OperationCompleted;
        
        private System.Threading.SendOrPostCallback Commit2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLossOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss4OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss5OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss6OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss7OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss8OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedLoss9OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturnOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn4OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn5OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn6OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn7OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn8OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessAttributedReturn9OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLossOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss4OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss5OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss6OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss7OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss8OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedLoss9OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturnOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn1OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn4OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn5OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn6OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn7OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn8OperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessUnattributedReturn9OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CertiCalc() {
            this.Url = global::CommerceBuilder.Taxes.Providers.CCH.Properties.Settings.Default.CertiTAX_net_esalestax_webservices_CertiCalc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AbandonCompletedEventHandler AbandonCompleted;
        
        /// <remarks/>
        public event Abandon1CompletedEventHandler Abandon1Completed;
        
        /// <remarks/>
        public event Abandon2CompletedEventHandler Abandon2Completed;
        
        /// <remarks/>
        public event CalculateCompletedEventHandler CalculateCompleted;
        
        /// <remarks/>
        public event Calculate1CompletedEventHandler Calculate1Completed;
        
        /// <remarks/>
        public event Calculate2CompletedEventHandler Calculate2Completed;
        
        /// <remarks/>
        public event Calculate3CompletedEventHandler Calculate3Completed;
        
        /// <remarks/>
        public event Calculate4CompletedEventHandler Calculate4Completed;
        
        /// <remarks/>
        public event Calculate5CompletedEventHandler Calculate5Completed;
        
        /// <remarks/>
        public event Calculate6CompletedEventHandler Calculate6Completed;
        
        /// <remarks/>
        public event Calculate7CompletedEventHandler Calculate7Completed;
        
        /// <remarks/>
        public event Calculate8CompletedEventHandler Calculate8Completed;
        
        /// <remarks/>
        public event Calculate9CompletedEventHandler Calculate9Completed;
        
        /// <remarks/>
        public event Calculate10CompletedEventHandler Calculate10Completed;
        
        /// <remarks/>
        public event Calculate11CompletedEventHandler Calculate11Completed;
        
        /// <remarks/>
        public event Calculate12CompletedEventHandler Calculate12Completed;
        
        /// <remarks/>
        public event Calculate13CompletedEventHandler Calculate13Completed;
        
        /// <remarks/>
        public event Calculate14CompletedEventHandler Calculate14Completed;
        
        /// <remarks/>
        public event Calculate15CompletedEventHandler Calculate15Completed;
        
        /// <remarks/>
        public event Calculate16CompletedEventHandler Calculate16Completed;
        
        /// <remarks/>
        public event Calculate17CompletedEventHandler Calculate17Completed;
        
        /// <remarks/>
        public event CancelCompletedEventHandler CancelCompleted;
        
        /// <remarks/>
        public event Cancel1CompletedEventHandler Cancel1Completed;
        
        /// <remarks/>
        public event Cancel2CompletedEventHandler Cancel2Completed;
        
        /// <remarks/>
        public event CommitCompletedEventHandler CommitCompleted;
        
        /// <remarks/>
        public event Commit1CompletedEventHandler Commit1Completed;
        
        /// <remarks/>
        public event Commit2CompletedEventHandler Commit2Completed;
        
        /// <remarks/>
        public event ProcessAttributedLossCompletedEventHandler ProcessAttributedLossCompleted;
        
        /// <remarks/>
        public event ProcessAttributedLoss1CompletedEventHandler ProcessAttributedLoss1Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss2CompletedEventHandler ProcessAttributedLoss2Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss3CompletedEventHandler ProcessAttributedLoss3Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss4CompletedEventHandler ProcessAttributedLoss4Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss5CompletedEventHandler ProcessAttributedLoss5Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss6CompletedEventHandler ProcessAttributedLoss6Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss7CompletedEventHandler ProcessAttributedLoss7Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss8CompletedEventHandler ProcessAttributedLoss8Completed;
        
        /// <remarks/>
        public event ProcessAttributedLoss9CompletedEventHandler ProcessAttributedLoss9Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturnCompletedEventHandler ProcessAttributedReturnCompleted;
        
        /// <remarks/>
        public event ProcessAttributedReturn1CompletedEventHandler ProcessAttributedReturn1Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn2CompletedEventHandler ProcessAttributedReturn2Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn3CompletedEventHandler ProcessAttributedReturn3Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn4CompletedEventHandler ProcessAttributedReturn4Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn5CompletedEventHandler ProcessAttributedReturn5Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn6CompletedEventHandler ProcessAttributedReturn6Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn7CompletedEventHandler ProcessAttributedReturn7Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn8CompletedEventHandler ProcessAttributedReturn8Completed;
        
        /// <remarks/>
        public event ProcessAttributedReturn9CompletedEventHandler ProcessAttributedReturn9Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLossCompletedEventHandler ProcessUnattributedLossCompleted;
        
        /// <remarks/>
        public event ProcessUnattributedLoss1CompletedEventHandler ProcessUnattributedLoss1Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss2CompletedEventHandler ProcessUnattributedLoss2Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss3CompletedEventHandler ProcessUnattributedLoss3Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss4CompletedEventHandler ProcessUnattributedLoss4Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss5CompletedEventHandler ProcessUnattributedLoss5Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss6CompletedEventHandler ProcessUnattributedLoss6Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss7CompletedEventHandler ProcessUnattributedLoss7Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss8CompletedEventHandler ProcessUnattributedLoss8Completed;
        
        /// <remarks/>
        public event ProcessUnattributedLoss9CompletedEventHandler ProcessUnattributedLoss9Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturnCompletedEventHandler ProcessUnattributedReturnCompleted;
        
        /// <remarks/>
        public event ProcessUnattributedReturn1CompletedEventHandler ProcessUnattributedReturn1Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn2CompletedEventHandler ProcessUnattributedReturn2Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn3CompletedEventHandler ProcessUnattributedReturn3Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn4CompletedEventHandler ProcessUnattributedReturn4Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn5CompletedEventHandler ProcessUnattributedReturn5Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn6CompletedEventHandler ProcessUnattributedReturn6Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn7CompletedEventHandler ProcessUnattributedReturn7Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn8CompletedEventHandler ProcessUnattributedReturn8Completed;
        
        /// <remarks/>
        public event ProcessUnattributedReturn9CompletedEventHandler ProcessUnattributedReturn9Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Abandon_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Abandon(TaxTransaction TaxTransaction) {
            this.Invoke("Abandon", new object[] {
                        TaxTransaction});
        }
        
        /// <remarks/>
        public void AbandonAsync(TaxTransaction TaxTransaction) {
            this.AbandonAsync(TaxTransaction, null);
        }
        
        /// <remarks/>
        public void AbandonAsync(TaxTransaction TaxTransaction, object userState) {
            if ((this.AbandonOperationCompleted == null)) {
                this.AbandonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbandonOperationCompleted);
            }
            this.InvokeAsync("Abandon", new object[] {
                        TaxTransaction}, this.AbandonOperationCompleted, userState);
        }
        
        private void OnAbandonOperationCompleted(object arg) {
            if ((this.AbandonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AbandonCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Abandon1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Abandon_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Abandon(string CertiTAXTransactionId, string SerialNumber) {
            this.Invoke("Abandon1", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber});
        }
        
        /// <remarks/>
        public void Abandon1Async(string CertiTAXTransactionId, string SerialNumber) {
            this.Abandon1Async(CertiTAXTransactionId, SerialNumber, null);
        }
        
        /// <remarks/>
        public void Abandon1Async(string CertiTAXTransactionId, string SerialNumber, object userState) {
            if ((this.Abandon1OperationCompleted == null)) {
                this.Abandon1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbandon1OperationCompleted);
            }
            this.InvokeAsync("Abandon1", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber}, this.Abandon1OperationCompleted, userState);
        }
        
        private void OnAbandon1OperationCompleted(object arg) {
            if ((this.Abandon1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Abandon1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Abandon2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Abandon", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Abandon(string CertiTAXTransactionId, string SerialNumber, string ReferredId) {
            this.Invoke("Abandon2", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber,
                        ReferredId});
        }
        
        /// <remarks/>
        public void Abandon2Async(string CertiTAXTransactionId, string SerialNumber, string ReferredId) {
            this.Abandon2Async(CertiTAXTransactionId, SerialNumber, ReferredId, null);
        }
        
        /// <remarks/>
        public void Abandon2Async(string CertiTAXTransactionId, string SerialNumber, string ReferredId, object userState) {
            if ((this.Abandon2OperationCompleted == null)) {
                this.Abandon2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbandon2OperationCompleted);
            }
            this.InvokeAsync("Abandon2", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber,
                        ReferredId}, this.Abandon2OperationCompleted, userState);
        }
        
        private void OnAbandon2OperationCompleted(object arg) {
            if ((this.Abandon2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Abandon2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("Calculate", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateAsync(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.CalculateAsync(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void CalculateAsync(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.CalculateOperationCompleted == null)) {
                this.CalculateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateOperationCompleted);
            }
            this.InvokeAsync("Calculate", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.CalculateOperationCompleted, userState);
        }
        
        private void OnCalculateOperationCompleted(object arg) {
            if ((this.CalculateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateCompleted(this, new CalculateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate1", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate1Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.Calculate1Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate1Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate1OperationCompleted == null)) {
                this.Calculate1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate1OperationCompleted);
            }
            this.InvokeAsync("Calculate1", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.Calculate1OperationCompleted, userState);
        }
        
        private void OnCalculate1OperationCompleted(object arg) {
            if ((this.Calculate1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate1Completed(this, new Calculate1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_NORIDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("Calculate2", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate2Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.Calculate2Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void Calculate2Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.Calculate2OperationCompleted == null)) {
                this.Calculate2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate2OperationCompleted);
            }
            this.InvokeAsync("Calculate2", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.Calculate2OperationCompleted, userState);
        }
        
        private void OnCalculate2OperationCompleted(object arg) {
            if ((this.Calculate2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate2Completed(this, new Calculate2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate3")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_NORID_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_NORID_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate3", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate3Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.Calculate3Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate3Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate3OperationCompleted == null)) {
                this.Calculate3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate3OperationCompleted);
            }
            this.InvokeAsync("Calculate3", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.Calculate3OperationCompleted, userState);
        }
        
        private void OnCalculate3OperationCompleted(object arg) {
            if ((this.Calculate3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate3Completed(this, new Calculate3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate4")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_NOTE", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_NOTEResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("Calculate4", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate4Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.Calculate4Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void Calculate4Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.Calculate4OperationCompleted == null)) {
                this.Calculate4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate4OperationCompleted);
            }
            this.InvokeAsync("Calculate4", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode}, this.Calculate4OperationCompleted, userState);
        }
        
        private void OnCalculate4OperationCompleted(object arg) {
            if ((this.Calculate4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate4Completed(this, new Calculate4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate5")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_NOTE_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_NOTE_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate5", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate5Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.Calculate5Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate5Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate5OperationCompleted == null)) {
                this.Calculate5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate5OperationCompleted);
            }
            this.InvokeAsync("Calculate5", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.Calculate5OperationCompleted, userState);
        }
        
        private void OnCalculate5OperationCompleted(object arg) {
            if ((this.Calculate5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate5Completed(this, new Calculate5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate6")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_NORID_NOTE", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_NORID_NOTEResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("Calculate6", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate6Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.Calculate6Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void Calculate6Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.Calculate6OperationCompleted == null)) {
                this.Calculate6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate6OperationCompleted);
            }
            this.InvokeAsync("Calculate6", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode}, this.Calculate6OperationCompleted, userState);
        }
        
        private void OnCalculate6OperationCompleted(object arg) {
            if ((this.Calculate6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate6Completed(this, new Calculate6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate7")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_NORID_NOTE_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_NORID_NOTE_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate7", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate7Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.Calculate7Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate7Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate7OperationCompleted == null)) {
                this.Calculate7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate7OperationCompleted);
            }
            this.InvokeAsync("Calculate7", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.Calculate7OperationCompleted, userState);
        }
        
        private void OnCalculate7OperationCompleted(object arg) {
            if ((this.Calculate7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate7Completed(this, new Calculate7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate8")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_RecalcResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string PreviousCertiTAXTransactionId, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("Calculate8", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        PreviousCertiTAXTransactionId,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate8Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string PreviousCertiTAXTransactionId, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.Calculate8Async(SerialNumber, ReferredId, Location, PreviousCertiTAXTransactionId, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void Calculate8Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string PreviousCertiTAXTransactionId, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.Calculate8OperationCompleted == null)) {
                this.Calculate8OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate8OperationCompleted);
            }
            this.InvokeAsync("Calculate8", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        PreviousCertiTAXTransactionId,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.Calculate8OperationCompleted, userState);
        }
        
        private void OnCalculate8OperationCompleted(object arg) {
            if ((this.Calculate8Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate8Completed(this, new Calculate8CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate9")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_Recalc_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string PreviousCertiTAXTransactionId, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate9", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        PreviousCertiTAXTransactionId,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate9Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string PreviousCertiTAXTransactionId, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.Calculate9Async(SerialNumber, ReferredId, Location, PreviousCertiTAXTransactionId, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate9Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string PreviousCertiTAXTransactionId, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate9OperationCompleted == null)) {
                this.Calculate9OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate9OperationCompleted);
            }
            this.InvokeAsync("Calculate9", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        PreviousCertiTAXTransactionId,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.Calculate9OperationCompleted, userState);
        }
        
        private void OnCalculate9OperationCompleted(object arg) {
            if ((this.Calculate9Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate9Completed(this, new Calculate9CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate10")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_Recalc_NORIDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("Calculate10", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate10Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.Calculate10Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, PreviousCertiTAXTransactionId, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void Calculate10Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.Calculate10OperationCompleted == null)) {
                this.Calculate10OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate10OperationCompleted);
            }
            this.InvokeAsync("Calculate10", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.Calculate10OperationCompleted, userState);
        }
        
        private void OnCalculate10OperationCompleted(object arg) {
            if ((this.Calculate10Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate10Completed(this, new Calculate10CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate11")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc_NORID_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_Recalc_NORID_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate11", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate11Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.Calculate11Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, PreviousCertiTAXTransactionId, CalculateTax, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate11Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate11OperationCompleted == null)) {
                this.Calculate11OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate11OperationCompleted);
            }
            this.InvokeAsync("Calculate11", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.Calculate11OperationCompleted, userState);
        }
        
        private void OnCalculate11OperationCompleted(object arg) {
            if ((this.Calculate11Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate11Completed(this, new Calculate11CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate12")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc_NOTE", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_Recalc_NOTEResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("Calculate12", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate12Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.Calculate12Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, PreviousCertiTAXTransactionId, CalculateTax, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void Calculate12Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.Calculate12OperationCompleted == null)) {
                this.Calculate12OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate12OperationCompleted);
            }
            this.InvokeAsync("Calculate12", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode}, this.Calculate12OperationCompleted, userState);
        }
        
        private void OnCalculate12OperationCompleted(object arg) {
            if ((this.Calculate12Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate12Completed(this, new Calculate12CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate13")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc_NOTE_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_Recalc_NOTE_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate13", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate13Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.Calculate13Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, PreviousCertiTAXTransactionId, CalculateTax, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate13Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate13OperationCompleted == null)) {
                this.Calculate13OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate13OperationCompleted);
            }
            this.InvokeAsync("Calculate13", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.Calculate13OperationCompleted, userState);
        }
        
        private void OnCalculate13OperationCompleted(object arg) {
            if ((this.Calculate13Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate13Completed(this, new Calculate13CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate14")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc_NORID_NOTE", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_Recalc_NORID_NOTEResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("Calculate14", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate14Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.Calculate14Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, PreviousCertiTAXTransactionId, CalculateTax, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void Calculate14Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.Calculate14OperationCompleted == null)) {
                this.Calculate14OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate14OperationCompleted);
            }
            this.InvokeAsync("Calculate14", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode}, this.Calculate14OperationCompleted, userState);
        }
        
        private void OnCalculate14OperationCompleted(object arg) {
            if ((this.Calculate14Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate14Completed(this, new Calculate14CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate15")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_Recalc_NORID_NOTE_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_Recalc_NORID_NOTE_EDResult")]
        public TaxTransaction Calculate(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate15", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate15Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.Calculate15Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, PreviousCertiTAXTransactionId, CalculateTax, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate15Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    string PreviousCertiTAXTransactionId, 
                    bool CalculateTax, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.Calculate15OperationCompleted == null)) {
                this.Calculate15OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate15OperationCompleted);
            }
            this.InvokeAsync("Calculate15", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        PreviousCertiTAXTransactionId,
                        CalculateTax,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.Calculate15OperationCompleted, userState);
        }
        
        private void OnCalculate15OperationCompleted(object arg) {
            if ((this.Calculate15Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate15Completed(this, new Calculate15CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate16")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_DSResult")]
        public TaxTransaction Calculate(Order Order) {
            object[] results = this.Invoke("Calculate16", new object[] {
                        Order});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate16Async(Order Order) {
            this.Calculate16Async(Order, null);
        }
        
        /// <remarks/>
        public void Calculate16Async(Order Order, object userState) {
            if ((this.Calculate16OperationCompleted == null)) {
                this.Calculate16OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate16OperationCompleted);
            }
            this.InvokeAsync("Calculate16", new object[] {
                        Order}, this.Calculate16OperationCompleted, userState);
        }
        
        private void OnCalculate16OperationCompleted(object arg) {
            if ((this.Calculate16Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate16Completed(this, new Calculate16CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Calculate17")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Calculate_DS_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("Calculate_DS_EDResult")]
        public TaxTransaction Calculate(Order Order, System.DateTime EffectiveDate) {
            object[] results = this.Invoke("Calculate17", new object[] {
                        Order,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void Calculate17Async(Order Order, System.DateTime EffectiveDate) {
            this.Calculate17Async(Order, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void Calculate17Async(Order Order, System.DateTime EffectiveDate, object userState) {
            if ((this.Calculate17OperationCompleted == null)) {
                this.Calculate17OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculate17OperationCompleted);
            }
            this.InvokeAsync("Calculate17", new object[] {
                        Order,
                        EffectiveDate}, this.Calculate17OperationCompleted, userState);
        }
        
        private void OnCalculate17OperationCompleted(object arg) {
            if ((this.Calculate17Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Calculate17Completed(this, new Calculate17CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Cancel_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Cancel(TaxTransaction TaxTransaction) {
            this.Invoke("Cancel", new object[] {
                        TaxTransaction});
        }
        
        /// <remarks/>
        public void CancelAsync(TaxTransaction TaxTransaction) {
            this.CancelAsync(TaxTransaction, null);
        }
        
        /// <remarks/>
        public void CancelAsync(TaxTransaction TaxTransaction, object userState) {
            if ((this.CancelOperationCompleted == null)) {
                this.CancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelOperationCompleted);
            }
            this.InvokeAsync("Cancel", new object[] {
                        TaxTransaction}, this.CancelOperationCompleted, userState);
        }
        
        private void OnCancelOperationCompleted(object arg) {
            if ((this.CancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Cancel1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Cancel_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Cancel(string CertiTAXTransactionId, string SerialNumber) {
            this.Invoke("Cancel1", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber});
        }
        
        /// <remarks/>
        public void Cancel1Async(string CertiTAXTransactionId, string SerialNumber) {
            this.Cancel1Async(CertiTAXTransactionId, SerialNumber, null);
        }
        
        /// <remarks/>
        public void Cancel1Async(string CertiTAXTransactionId, string SerialNumber, object userState) {
            if ((this.Cancel1OperationCompleted == null)) {
                this.Cancel1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancel1OperationCompleted);
            }
            this.InvokeAsync("Cancel1", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber}, this.Cancel1OperationCompleted, userState);
        }
        
        private void OnCancel1OperationCompleted(object arg) {
            if ((this.Cancel1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Cancel1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Cancel2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Cancel", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Cancel(string CertiTAXTransactionId, string SerialNumber, string ReferredId) {
            this.Invoke("Cancel2", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber,
                        ReferredId});
        }
        
        /// <remarks/>
        public void Cancel2Async(string CertiTAXTransactionId, string SerialNumber, string ReferredId) {
            this.Cancel2Async(CertiTAXTransactionId, SerialNumber, ReferredId, null);
        }
        
        /// <remarks/>
        public void Cancel2Async(string CertiTAXTransactionId, string SerialNumber, string ReferredId, object userState) {
            if ((this.Cancel2OperationCompleted == null)) {
                this.Cancel2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancel2OperationCompleted);
            }
            this.InvokeAsync("Cancel2", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber,
                        ReferredId}, this.Cancel2OperationCompleted, userState);
        }
        
        private void OnCancel2OperationCompleted(object arg) {
            if ((this.Cancel2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Cancel2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Commit_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Commit(TaxTransaction TaxTransaction) {
            this.Invoke("Commit", new object[] {
                        TaxTransaction});
        }
        
        /// <remarks/>
        public void CommitAsync(TaxTransaction TaxTransaction) {
            this.CommitAsync(TaxTransaction, null);
        }
        
        /// <remarks/>
        public void CommitAsync(TaxTransaction TaxTransaction, object userState) {
            if ((this.CommitOperationCompleted == null)) {
                this.CommitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitOperationCompleted);
            }
            this.InvokeAsync("Commit", new object[] {
                        TaxTransaction}, this.CommitOperationCompleted, userState);
        }
        
        private void OnCommitOperationCompleted(object arg) {
            if ((this.CommitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Commit1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Commit_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Commit(string CertiTAXTransactionId, string SerialNumber) {
            this.Invoke("Commit1", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber});
        }
        
        /// <remarks/>
        public void Commit1Async(string CertiTAXTransactionId, string SerialNumber) {
            this.Commit1Async(CertiTAXTransactionId, SerialNumber, null);
        }
        
        /// <remarks/>
        public void Commit1Async(string CertiTAXTransactionId, string SerialNumber, object userState) {
            if ((this.Commit1OperationCompleted == null)) {
                this.Commit1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommit1OperationCompleted);
            }
            this.InvokeAsync("Commit1", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber}, this.Commit1OperationCompleted, userState);
        }
        
        private void OnCommit1OperationCompleted(object arg) {
            if ((this.Commit1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Commit1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="Commit2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/Commit", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public void Commit(string CertiTAXTransactionId, string SerialNumber, string ReferredId) {
            this.Invoke("Commit2", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber,
                        ReferredId});
        }
        
        /// <remarks/>
        public void Commit2Async(string CertiTAXTransactionId, string SerialNumber, string ReferredId) {
            this.Commit2Async(CertiTAXTransactionId, SerialNumber, ReferredId, null);
        }
        
        /// <remarks/>
        public void Commit2Async(string CertiTAXTransactionId, string SerialNumber, string ReferredId, object userState) {
            if ((this.Commit2OperationCompleted == null)) {
                this.Commit2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommit2OperationCompleted);
            }
            this.InvokeAsync("Commit2", new object[] {
                        CertiTAXTransactionId,
                        SerialNumber,
                        ReferredId}, this.Commit2OperationCompleted, userState);
        }
        
        private void OnCommit2OperationCompleted(object arg) {
            if ((this.Commit2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Commit2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_TRANSACTION", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_TRANSACTIONResult")]
        public TaxTransaction ProcessAttributedLoss(TaxTransaction CommittedTaxTransaction) {
            object[] results = this.Invoke("ProcessAttributedLoss", new object[] {
                        CommittedTaxTransaction});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLossAsync(TaxTransaction CommittedTaxTransaction) {
            this.ProcessAttributedLossAsync(CommittedTaxTransaction, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLossAsync(TaxTransaction CommittedTaxTransaction, object userState) {
            if ((this.ProcessAttributedLossOperationCompleted == null)) {
                this.ProcessAttributedLossOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLossOperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss", new object[] {
                        CommittedTaxTransaction}, this.ProcessAttributedLossOperationCompleted, userState);
        }
        
        private void OnProcessAttributedLossOperationCompleted(object arg) {
            if ((this.ProcessAttributedLossCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLossCompleted(this, new ProcessAttributedLossCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_TID_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_TID_NORIDResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string CertiTAXTransactionId) {
            object[] results = this.Invoke("ProcessAttributedLoss1", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss1Async(string SerialNumber, string CertiTAXTransactionId) {
            this.ProcessAttributedLoss1Async(SerialNumber, CertiTAXTransactionId, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss1Async(string SerialNumber, string CertiTAXTransactionId, object userState) {
            if ((this.ProcessAttributedLoss1OperationCompleted == null)) {
                this.ProcessAttributedLoss1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss1OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss1", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId}, this.ProcessAttributedLoss1OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss1OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss1Completed(this, new ProcessAttributedLoss1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_NORID_NOTOTAL" +
            "", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_NORID_NOTOTALResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            object[] results = this.Invoke("ProcessAttributedLoss2", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss2Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            this.ProcessAttributedLoss2Async(SerialNumber, CertiTAXTransactionId, ShippingCharge, HandlingCharge, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss2Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, object userState) {
            if ((this.ProcessAttributedLoss2OperationCompleted == null)) {
                this.ProcessAttributedLoss2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss2OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss2", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge}, this.ProcessAttributedLoss2OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss2OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss2Completed(this, new ProcessAttributedLoss2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss3")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_NORIDResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            object[] results = this.Invoke("ProcessAttributedLoss3", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss3Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            this.ProcessAttributedLoss3Async(SerialNumber, CertiTAXTransactionId, ShippingCharge, HandlingCharge, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss3Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total, object userState) {
            if ((this.ProcessAttributedLoss3OperationCompleted == null)) {
                this.ProcessAttributedLoss3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss3OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss3", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total}, this.ProcessAttributedLoss3OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss3OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss3Completed(this, new ProcessAttributedLoss3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss4")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_NORID_OT", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_NORID_OTResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string CertiTAXTransactionId, string Total) {
            object[] results = this.Invoke("ProcessAttributedLoss4", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss4Async(string SerialNumber, string CertiTAXTransactionId, string Total) {
            this.ProcessAttributedLoss4Async(SerialNumber, CertiTAXTransactionId, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss4Async(string SerialNumber, string CertiTAXTransactionId, string Total, object userState) {
            if ((this.ProcessAttributedLoss4OperationCompleted == null)) {
                this.ProcessAttributedLoss4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss4OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss4", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        Total}, this.ProcessAttributedLoss4OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss4OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss4Completed(this, new ProcessAttributedLoss4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss5")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_TID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_TIDResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string ReferredId, string CertiTAXTransactionId) {
            object[] results = this.Invoke("ProcessAttributedLoss5", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss5Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId) {
            this.ProcessAttributedLoss5Async(SerialNumber, ReferredId, CertiTAXTransactionId, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss5Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, object userState) {
            if ((this.ProcessAttributedLoss5OperationCompleted == null)) {
                this.ProcessAttributedLoss5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss5OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss5", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId}, this.ProcessAttributedLoss5OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss5OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss5Completed(this, new ProcessAttributedLoss5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss6")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_NOTOTAL", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_NOTOTALResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            object[] results = this.Invoke("ProcessAttributedLoss6", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss6Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            this.ProcessAttributedLoss6Async(SerialNumber, ReferredId, CertiTAXTransactionId, ShippingCharge, HandlingCharge, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss6Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, object userState) {
            if ((this.ProcessAttributedLoss6OperationCompleted == null)) {
                this.ProcessAttributedLoss6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss6OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss6", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge}, this.ProcessAttributedLoss6OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss6OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss6Completed(this, new ProcessAttributedLoss6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss7")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLossResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            object[] results = this.Invoke("ProcessAttributedLoss7", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss7Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            this.ProcessAttributedLoss7Async(SerialNumber, ReferredId, CertiTAXTransactionId, ShippingCharge, HandlingCharge, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss7Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total, object userState) {
            if ((this.ProcessAttributedLoss7OperationCompleted == null)) {
                this.ProcessAttributedLoss7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss7OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss7", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total}, this.ProcessAttributedLoss7OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss7OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss7Completed(this, new ProcessAttributedLoss7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss8")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_OT", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_OTResult")]
        public TaxTransaction ProcessAttributedLoss(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string Total) {
            object[] results = this.Invoke("ProcessAttributedLoss8", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss8Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string Total) {
            this.ProcessAttributedLoss8Async(SerialNumber, ReferredId, CertiTAXTransactionId, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss8Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string Total, object userState) {
            if ((this.ProcessAttributedLoss8OperationCompleted == null)) {
                this.ProcessAttributedLoss8OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss8OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss8", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        Total}, this.ProcessAttributedLoss8OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss8OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss8Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss8Completed(this, new ProcessAttributedLoss8CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedLoss9")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedLoss_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedLoss_DSResult")]
        public TaxTransaction ProcessAttributedLoss(Order OrderChanges) {
            object[] results = this.Invoke("ProcessAttributedLoss9", new object[] {
                        OrderChanges});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss9Async(Order OrderChanges) {
            this.ProcessAttributedLoss9Async(OrderChanges, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedLoss9Async(Order OrderChanges, object userState) {
            if ((this.ProcessAttributedLoss9OperationCompleted == null)) {
                this.ProcessAttributedLoss9OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedLoss9OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedLoss9", new object[] {
                        OrderChanges}, this.ProcessAttributedLoss9OperationCompleted, userState);
        }
        
        private void OnProcessAttributedLoss9OperationCompleted(object arg) {
            if ((this.ProcessAttributedLoss9Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedLoss9Completed(this, new ProcessAttributedLoss9CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_TRANSACTION" +
            "", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_TRANSACTIONResult")]
        public TaxTransaction ProcessAttributedReturn(TaxTransaction CommittedTaxTransaction) {
            object[] results = this.Invoke("ProcessAttributedReturn", new object[] {
                        CommittedTaxTransaction});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturnAsync(TaxTransaction CommittedTaxTransaction) {
            this.ProcessAttributedReturnAsync(CommittedTaxTransaction, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturnAsync(TaxTransaction CommittedTaxTransaction, object userState) {
            if ((this.ProcessAttributedReturnOperationCompleted == null)) {
                this.ProcessAttributedReturnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturnOperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn", new object[] {
                        CommittedTaxTransaction}, this.ProcessAttributedReturnOperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturnOperationCompleted(object arg) {
            if ((this.ProcessAttributedReturnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturnCompleted(this, new ProcessAttributedReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_TID_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_TID_NORIDResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string CertiTAXTransactionId) {
            object[] results = this.Invoke("ProcessAttributedReturn1", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn1Async(string SerialNumber, string CertiTAXTransactionId) {
            this.ProcessAttributedReturn1Async(SerialNumber, CertiTAXTransactionId, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn1Async(string SerialNumber, string CertiTAXTransactionId, object userState) {
            if ((this.ProcessAttributedReturn1OperationCompleted == null)) {
                this.ProcessAttributedReturn1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn1OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn1", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId}, this.ProcessAttributedReturn1OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn1OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn1Completed(this, new ProcessAttributedReturn1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_NORID_NOTOT" +
            "AL", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_NORID_NOTOTALResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            object[] results = this.Invoke("ProcessAttributedReturn2", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn2Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            this.ProcessAttributedReturn2Async(SerialNumber, CertiTAXTransactionId, ShippingCharge, HandlingCharge, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn2Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, object userState) {
            if ((this.ProcessAttributedReturn2OperationCompleted == null)) {
                this.ProcessAttributedReturn2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn2OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn2", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge}, this.ProcessAttributedReturn2OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn2OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn2Completed(this, new ProcessAttributedReturn2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn3")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_NORIDResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            object[] results = this.Invoke("ProcessAttributedReturn3", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn3Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            this.ProcessAttributedReturn3Async(SerialNumber, CertiTAXTransactionId, ShippingCharge, HandlingCharge, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn3Async(string SerialNumber, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total, object userState) {
            if ((this.ProcessAttributedReturn3OperationCompleted == null)) {
                this.ProcessAttributedReturn3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn3OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn3", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total}, this.ProcessAttributedReturn3OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn3OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn3Completed(this, new ProcessAttributedReturn3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn4")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_NORID_OT", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_NORID_OTResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string CertiTAXTransactionId, string Total) {
            object[] results = this.Invoke("ProcessAttributedReturn4", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn4Async(string SerialNumber, string CertiTAXTransactionId, string Total) {
            this.ProcessAttributedReturn4Async(SerialNumber, CertiTAXTransactionId, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn4Async(string SerialNumber, string CertiTAXTransactionId, string Total, object userState) {
            if ((this.ProcessAttributedReturn4OperationCompleted == null)) {
                this.ProcessAttributedReturn4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn4OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn4", new object[] {
                        SerialNumber,
                        CertiTAXTransactionId,
                        Total}, this.ProcessAttributedReturn4OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn4OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn4Completed(this, new ProcessAttributedReturn4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn5")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_TID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_TIDResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string ReferredId, string CertiTAXTransactionId) {
            object[] results = this.Invoke("ProcessAttributedReturn5", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn5Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId) {
            this.ProcessAttributedReturn5Async(SerialNumber, ReferredId, CertiTAXTransactionId, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn5Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, object userState) {
            if ((this.ProcessAttributedReturn5OperationCompleted == null)) {
                this.ProcessAttributedReturn5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn5OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn5", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId}, this.ProcessAttributedReturn5OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn5OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn5Completed(this, new ProcessAttributedReturn5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn6")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_NOTOTAL", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_NOTOTALResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            object[] results = this.Invoke("ProcessAttributedReturn6", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn6Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge) {
            this.ProcessAttributedReturn6Async(SerialNumber, ReferredId, CertiTAXTransactionId, ShippingCharge, HandlingCharge, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn6Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, object userState) {
            if ((this.ProcessAttributedReturn6OperationCompleted == null)) {
                this.ProcessAttributedReturn6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn6OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn6", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge}, this.ProcessAttributedReturn6OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn6OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn6Completed(this, new ProcessAttributedReturn6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn7")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturnResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            object[] results = this.Invoke("ProcessAttributedReturn7", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn7Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total) {
            this.ProcessAttributedReturn7Async(SerialNumber, ReferredId, CertiTAXTransactionId, ShippingCharge, HandlingCharge, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn7Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string ShippingCharge, string HandlingCharge, string Total, object userState) {
            if ((this.ProcessAttributedReturn7OperationCompleted == null)) {
                this.ProcessAttributedReturn7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn7OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn7", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        ShippingCharge,
                        HandlingCharge,
                        Total}, this.ProcessAttributedReturn7OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn7OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn7Completed(this, new ProcessAttributedReturn7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn8")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_OT", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_OTResult")]
        public TaxTransaction ProcessAttributedReturn(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string Total) {
            object[] results = this.Invoke("ProcessAttributedReturn8", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        Total});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn8Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string Total) {
            this.ProcessAttributedReturn8Async(SerialNumber, ReferredId, CertiTAXTransactionId, Total, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn8Async(string SerialNumber, string ReferredId, string CertiTAXTransactionId, string Total, object userState) {
            if ((this.ProcessAttributedReturn8OperationCompleted == null)) {
                this.ProcessAttributedReturn8OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn8OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn8", new object[] {
                        SerialNumber,
                        ReferredId,
                        CertiTAXTransactionId,
                        Total}, this.ProcessAttributedReturn8OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn8OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn8Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn8Completed(this, new ProcessAttributedReturn8CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessAttributedReturn9")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessAttributedReturn_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessAttributedReturn_DSResult")]
        public TaxTransaction ProcessAttributedReturn(Order OrderChanges) {
            object[] results = this.Invoke("ProcessAttributedReturn9", new object[] {
                        OrderChanges});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn9Async(Order OrderChanges) {
            this.ProcessAttributedReturn9Async(OrderChanges, null);
        }
        
        /// <remarks/>
        public void ProcessAttributedReturn9Async(Order OrderChanges, object userState) {
            if ((this.ProcessAttributedReturn9OperationCompleted == null)) {
                this.ProcessAttributedReturn9OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessAttributedReturn9OperationCompleted);
            }
            this.InvokeAsync("ProcessAttributedReturn9", new object[] {
                        OrderChanges}, this.ProcessAttributedReturn9OperationCompleted, userState);
        }
        
        private void OnProcessAttributedReturn9OperationCompleted(object arg) {
            if ((this.ProcessAttributedReturn9Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessAttributedReturn9Completed(this, new ProcessAttributedReturn9CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("ProcessUnattributedLoss", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLossAsync(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.ProcessUnattributedLossAsync(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLossAsync(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.ProcessUnattributedLossOperationCompleted == null)) {
                this.ProcessUnattributedLossOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLossOperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.ProcessUnattributedLossOperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLossOperationCompleted(object arg) {
            if ((this.ProcessUnattributedLossCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLossCompleted(this, new ProcessUnattributedLossCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_NORIDResult")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("ProcessUnattributedLoss1", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss1Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.ProcessUnattributedLoss1Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss1Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.ProcessUnattributedLoss1OperationCompleted == null)) {
                this.ProcessUnattributedLoss1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss1OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss1", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.ProcessUnattributedLoss1OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss1OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss1Completed(this, new ProcessUnattributedLoss1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_NOTE", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_NOTEResult")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("ProcessUnattributedLoss2", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss2Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.ProcessUnattributedLoss2Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss2Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.ProcessUnattributedLoss2OperationCompleted == null)) {
                this.ProcessUnattributedLoss2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss2OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss2", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode}, this.ProcessUnattributedLoss2OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss2OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss2Completed(this, new ProcessUnattributedLoss2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss3")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_NORID_NOTE", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_NORID_NOTEResult")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("ProcessUnattributedLoss3", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss3Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.ProcessUnattributedLoss3Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss3Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.ProcessUnattributedLoss3OperationCompleted == null)) {
                this.ProcessUnattributedLoss3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss3OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss3", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode}, this.ProcessUnattributedLoss3OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss3OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss3Completed(this, new ProcessUnattributedLoss3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss4")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_EDResult")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedLoss4", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss4Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedLoss4Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss4Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedLoss4OperationCompleted == null)) {
                this.ProcessUnattributedLoss4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss4OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss4", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.ProcessUnattributedLoss4OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss4OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss4Completed(this, new ProcessUnattributedLoss4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss5")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_NORID_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_NORID_EDResult")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedLoss5", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss5Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedLoss5Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss5Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedLoss5OperationCompleted == null)) {
                this.ProcessUnattributedLoss5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss5OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss5", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.ProcessUnattributedLoss5OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss5OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss5Completed(this, new ProcessUnattributedLoss5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss6")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_NOTE_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_NOTE_EDResult")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedLoss6", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss6Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedLoss6Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss6Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedLoss6OperationCompleted == null)) {
                this.ProcessUnattributedLoss6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss6OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss6", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.ProcessUnattributedLoss6OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss6OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss6Completed(this, new ProcessUnattributedLoss6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss7")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_NORID_NOTE_" +
            "ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_NORID_NOTE_EDResult")]
        public TaxTransaction ProcessUnattributedLoss(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedLoss7", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss7Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedLoss7Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss7Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedLoss7OperationCompleted == null)) {
                this.ProcessUnattributedLoss7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss7OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss7", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.ProcessUnattributedLoss7OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss7OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss7Completed(this, new ProcessUnattributedLoss7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss8")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_DSResult")]
        public TaxTransaction ProcessUnattributedLoss(Order Order) {
            object[] results = this.Invoke("ProcessUnattributedLoss8", new object[] {
                        Order});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss8Async(Order Order) {
            this.ProcessUnattributedLoss8Async(Order, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss8Async(Order Order, object userState) {
            if ((this.ProcessUnattributedLoss8OperationCompleted == null)) {
                this.ProcessUnattributedLoss8OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss8OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss8", new object[] {
                        Order}, this.ProcessUnattributedLoss8OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss8OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss8Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss8Completed(this, new ProcessUnattributedLoss8CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedLoss9")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedLoss_DS_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedLoss_DS_EDResult")]
        public TaxTransaction ProcessUnattributedLoss(Order Order, System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedLoss9", new object[] {
                        Order,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss9Async(Order Order, System.DateTime EffectiveDate) {
            this.ProcessUnattributedLoss9Async(Order, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedLoss9Async(Order Order, System.DateTime EffectiveDate, object userState) {
            if ((this.ProcessUnattributedLoss9OperationCompleted == null)) {
                this.ProcessUnattributedLoss9OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedLoss9OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedLoss9", new object[] {
                        Order,
                        EffectiveDate}, this.ProcessUnattributedLoss9OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedLoss9OperationCompleted(object arg) {
            if ((this.ProcessUnattributedLoss9Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedLoss9Completed(this, new ProcessUnattributedLoss9CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("ProcessUnattributedReturn", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturnAsync(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.ProcessUnattributedReturnAsync(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturnAsync(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.ProcessUnattributedReturnOperationCompleted == null)) {
                this.ProcessUnattributedReturnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturnOperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.ProcessUnattributedReturnOperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturnOperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturnCompleted(this, new ProcessUnattributedReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn1")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_NORID", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_NORIDResult")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            object[] results = this.Invoke("ProcessUnattributedReturn1", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn1Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason) {
            this.ProcessUnattributedReturn1Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn1Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    object userState) {
            if ((this.ProcessUnattributedReturn1OperationCompleted == null)) {
                this.ProcessUnattributedReturn1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn1OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn1", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason}, this.ProcessUnattributedReturn1OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn1OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn1Completed(this, new ProcessUnattributedReturn1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn2")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_NOTE", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_NOTEResult")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("ProcessUnattributedReturn2", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn2Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.ProcessUnattributedReturn2Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn2Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.ProcessUnattributedReturn2OperationCompleted == null)) {
                this.ProcessUnattributedReturn2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn2OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn2", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode}, this.ProcessUnattributedReturn2OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn2OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn2Completed(this, new ProcessUnattributedReturn2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn3")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_NORID_NOT" +
            "E", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_NORID_NOTEResult")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            object[] results = this.Invoke("ProcessUnattributedReturn3", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn3Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode) {
            this.ProcessUnattributedReturn3Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn3Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    object userState) {
            if ((this.ProcessUnattributedReturn3OperationCompleted == null)) {
                this.ProcessUnattributedReturn3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn3OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn3", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode}, this.ProcessUnattributedReturn3OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn3OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn3Completed(this, new ProcessUnattributedReturn3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn4")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_EDResult")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedReturn4", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn4Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedReturn4Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn4Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedReturn4OperationCompleted == null)) {
                this.ProcessUnattributedReturn4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn4OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn4", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.ProcessUnattributedReturn4OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn4OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn4Completed(this, new ProcessUnattributedReturn4CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn5")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_NORID_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_NORID_EDResult")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedReturn5", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn5Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedReturn5Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, TaxExemptCertificate, TaxExemptIssuer, TaxExemptReason, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn5Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    string TaxExemptCertificate, 
                    string TaxExemptIssuer, 
                    string TaxExemptReason, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedReturn5OperationCompleted == null)) {
                this.ProcessUnattributedReturn5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn5OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn5", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        TaxExemptCertificate,
                        TaxExemptIssuer,
                        TaxExemptReason,
                        EffectiveDate}, this.ProcessUnattributedReturn5OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn5OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn5Completed(this, new ProcessUnattributedReturn5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn6")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_NOTE_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_NOTE_EDResult")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedReturn6", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn6Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedReturn6Async(SerialNumber, ReferredId, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn6Async(
                    string SerialNumber, 
                    string ReferredId, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedReturn6OperationCompleted == null)) {
                this.ProcessUnattributedReturn6OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn6OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn6", new object[] {
                        SerialNumber,
                        ReferredId,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.ProcessUnattributedReturn6OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn6OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn6Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn6Completed(this, new ProcessUnattributedReturn6CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn7")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_NORID_NOT" +
            "E_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_NORID_NOTE_EDResult")]
        public TaxTransaction ProcessUnattributedReturn(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedReturn7", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn7Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate) {
            this.ProcessUnattributedReturn7Async(SerialNumber, Location, MerchantTransactionId, Nexus, Name, Street1, Street2, City, County, State, PostalCode, Nation, ShippingCharge, HandlingCharge, Total, ConfirmAddress, DefaultProductCode, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn7Async(
                    string SerialNumber, 
                    string Location, 
                    string MerchantTransactionId, 
                    string Nexus, 
                    string Name, 
                    string Street1, 
                    string Street2, 
                    string City, 
                    string County, 
                    string State, 
                    string PostalCode, 
                    string Nation, 
                    string ShippingCharge, 
                    string HandlingCharge, 
                    string Total, 
                    bool ConfirmAddress, 
                    int DefaultProductCode, 
                    System.DateTime EffectiveDate, 
                    object userState) {
            if ((this.ProcessUnattributedReturn7OperationCompleted == null)) {
                this.ProcessUnattributedReturn7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn7OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn7", new object[] {
                        SerialNumber,
                        Location,
                        MerchantTransactionId,
                        Nexus,
                        Name,
                        Street1,
                        Street2,
                        City,
                        County,
                        State,
                        PostalCode,
                        Nation,
                        ShippingCharge,
                        HandlingCharge,
                        Total,
                        ConfirmAddress,
                        DefaultProductCode,
                        EffectiveDate}, this.ProcessUnattributedReturn7OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn7OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn7Completed(this, new ProcessUnattributedReturn7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn8")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_DS", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_DSResult")]
        public TaxTransaction ProcessUnattributedReturn(Order Order) {
            object[] results = this.Invoke("ProcessUnattributedReturn8", new object[] {
                        Order});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn8Async(Order Order) {
            this.ProcessUnattributedReturn8Async(Order, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn8Async(Order Order, object userState) {
            if ((this.ProcessUnattributedReturn8OperationCompleted == null)) {
                this.ProcessUnattributedReturn8OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn8OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn8", new object[] {
                        Order}, this.ProcessUnattributedReturn8OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn8OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn8Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn8Completed(this, new ProcessUnattributedReturn8CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.WebMethodAttribute(MessageName="ProcessUnattributedReturn9")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://webservices.esalestax.net/CertiTAX.NET/ProcessUnattributedReturn_DS_ED", RequestNamespace="http://webservices.esalestax.net/CertiTAX.NET", ResponseNamespace="http://webservices.esalestax.net/CertiTAX.NET")]
        [return: System.Xml.Serialization.SoapElementAttribute("ProcessUnattributedReturn_DS_EDResult")]
        public TaxTransaction ProcessUnattributedReturn(Order Order, System.DateTime EffectiveDate) {
            object[] results = this.Invoke("ProcessUnattributedReturn9", new object[] {
                        Order,
                        EffectiveDate});
            return ((TaxTransaction)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn9Async(Order Order, System.DateTime EffectiveDate) {
            this.ProcessUnattributedReturn9Async(Order, EffectiveDate, null);
        }
        
        /// <remarks/>
        public void ProcessUnattributedReturn9Async(Order Order, System.DateTime EffectiveDate, object userState) {
            if ((this.ProcessUnattributedReturn9OperationCompleted == null)) {
                this.ProcessUnattributedReturn9OperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessUnattributedReturn9OperationCompleted);
            }
            this.InvokeAsync("ProcessUnattributedReturn9", new object[] {
                        Order,
                        EffectiveDate}, this.ProcessUnattributedReturn9OperationCompleted, userState);
        }
        
        private void OnProcessUnattributedReturn9OperationCompleted(object arg) {
            if ((this.ProcessUnattributedReturn9Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessUnattributedReturn9Completed(this, new ProcessUnattributedReturn9CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public void CancelAsync1(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    public partial class TaxTransaction : MarshalByRefObject {
        
        private CorrectedAddress correctedAddressField;
        
        private string certiTAXTransactionIdField;
        
        private string cityTaxField;
        
        private string cityTaxAuthorityField;
        
        private string countyTaxField;
        
        private string countyTaxAuthorityField;
        
        private TaxTransactionLineItem[] lineItemsField;
        
        private string localTaxField;
        
        private string localTaxAuthorityField;
        
        private int merchantIdField;
        
        private string nationalTaxField;
        
        private string nationalTaxAuthorityField;
        
        private string otherTaxField;
        
        private string otherTaxAuthorityField;
        
        private string referredIdField;
        
        private string serialNumberField;
        
        private string serverField;
        
        private string stateTaxField;
        
        private string stateTaxAuthorityField;
        
        private string totalTaxField;
        
        /// <remarks/>
        public CorrectedAddress CorrectedAddress {
            get {
                return this.correctedAddressField;
            }
            set {
                this.correctedAddressField = value;
            }
        }
        
        /// <remarks/>
        public string CertiTAXTransactionId {
            get {
                return this.certiTAXTransactionIdField;
            }
            set {
                this.certiTAXTransactionIdField = value;
            }
        }
        
        /// <remarks/>
        public string CityTax {
            get {
                return this.cityTaxField;
            }
            set {
                this.cityTaxField = value;
            }
        }
        
        /// <remarks/>
        public string CityTaxAuthority {
            get {
                return this.cityTaxAuthorityField;
            }
            set {
                this.cityTaxAuthorityField = value;
            }
        }
        
        /// <remarks/>
        public string CountyTax {
            get {
                return this.countyTaxField;
            }
            set {
                this.countyTaxField = value;
            }
        }
        
        /// <remarks/>
        public string CountyTaxAuthority {
            get {
                return this.countyTaxAuthorityField;
            }
            set {
                this.countyTaxAuthorityField = value;
            }
        }
        
        /// <remarks/>
        public TaxTransactionLineItem[] LineItems {
            get {
                return this.lineItemsField;
            }
            set {
                this.lineItemsField = value;
            }
        }
        
        /// <remarks/>
        public string LocalTax {
            get {
                return this.localTaxField;
            }
            set {
                this.localTaxField = value;
            }
        }
        
        /// <remarks/>
        public string LocalTaxAuthority {
            get {
                return this.localTaxAuthorityField;
            }
            set {
                this.localTaxAuthorityField = value;
            }
        }
        
        /// <remarks/>
        public int MerchantId {
            get {
                return this.merchantIdField;
            }
            set {
                this.merchantIdField = value;
            }
        }
        
        /// <remarks/>
        public string NationalTax {
            get {
                return this.nationalTaxField;
            }
            set {
                this.nationalTaxField = value;
            }
        }
        
        /// <remarks/>
        public string NationalTaxAuthority {
            get {
                return this.nationalTaxAuthorityField;
            }
            set {
                this.nationalTaxAuthorityField = value;
            }
        }
        
        /// <remarks/>
        public string OtherTax {
            get {
                return this.otherTaxField;
            }
            set {
                this.otherTaxField = value;
            }
        }
        
        /// <remarks/>
        public string OtherTaxAuthority {
            get {
                return this.otherTaxAuthorityField;
            }
            set {
                this.otherTaxAuthorityField = value;
            }
        }
        
        /// <remarks/>
        public string ReferredId {
            get {
                return this.referredIdField;
            }
            set {
                this.referredIdField = value;
            }
        }
        
        /// <remarks/>
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
            }
        }
        
        /// <remarks/>
        public string StateTax {
            get {
                return this.stateTaxField;
            }
            set {
                this.stateTaxField = value;
            }
        }
        
        /// <remarks/>
        public string StateTaxAuthority {
            get {
                return this.stateTaxAuthorityField;
            }
            set {
                this.stateTaxAuthorityField = value;
            }
        }
        
        /// <remarks/>
        public string TotalTax {
            get {
                return this.totalTaxField;
            }
            set {
                this.totalTaxField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    public partial class CorrectedAddress : MarshalByRefObject {
        
        private string cityField;
        
        private string geoCodeField;
        
        private string nameField;
        
        private string postalCodeField;
        
        private string stateField;
        
        private string street1Field;
        
        private string street2Field;
        
        private string nationISO2AbbreviationField;
        
        private string nationISO3AbbreviationField;
        
        private string nationNameField;
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string GeoCode {
            get {
                return this.geoCodeField;
            }
            set {
                this.geoCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Street1 {
            get {
                return this.street1Field;
            }
            set {
                this.street1Field = value;
            }
        }
        
        /// <remarks/>
        public string Street2 {
            get {
                return this.street2Field;
            }
            set {
                this.street2Field = value;
            }
        }
        
        /// <remarks/>
        public string NationISO2Abbreviation {
            get {
                return this.nationISO2AbbreviationField;
            }
            set {
                this.nationISO2AbbreviationField = value;
            }
        }
        
        /// <remarks/>
        public string NationISO3Abbreviation {
            get {
                return this.nationISO3AbbreviationField;
            }
            set {
                this.nationISO3AbbreviationField = value;
            }
        }
        
        /// <remarks/>
        public string NationName {
            get {
                return this.nationNameField;
            }
            set {
                this.nationNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(OrderLineItem))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Address))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(Order))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(TaxTransactionLineItem))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CorrectedAddress))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(TaxTransaction))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    public abstract partial class MarshalByRefObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    public partial class OrderLineItem : MarshalByRefObject {
        
        private string itemIdField;
        
        private string stockingUnitField;
        
        private int quantityField;
        
        private string extendedPriceField;
        
        private int productCodeField;
        
        /// <remarks/>
        public string ItemId {
            get {
                return this.itemIdField;
            }
            set {
                this.itemIdField = value;
            }
        }
        
        /// <remarks/>
        public string StockingUnit {
            get {
                return this.stockingUnitField;
            }
            set {
                this.stockingUnitField = value;
            }
        }
        
        /// <remarks/>
        public int Quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
            }
        }
        
        /// <remarks/>
        public string ExtendedPrice {
            get {
                return this.extendedPriceField;
            }
            set {
                this.extendedPriceField = value;
            }
        }
        
        /// <remarks/>
        public int ProductCode {
            get {
                return this.productCodeField;
            }
            set {
                this.productCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    public partial class Address : MarshalByRefObject {
        
        private string cityField;
        
        private string countyField;
        
        private string nameField;
        
        private string nationField;
        
        private string postalCodeField;
        
        private string stateField;
        
        private string street1Field;
        
        private string street2Field;
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string County {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Nation {
            get {
                return this.nationField;
            }
            set {
                this.nationField = value;
            }
        }
        
        /// <remarks/>
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Street1 {
            get {
                return this.street1Field;
            }
            set {
                this.street1Field = value;
            }
        }
        
        /// <remarks/>
        public string Street2 {
            get {
                return this.street2Field;
            }
            set {
                this.street2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    public partial class Order : MarshalByRefObject {
        
        private Address addressField;
        
        private bool calculateTaxField;
        
        private string certiTAXTransactionIdField;
        
        private bool confirmAddressField;
        
        private int defaultProductCodeField;
        
        private string handlingChargeField;
        
        private OrderLineItem[] lineItemsField;
        
        private string locationField;
        
        private string merchantTransactionIdField;
        
        private string nexusField;
        
        private string referredIdField;
        
        private string serialNumberField;
        
        private string shippingChargeField;
        
        private string taxExemptCertificateField;
        
        private string taxExemptIssuerField;
        
        private string taxExemptReasonField;
        
        private string totalField;
        
        /// <remarks/>
        public Address Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public bool CalculateTax {
            get {
                return this.calculateTaxField;
            }
            set {
                this.calculateTaxField = value;
            }
        }
        
        /// <remarks/>
        public string CertiTAXTransactionId {
            get {
                return this.certiTAXTransactionIdField;
            }
            set {
                this.certiTAXTransactionIdField = value;
            }
        }
        
        /// <remarks/>
        public bool ConfirmAddress {
            get {
                return this.confirmAddressField;
            }
            set {
                this.confirmAddressField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultProductCode {
            get {
                return this.defaultProductCodeField;
            }
            set {
                this.defaultProductCodeField = value;
            }
        }
        
        /// <remarks/>
        public string HandlingCharge {
            get {
                return this.handlingChargeField;
            }
            set {
                this.handlingChargeField = value;
            }
        }
        
        /// <remarks/>
        public OrderLineItem[] LineItems {
            get {
                return this.lineItemsField;
            }
            set {
                this.lineItemsField = value;
            }
        }
        
        /// <remarks/>
        public string Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string MerchantTransactionId {
            get {
                return this.merchantTransactionIdField;
            }
            set {
                this.merchantTransactionIdField = value;
            }
        }
        
        /// <remarks/>
        public string Nexus {
            get {
                return this.nexusField;
            }
            set {
                this.nexusField = value;
            }
        }
        
        /// <remarks/>
        public string ReferredId {
            get {
                return this.referredIdField;
            }
            set {
                this.referredIdField = value;
            }
        }
        
        /// <remarks/>
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ShippingCharge {
            get {
                return this.shippingChargeField;
            }
            set {
                this.shippingChargeField = value;
            }
        }
        
        /// <remarks/>
        public string TaxExemptCertificate {
            get {
                return this.taxExemptCertificateField;
            }
            set {
                this.taxExemptCertificateField = value;
            }
        }
        
        /// <remarks/>
        public string TaxExemptIssuer {
            get {
                return this.taxExemptIssuerField;
            }
            set {
                this.taxExemptIssuerField = value;
            }
        }
        
        /// <remarks/>
        public string TaxExemptReason {
            get {
                return this.taxExemptReasonField;
            }
            set {
                this.taxExemptReasonField = value;
            }
        }
        
        /// <remarks/>
        public string Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://webservices.esalestax.net/CertiTAX.NET")]
    public partial class TaxTransactionLineItem : MarshalByRefObject {
        
        private string itemIdField;
        
        private bool cityTaxAppliedField;
        
        private bool countyTaxAppliedField;
        
        private bool localTaxAppliedField;
        
        private bool nationalTaxAppliedField;
        
        private bool otherTaxAppliedField;
        
        private bool stateTaxAppliedField;
        
        /// <remarks/>
        public string ItemId {
            get {
                return this.itemIdField;
            }
            set {
                this.itemIdField = value;
            }
        }
        
        /// <remarks/>
        public bool CityTaxApplied {
            get {
                return this.cityTaxAppliedField;
            }
            set {
                this.cityTaxAppliedField = value;
            }
        }
        
        /// <remarks/>
        public bool CountyTaxApplied {
            get {
                return this.countyTaxAppliedField;
            }
            set {
                this.countyTaxAppliedField = value;
            }
        }
        
        /// <remarks/>
        public bool LocalTaxApplied {
            get {
                return this.localTaxAppliedField;
            }
            set {
                this.localTaxAppliedField = value;
            }
        }
        
        /// <remarks/>
        public bool NationalTaxApplied {
            get {
                return this.nationalTaxAppliedField;
            }
            set {
                this.nationalTaxAppliedField = value;
            }
        }
        
        /// <remarks/>
        public bool OtherTaxApplied {
            get {
                return this.otherTaxAppliedField;
            }
            set {
                this.otherTaxAppliedField = value;
            }
        }
        
        /// <remarks/>
        public bool StateTaxApplied {
            get {
                return this.stateTaxAppliedField;
            }
            set {
                this.stateTaxAppliedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AbandonCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Abandon1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Abandon2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CalculateCompletedEventHandler(object sender, CalculateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate1CompletedEventHandler(object sender, Calculate1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate2CompletedEventHandler(object sender, Calculate2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate3CompletedEventHandler(object sender, Calculate3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate4CompletedEventHandler(object sender, Calculate4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate5CompletedEventHandler(object sender, Calculate5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate6CompletedEventHandler(object sender, Calculate6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate7CompletedEventHandler(object sender, Calculate7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate8CompletedEventHandler(object sender, Calculate8CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate8CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate8CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate9CompletedEventHandler(object sender, Calculate9CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate9CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate9CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate10CompletedEventHandler(object sender, Calculate10CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate10CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate10CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate11CompletedEventHandler(object sender, Calculate11CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate11CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate11CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate12CompletedEventHandler(object sender, Calculate12CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate12CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate12CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate13CompletedEventHandler(object sender, Calculate13CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate13CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate13CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate14CompletedEventHandler(object sender, Calculate14CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate14CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate14CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate15CompletedEventHandler(object sender, Calculate15CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate15CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate15CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate16CompletedEventHandler(object sender, Calculate16CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate16CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate16CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Calculate17CompletedEventHandler(object sender, Calculate17CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Calculate17CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Calculate17CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Cancel1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Cancel2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CommitCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Commit1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Commit2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLossCompletedEventHandler(object sender, ProcessAttributedLossCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLossCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLossCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss1CompletedEventHandler(object sender, ProcessAttributedLoss1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss2CompletedEventHandler(object sender, ProcessAttributedLoss2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss3CompletedEventHandler(object sender, ProcessAttributedLoss3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss4CompletedEventHandler(object sender, ProcessAttributedLoss4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss5CompletedEventHandler(object sender, ProcessAttributedLoss5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss6CompletedEventHandler(object sender, ProcessAttributedLoss6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss7CompletedEventHandler(object sender, ProcessAttributedLoss7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss8CompletedEventHandler(object sender, ProcessAttributedLoss8CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss8CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss8CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedLoss9CompletedEventHandler(object sender, ProcessAttributedLoss9CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedLoss9CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedLoss9CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturnCompletedEventHandler(object sender, ProcessAttributedReturnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn1CompletedEventHandler(object sender, ProcessAttributedReturn1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn2CompletedEventHandler(object sender, ProcessAttributedReturn2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn3CompletedEventHandler(object sender, ProcessAttributedReturn3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn4CompletedEventHandler(object sender, ProcessAttributedReturn4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn5CompletedEventHandler(object sender, ProcessAttributedReturn5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn6CompletedEventHandler(object sender, ProcessAttributedReturn6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn7CompletedEventHandler(object sender, ProcessAttributedReturn7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn8CompletedEventHandler(object sender, ProcessAttributedReturn8CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn8CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn8CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessAttributedReturn9CompletedEventHandler(object sender, ProcessAttributedReturn9CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessAttributedReturn9CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessAttributedReturn9CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLossCompletedEventHandler(object sender, ProcessUnattributedLossCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLossCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLossCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss1CompletedEventHandler(object sender, ProcessUnattributedLoss1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss2CompletedEventHandler(object sender, ProcessUnattributedLoss2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss3CompletedEventHandler(object sender, ProcessUnattributedLoss3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss4CompletedEventHandler(object sender, ProcessUnattributedLoss4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss5CompletedEventHandler(object sender, ProcessUnattributedLoss5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss6CompletedEventHandler(object sender, ProcessUnattributedLoss6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss7CompletedEventHandler(object sender, ProcessUnattributedLoss7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss8CompletedEventHandler(object sender, ProcessUnattributedLoss8CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss8CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss8CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedLoss9CompletedEventHandler(object sender, ProcessUnattributedLoss9CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedLoss9CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedLoss9CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturnCompletedEventHandler(object sender, ProcessUnattributedReturnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn1CompletedEventHandler(object sender, ProcessUnattributedReturn1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn2CompletedEventHandler(object sender, ProcessUnattributedReturn2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn3CompletedEventHandler(object sender, ProcessUnattributedReturn3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn4CompletedEventHandler(object sender, ProcessUnattributedReturn4CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn5CompletedEventHandler(object sender, ProcessUnattributedReturn5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn6CompletedEventHandler(object sender, ProcessUnattributedReturn6CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn6CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn6CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn7CompletedEventHandler(object sender, ProcessUnattributedReturn7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn8CompletedEventHandler(object sender, ProcessUnattributedReturn8CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn8CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn8CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessUnattributedReturn9CompletedEventHandler(object sender, ProcessUnattributedReturn9CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessUnattributedReturn9CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessUnattributedReturn9CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaxTransaction Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaxTransaction)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591