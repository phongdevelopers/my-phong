//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Marketing;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Marketing
{
    /// <summary>
    /// This class represents a VolumeDiscountLevel object in the database.
    /// </summary>
    public partial class VolumeDiscountLevel : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public VolumeDiscountLevel() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="volumeDiscountLevelId">Value of VolumeDiscountLevelId.</param>
        /// </summary>
        public VolumeDiscountLevel(Int32 volumeDiscountLevelId)
        {
            this.VolumeDiscountLevelId = volumeDiscountLevelId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "VolumeDiscountLevelId");
          columnNames.Add(prefix + "VolumeDiscountId");
          columnNames.Add(prefix + "MinValue");
          columnNames.Add(prefix + "MaxValue");
          columnNames.Add(prefix + "DiscountAmount");
          columnNames.Add(prefix + "IsPercent");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given VolumeDiscountLevel object from the given database data reader.
        /// </summary>
        /// <param name="volumeDiscountLevel">The VolumeDiscountLevel object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(VolumeDiscountLevel volumeDiscountLevel, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            volumeDiscountLevel.VolumeDiscountLevelId = dr.GetInt32(0);
            volumeDiscountLevel.VolumeDiscountId = dr.GetInt32(1);
            volumeDiscountLevel.MinValue = dr.GetDecimal(2);
            volumeDiscountLevel.MaxValue = dr.GetDecimal(3);
            volumeDiscountLevel.DiscountAmount = dr.GetDecimal(4);
            volumeDiscountLevel.IsPercent = dr.GetBoolean(5);
            volumeDiscountLevel.IsDirty = false;
        }

#endregion

        private Int32 _VolumeDiscountLevelId;
        private Int32 _VolumeDiscountId;
        private LSDecimal _MinValue;
        private LSDecimal _MaxValue;
        private LSDecimal _DiscountAmount;
        private Boolean _IsPercent;
        private bool _IsDirty;

        /// <summary>
        /// VolumeDiscountLevelId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 VolumeDiscountLevelId
        {
            get { return this._VolumeDiscountLevelId; }
            set
            {
                if (this._VolumeDiscountLevelId != value)
                {
                    this._VolumeDiscountLevelId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// VolumeDiscountId
        /// </summary>
        public Int32 VolumeDiscountId
        {
            get { return this._VolumeDiscountId; }
            set
            {
                if (this._VolumeDiscountId != value)
                {
                    this._VolumeDiscountId = value;
                    this.IsDirty = true;
                    this._VolumeDiscount = null;
                }
            }
        }

        /// <summary>
        /// MinValue
        /// </summary>
        public LSDecimal MinValue
        {
            get { return this._MinValue; }
            set
            {
                if (this._MinValue != value)
                {
                    this._MinValue = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MaxValue
        /// </summary>
        public LSDecimal MaxValue
        {
            get { return this._MaxValue; }
            set
            {
                if (this._MaxValue != value)
                {
                    this._MaxValue = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DiscountAmount
        /// </summary>
        public LSDecimal DiscountAmount
        {
            get { return this._DiscountAmount; }
            set
            {
                if (this._DiscountAmount != value)
                {
                    this._DiscountAmount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsPercent
        /// </summary>
        public Boolean IsPercent
        {
            get { return this._IsPercent; }
            set
            {
                if (this._IsPercent != value)
                {
                    this._IsPercent = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this VolumeDiscountLevel object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private VolumeDiscount _VolumeDiscount;

        /// <summary>
        /// The VolumeDiscount object that this VolumeDiscountLevel object is associated with
        /// </summary>
        public VolumeDiscount VolumeDiscount
        {
            get
            {
                if (!this.VolumeDiscountLoaded)
                {
                    this._VolumeDiscount = VolumeDiscountDataSource.Load(this.VolumeDiscountId);
                }
                return this._VolumeDiscount;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool VolumeDiscountLoaded { get { return ((this._VolumeDiscount != null) && (this._VolumeDiscount.VolumeDiscountId == this.VolumeDiscountId)); } }

#endregion

        /// <summary>
        /// Deletes this VolumeDiscountLevel object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_VolumeDiscountLevels");
            deleteQuery.Append(" WHERE VolumeDiscountLevelId = @VolumeDiscountLevelId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@VolumeDiscountLevelId", System.Data.DbType.Int32, this.VolumeDiscountLevelId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this VolumeDiscountLevel object from the database for the given primary key.
        /// </summary>
        /// <param name="volumeDiscountLevelId">Value of VolumeDiscountLevelId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 volumeDiscountLevelId)
        {
            bool result = false;
            this.VolumeDiscountLevelId = volumeDiscountLevelId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_VolumeDiscountLevels");
            selectQuery.Append(" WHERE VolumeDiscountLevelId = @volumeDiscountLevelId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@volumeDiscountLevelId", System.Data.DbType.Int32, volumeDiscountLevelId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this VolumeDiscountLevel object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.VolumeDiscountLevelId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_VolumeDiscountLevels");
                    selectQuery.Append(" WHERE VolumeDiscountLevelId = @VolumeDiscountLevelId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@VolumeDiscountLevelId", System.Data.DbType.Int32, this.VolumeDiscountLevelId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_VolumeDiscountLevels SET ");
                    updateQuery.Append("VolumeDiscountId = @VolumeDiscountId");
                    updateQuery.Append(", MinValue = @MinValue");
                    updateQuery.Append(", MaxValue = @MaxValue");
                    updateQuery.Append(", DiscountAmount = @DiscountAmount");
                    updateQuery.Append(", IsPercent = @IsPercent");
                    updateQuery.Append(" WHERE VolumeDiscountLevelId = @VolumeDiscountLevelId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@VolumeDiscountLevelId", System.Data.DbType.Int32, this.VolumeDiscountLevelId);
                        database.AddInParameter(updateCommand, "@VolumeDiscountId", System.Data.DbType.Int32, this.VolumeDiscountId);
                        database.AddInParameter(updateCommand, "@MinValue", System.Data.DbType.Decimal, this.MinValue);
                        database.AddInParameter(updateCommand, "@MaxValue", System.Data.DbType.Decimal, this.MaxValue);
                        database.AddInParameter(updateCommand, "@DiscountAmount", System.Data.DbType.Decimal, this.DiscountAmount);
                        database.AddInParameter(updateCommand, "@IsPercent", System.Data.DbType.Boolean, this.IsPercent);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_VolumeDiscountLevels (VolumeDiscountId, MinValue, MaxValue, DiscountAmount, IsPercent)");
                    insertQuery.Append(" VALUES (@VolumeDiscountId, @MinValue, @MaxValue, @DiscountAmount, @IsPercent)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@VolumeDiscountLevelId", System.Data.DbType.Int32, this.VolumeDiscountLevelId);
                        database.AddInParameter(insertCommand, "@VolumeDiscountId", System.Data.DbType.Int32, this.VolumeDiscountId);
                        database.AddInParameter(insertCommand, "@MinValue", System.Data.DbType.Decimal, this.MinValue);
                        database.AddInParameter(insertCommand, "@MaxValue", System.Data.DbType.Decimal, this.MaxValue);
                        database.AddInParameter(insertCommand, "@DiscountAmount", System.Data.DbType.Decimal, this.DiscountAmount);
                        database.AddInParameter(insertCommand, "@IsPercent", System.Data.DbType.Boolean, this.IsPercent);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._VolumeDiscountLevelId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
