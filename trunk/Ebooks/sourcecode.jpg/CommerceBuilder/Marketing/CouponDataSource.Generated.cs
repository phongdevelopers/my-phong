//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Marketing
{
    /// <summary>
    /// DataSource class for Coupon objects
    /// </summary>
    public partial class CouponDataSource
    {
        /// <summary>
        /// Deletes a Coupon object from the database
        /// </summary>
        /// <param name="coupon">The Coupon object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(Coupon coupon)
        {
            return coupon.Delete();
        }

        /// <summary>
        /// Deletes a Coupon object with given id from the database
        /// </summary>
        /// <param name="couponId">Value of CouponId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 couponId)
        {
            Coupon coupon = new Coupon();
            if (coupon.Load(couponId)) return coupon.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a Coupon object to the database.
        /// </summary>
        /// <param name="coupon">The Coupon object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(Coupon coupon) { return coupon.Save(); }

        /// <summary>
        /// Loads a Coupon object for given Id from the database.
        /// </summary>
        /// <param name="couponId">Value of CouponId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded Coupon object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Coupon Load(Int32 couponId)
        {
            return CouponDataSource.Load(couponId, true);
        }

        /// <summary>
        /// Loads a Coupon object for given Id from the database.
        /// </summary>
        /// <param name="couponId">Value of CouponId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded Coupon object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Coupon Load(Int32 couponId, bool useCache)
        {
            if (couponId == 0) return null;
            Coupon coupon = null;
            string key = "Coupon_" + couponId.ToString();
            if (useCache)
            {
                coupon = ContextCache.GetObject(key) as Coupon;
                if (coupon != null) return coupon;
            }
            coupon = new Coupon();
            if (coupon.Load(couponId))
            {
                if (useCache) ContextCache.SetObject(key, coupon);
                return coupon;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of Coupon objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the Coupon objects that should be loaded.</param>
        /// <returns>The number of Coupon objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Coupons" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Coupon objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Coupon objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Coupon objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Coupon objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Coupon.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Coupons");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            CouponCollection results = new CouponCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Coupon coupon = new Coupon();
                        Coupon.LoadDataReader(coupon, dr);
                        results.Add(coupon);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Coupon objects associated with the given BasketId
        /// </summary>
        /// <param name="basketId">The given BasketId</param>
        /// <returns>The number of Coupon objects associated with with the given BasketId</returns>
        public static int CountForBasket(Int32 basketId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_BasketCoupons WHERE BasketId = @basketId");
            database.AddInParameter(selectCommand, "@basketId", System.Data.DbType.Int32, basketId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given BasketId
        /// </summary>
        /// <param name="basketId">The given BasketId</param>
        /// <returns>A collection of Coupon objects associated with with the given BasketId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForBasket(Int32 basketId)
        {
            return CouponDataSource.LoadForBasket(basketId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given BasketId
        /// </summary>
        /// <param name="basketId">The given BasketId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given BasketId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForBasket(Int32 basketId, string sortExpression)
        {
            return CouponDataSource.LoadForBasket(basketId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given BasketId
        /// </summary>
        /// <param name="basketId">The given BasketId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Coupon objects associated with with the given BasketId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForBasket(Int32 basketId, int maximumRows, int startRowIndex)
        {
            return CouponDataSource.LoadForBasket(basketId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given BasketId
        /// </summary>
        /// <param name="basketId">The given BasketId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given BasketId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForBasket(Int32 basketId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Coupon.GetColumnNames("ac_Coupons"));
            selectQuery.Append(" FROM ac_Coupons, ac_BasketCoupons");
            selectQuery.Append(" WHERE ac_Coupons.CouponId = ac_BasketCoupons.CouponId");
            selectQuery.Append(" AND ac_BasketCoupons.BasketId = @basketId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@basketId", System.Data.DbType.Int32, basketId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            CouponCollection results = new CouponCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Coupon coupon = new Coupon();
                        Coupon.LoadDataReader(coupon, dr);
                        results.Add(coupon);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Coupon objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <returns>The number of Coupon objects associated with with the given GroupId</returns>
        public static int CountForGroup(Int32 groupId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_CouponGroups WHERE GroupId = @groupId");
            database.AddInParameter(selectCommand, "@groupId", System.Data.DbType.Int32, groupId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <returns>A collection of Coupon objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForGroup(Int32 groupId)
        {
            return CouponDataSource.LoadForGroup(groupId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForGroup(Int32 groupId, string sortExpression)
        {
            return CouponDataSource.LoadForGroup(groupId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Coupon objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForGroup(Int32 groupId, int maximumRows, int startRowIndex)
        {
            return CouponDataSource.LoadForGroup(groupId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given GroupId
        /// </summary>
        /// <param name="groupId">The given GroupId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given GroupId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForGroup(Int32 groupId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Coupon.GetColumnNames("ac_Coupons"));
            selectQuery.Append(" FROM ac_Coupons, ac_CouponGroups");
            selectQuery.Append(" WHERE ac_Coupons.CouponId = ac_CouponGroups.CouponId");
            selectQuery.Append(" AND ac_CouponGroups.GroupId = @groupId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@groupId", System.Data.DbType.Int32, groupId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            CouponCollection results = new CouponCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Coupon coupon = new Coupon();
                        Coupon.LoadDataReader(coupon, dr);
                        results.Add(coupon);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Coupon objects associated with the given ProductId
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <returns>The number of Coupon objects associated with with the given ProductId</returns>
        public static int CountForProduct(Int32 productId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_CouponProducts WHERE ProductId = @productId");
            database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, productId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ProductId
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <returns>A collection of Coupon objects associated with with the given ProductId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForProduct(Int32 productId)
        {
            return CouponDataSource.LoadForProduct(productId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ProductId
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given ProductId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForProduct(Int32 productId, string sortExpression)
        {
            return CouponDataSource.LoadForProduct(productId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ProductId
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Coupon objects associated with with the given ProductId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForProduct(Int32 productId, int maximumRows, int startRowIndex)
        {
            return CouponDataSource.LoadForProduct(productId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ProductId
        /// </summary>
        /// <param name="productId">The given ProductId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given ProductId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForProduct(Int32 productId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Coupon.GetColumnNames("ac_Coupons"));
            selectQuery.Append(" FROM ac_Coupons, ac_CouponProducts");
            selectQuery.Append(" WHERE ac_Coupons.CouponId = ac_CouponProducts.CouponId");
            selectQuery.Append(" AND ac_CouponProducts.ProductId = @productId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, productId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            CouponCollection results = new CouponCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Coupon coupon = new Coupon();
                        Coupon.LoadDataReader(coupon, dr);
                        results.Add(coupon);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Coupon objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <returns>The number of Coupon objects associated with with the given ShipMethodId</returns>
        public static int CountForShipMethod(Int32 shipMethodId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_CouponShipMethods WHERE ShipMethodId = @shipMethodId");
            database.AddInParameter(selectCommand, "@shipMethodId", System.Data.DbType.Int32, shipMethodId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <returns>A collection of Coupon objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForShipMethod(Int32 shipMethodId)
        {
            return CouponDataSource.LoadForShipMethod(shipMethodId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForShipMethod(Int32 shipMethodId, string sortExpression)
        {
            return CouponDataSource.LoadForShipMethod(shipMethodId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Coupon objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForShipMethod(Int32 shipMethodId, int maximumRows, int startRowIndex)
        {
            return CouponDataSource.LoadForShipMethod(shipMethodId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Coupon objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForShipMethod(Int32 shipMethodId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Coupon.GetColumnNames("ac_Coupons"));
            selectQuery.Append(" FROM ac_Coupons, ac_CouponShipMethods");
            selectQuery.Append(" WHERE ac_Coupons.CouponId = ac_CouponShipMethods.CouponId");
            selectQuery.Append(" AND ac_CouponShipMethods.ShipMethodId = @shipMethodId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipMethodId", System.Data.DbType.Int32, shipMethodId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            CouponCollection results = new CouponCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Coupon coupon = new Coupon();
                        Coupon.LoadDataReader(coupon, dr);
                        results.Add(coupon);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Coupon objects for the current store.
        /// </summary>
        /// <returns>The Number of Coupon objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Coupons WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Coupon objects for the current store from the database
        /// </summary>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Coupon objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Coupon objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Coupon objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Coupon objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static CouponCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Coupon.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Coupons");
            selectQuery.Append(" WHERE StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            CouponCollection results = new CouponCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Coupon coupon = new Coupon();
                        Coupon.LoadDataReader(coupon, dr);
                        results.Add(coupon);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given Coupon object to the database.
        /// </summary>
        /// <param name="coupon">The Coupon object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(Coupon coupon) { return coupon.Save(); }

    }
}
