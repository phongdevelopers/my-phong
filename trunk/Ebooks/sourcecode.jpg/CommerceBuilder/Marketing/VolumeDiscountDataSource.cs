//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Products;
using CommerceBuilder.Utility;
using CommerceBuilder.Users;

namespace CommerceBuilder.Marketing
{
    /// <summary>
    /// DataSource class for VolumeDiscount objects
    /// </summary>
    [DataObject(true)]
    public partial class VolumeDiscountDataSource
    {
        /// <summary>
        /// Gets the Ids of the global discounts defined for the store.
        /// </summary>
        /// <returns>An array of int, containing the ids of the global discounts.  If no global discounts are defined, returns null.</returns>
        public static int[] GetGlobalVolumeDiscountIds()
        {
            List<int> globalDiscounts = new List<int>();
            //CREATE THE COMMAND
            Database database = Token.Instance.Database;
            DbCommand command = database.GetSqlStringCommand("SELECT VolumeDiscountId FROM ac_VolumeDiscounts WHERE StoreId = @storeId AND IsGlobal = 1");
            database.AddInParameter(command, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            using (IDataReader dr = database.ExecuteReader(command))
            {
                while (dr.Read())
                {
                    globalDiscounts.Add(dr.GetInt32(0));
                }
                dr.Close();
            }
            if (globalDiscounts.Count == 0) return null;
            return globalDiscounts.ToArray();
        }

        /// <summary>
        /// Counts the number of global discounts in the current store
        /// </summary>
        /// <returns>The number of global discounts in the current store</returns>
        public static int CountGlobal()
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_CategoryVolumeDiscounts WHERE StoreId = @storeId AND IsGlobal = 1");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads all the global discounts for the current store
        /// </summary>
        /// <returns>A collection of global volume discounts for the current store</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountCollection LoadGlobal()
        {
            return VolumeDiscountDataSource.LoadGlobal(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads all the global discounts for the current store
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of global volume discounts for the current store</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountCollection LoadGlobal(string sortExpression)
        {
            return VolumeDiscountDataSource.LoadGlobal(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads all the global discounts for the current store
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of global volume discounts for the current store</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountCollection LoadGlobal(int maximumRows, int startRowIndex)
        {
            return VolumeDiscountDataSource.LoadGlobal(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads all the global discounts for the current store
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of global volume discounts for the current store</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static VolumeDiscountCollection LoadGlobal(int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + VolumeDiscount.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_VolumeDiscounts");
            selectQuery.Append(" WHERE StoreId = @storeId");
            selectQuery.Append(" AND IsGlobal = 1");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            VolumeDiscountCollection results = new VolumeDiscountCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        VolumeDiscount volumeDiscount = new VolumeDiscount();
                        VolumeDiscount.LoadDataReader(volumeDiscount, dr);
                        results.Add(volumeDiscount);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Returns a collection of discounts available for a product for the current user.
        /// </summary>
        /// <param name="productId">ID of the product to test</param>
        /// <returns>A collection of discounts available for a product for the current user.</returns>
        public static VolumeDiscountCollection GetAvailableDiscounts(int productId)
        {
            //CHECK IF THIS IS A GIFT CERTIFICATE PRODUCT
            Product p = ProductDataSource.Load(productId);

            //DISCOUNTS ONLY AVAILABLE FOR VALID, NON-GIFT CERTIFICATE PRODUCTS
            if ((p == null) || (p.IsGiftCertificate)) return new VolumeDiscountCollection();

            //IF THERE ARE DISCOUNTS AT THE PRODUCT LEVEL WE WILL NOT PROCESS FURTHER
            VolumeDiscountCollection productDiscounts = GetProductDiscountsForProduct(productId);
            if (productDiscounts.Count > 0) return productDiscounts;

            //RETURN ANY AVAILABLE CATEGORY DISCOUNTS
            return GetCategoryDiscountsForProduct(productId);
        }

        /// <summary>
        /// Get discounts that apply to a specific product for the current user
        /// </summary>
        /// <param name="productId">ID of the product to check</param>
        /// <returns>Discounts that apply to a specific product for the current user.</returns>
        private static VolumeDiscountCollection GetProductDiscountsForProduct(int productId)
        {
            //INITIALIZE THE RETURN SET
            VolumeDiscountCollection availableDiscounts = new VolumeDiscountCollection();
            //FIRST GET DISCOUNTS APPLIED DIRECTLY TO PRODUCT
            VolumeDiscountCollection productDiscounts = VolumeDiscountDataSource.LoadForProduct(productId);
            //TEST DISCOUNTS FOR USER
            foreach (VolumeDiscount testDiscount in productDiscounts)
            {
                if (testDiscount.IsValidForUser(Token.Instance.User))
                {
                    availableDiscounts.Add(testDiscount);
                }
            }
            return availableDiscounts;
        }

        /// <summary>
        /// Get discounts that apply to a product by virtue of category assignment.
        /// </summary>
        /// <param name="productId">The product to check for category discounts</param>
        /// <returns>The discounts that apply to a product</returns>
        private static VolumeDiscountCollection GetCategoryDiscountsForProduct(int productId)
        {
            //FIND ALL PRODUCTS THAT ARE A DESCENDANT OF THE CATEGORY
            StringBuilder categorySql = new StringBuilder();
            categorySql.Append("SELECT DISTINCT CP.ParentLevel,CVD.VolumeDiscountId");
            categorySql.Append(" FROM ((ac_CatalogNodes CN INNER JOIN ac_CategoryParents CP ON CN.CategoryId = CP.CategoryId)");
            categorySql.Append(" INNER JOIN ac_CategoryVolumeDiscounts CVD ON CP.ParentId = CVD.CategoryId)");
            categorySql.Append(" WHERE CN.CatalogNodeId = @productId");
            categorySql.Append(" AND CN.CatalogNodeTypeId = 1");
            categorySql.Append(" ORDER BY CP.ParentLevel DESC");

            //EXECUTE THE QUERY
            Database database = Token.Instance.Database;
            DbCommand command = database.GetSqlStringCommand(categorySql.ToString());
            database.AddInParameter(command, "@productId", System.Data.DbType.Int32, productId);

            //BUILD LIST OF VOLUME DISCOUNT IDS APPLICABLE FOR THE USER
            User user = Token.Instance.User;
            List<int> volumeDiscountIds = new List<int>();
            int lastLevel = -1;
            bool levelChanged = false;
            using (IDataReader dr = database.ExecuteReader(command))
            {
                while (dr.Read() && !levelChanged)
                {
                    int thisLevel = (int)dr.GetByte(0);
                    int volumeDiscountId = dr.GetInt32(1);
                    VolumeDiscount v = VolumeDiscountDataSource.Load(volumeDiscountId);
                    if (v.IsValidForUser(user))
                    {
                        if ((lastLevel > -1) && (lastLevel != thisLevel)) levelChanged = true;
                        else
                        {
                            volumeDiscountIds.Add(dr.GetInt32(1));
                            lastLevel = thisLevel;
                        }
                    }
                }
                dr.Close();
            }

            //INITIALIZE THE RETURN SET
            VolumeDiscountCollection discounts = new VolumeDiscountCollection();
            //DID WE FIND DISCOUNTS ON A CATEGORY?
            if (volumeDiscountIds.Count > 0)
            {
                //BUILD THE COLLECTION OF DISCOUNTS
                foreach (int id in volumeDiscountIds)
                {
                    VolumeDiscount v = VolumeDiscountDataSource.Load(id);
                    if (v != null) discounts.Add(v);
                }
            }
            else
            {
                //NO DISCOUNT FOUND ON A CATEGORY, RETURN ANY GLOBAL DISCOUNTS
                VolumeDiscountCollection globalDiscounts = VolumeDiscountDataSource.LoadGlobal();
                foreach (VolumeDiscount v in globalDiscounts)
                {
                    if (v.IsValidForUser(user)) discounts.Add(v);
                }
            }
            //RETURN ANY CATEGORY DISCOUNTS FOUND
            return discounts;
        }
    }
}
