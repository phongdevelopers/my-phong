//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Catalog;
using CommerceBuilder.Marketing;
using CommerceBuilder.Stores;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Catalog
{
    /// <summary>
    /// This class represents a Category object in the database.
    /// </summary>
    public partial class Category : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Category() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="categoryId">Value of CategoryId.</param>
        /// </summary>
        public Category(Int32 categoryId)
        {
            this.CategoryId = categoryId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "CategoryId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "ParentId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "Summary");
          columnNames.Add(prefix + "Description");
          columnNames.Add(prefix + "ThumbnailUrl");
          columnNames.Add(prefix + "ThumbnailAltText");
          columnNames.Add(prefix + "DisplayPage");
          columnNames.Add(prefix + "Theme");
          columnNames.Add(prefix + "HtmlHead");
          columnNames.Add(prefix + "VisibilityId");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Category object from the given database data reader.
        /// </summary>
        /// <param name="category">The Category object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Category category, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            category.CategoryId = dr.GetInt32(0);
            category.StoreId = dr.GetInt32(1);
            category.ParentId = dr.GetInt32(2);
            category.Name = dr.GetString(3);
            category.Summary = NullableData.GetString(dr, 4);
            category.Description = NullableData.GetString(dr, 5);
            category.ThumbnailUrl = NullableData.GetString(dr, 6);
            category.ThumbnailAltText = NullableData.GetString(dr, 7);
            category.DisplayPage = NullableData.GetString(dr, 8);
            category.Theme = NullableData.GetString(dr, 9);
            category.HtmlHead = NullableData.GetString(dr, 10);
            category.VisibilityId = dr.GetByte(11);
            category.IsDirty = false;
        }

#endregion

        private Int32 _CategoryId;
        private Int32 _StoreId;
        private Int32 _ParentId;
        private String _Name = string.Empty;
        private String _Summary = string.Empty;
        private String _Description = string.Empty;
        private String _ThumbnailUrl = string.Empty;
        private String _ThumbnailAltText = string.Empty;
        private String _DisplayPage = string.Empty;
        private String _Theme = string.Empty;
        private String _HtmlHead = string.Empty;
        private Byte _VisibilityId;
        private bool _IsDirty;

        /// <summary>
        /// CategoryId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 CategoryId
        {
            get { return this._CategoryId; }
            set
            {
                if (this._CategoryId != value)
                {
                    this._CategoryId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// ParentId
        /// </summary>
        public Int32 ParentId
        {
            get { return this._ParentId; }
            set
            {
                if (this._ParentId != value)
                {
                    this._ParentId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public override String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Summary
        /// </summary>
        public override String Summary
        {
            get { return this._Summary; }
            set
            {
                if (this._Summary != value)
                {
                    this._Summary = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Description
        /// </summary>
        public override String Description
        {
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this._Description = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailUrl
        /// </summary>
        public override String ThumbnailUrl
        {
            get { return this._ThumbnailUrl; }
            set
            {
                if (this._ThumbnailUrl != value)
                {
                    this._ThumbnailUrl = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailAltText
        /// </summary>
        public override String ThumbnailAltText
        {
            get
            {
                if (string.IsNullOrEmpty(_ThumbnailAltText)) return this.Name;
                if (_ThumbnailAltText == ".") return string.Empty;
                return _ThumbnailAltText;
            }
            set
            {
                if (this._ThumbnailAltText != value)
                {
                    this._ThumbnailAltText = value;
                    if (_ThumbnailAltText == this.Name) _ThumbnailAltText = string.Empty;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DisplayPage
        /// </summary>
        public override String DisplayPage
        {
            get { return this._DisplayPage; }
            set
            {
                if (this._DisplayPage != value)
                {
                    this._DisplayPage = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Theme
        /// </summary>
        public override String Theme
        {
            get { return this._Theme; }
            set
            {
                if (this._Theme != value)
                {
                    this._Theme = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// HtmlHead
        /// </summary>
        public override String HtmlHead
        {
            get { return this._HtmlHead; }
            set
            {
                if (this._HtmlHead != value)
                {
                    this._HtmlHead = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// VisibilityId
        /// </summary>
        public override Byte VisibilityId
        {
            get { return this._VisibilityId; }
            set
            {
                if (this._VisibilityId != value)
                {
                    this._VisibilityId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Category object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.CatalogNodesLoaded && this.CatalogNodes.IsDirty) return true;
                if (this.ParentsLoaded && this.Parents.IsDirty) return true;
                if (this.CategoryVolumeDiscountsLoaded && this.CategoryVolumeDiscounts.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Category are properly associated with this Category object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.CatalogNodesLoaded) { foreach (CatalogNode catalogNode in this.CatalogNodes) { catalogNode.CategoryId = this.CategoryId; } }
            if (this.ParentsLoaded) { foreach (CategoryParent categoryParent in this.Parents) { categoryParent.CategoryId = this.CategoryId; } }
            if (this.CategoryVolumeDiscountsLoaded) { foreach (CategoryVolumeDiscount categoryVolumeDiscount in this.CategoryVolumeDiscounts) { categoryVolumeDiscount.CategoryId = this.CategoryId; } }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this Category object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private CatalogNodeCollection _CatalogNodes;
        private CategoryParentCollection _Parents;

        /// <summary>
        /// A collection of CatalogNode objects associated with this Category object.
        /// </summary>
        public CatalogNodeCollection CatalogNodes
        {
            get
            {
                if (!this.CatalogNodesLoaded)
                {
                    this._CatalogNodes = CatalogNodeDataSource.LoadForCategory(this.CategoryId);
                }
                return this._CatalogNodes;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CatalogNodesLoaded { get { return (this._CatalogNodes != null); } }

        /// <summary>
        /// A collection of CategoryParent objects associated with this Category object.
        /// </summary>
        public CategoryParentCollection Parents
        {
            get
            {
                if (!this.ParentsLoaded)
                {
                    this._Parents = CategoryParentDataSource.LoadForCategory(this.CategoryId);
                }
                return this._Parents;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ParentsLoaded { get { return (this._Parents != null); } }

#endregion

#region Associations
        private CategoryVolumeDiscountCollection _CategoryVolumeDiscounts;

        /// <summary>
        /// A collection of CategoryVolumeDiscount objects associated with this Category object.
        /// </summary>
        public CategoryVolumeDiscountCollection CategoryVolumeDiscounts
        {
            get
            {
                if (!this.CategoryVolumeDiscountsLoaded)
                {
                    this._CategoryVolumeDiscounts = CategoryVolumeDiscountDataSource.LoadForCategory(this.CategoryId);
                }
                return this._CategoryVolumeDiscounts;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CategoryVolumeDiscountsLoaded { get { return (this._CategoryVolumeDiscounts != null); } }
#endregion

        /// <summary>
        /// Deletes this Category object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Categories");
            deleteQuery.Append(" WHERE CategoryId = @CategoryId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@CategoryId", System.Data.DbType.Int32, this.CategoryId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Category object from the database for the given primary key.
        /// </summary>
        /// <param name="categoryId">Value of CategoryId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 categoryId)
        {
            bool result = false;
            this.CategoryId = categoryId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Categories");
            selectQuery.Append(" WHERE CategoryId = @categoryId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@categoryId", System.Data.DbType.Int32, categoryId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Category object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.CategoryId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Categories");
                    selectQuery.Append(" WHERE CategoryId = @CategoryId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@CategoryId", System.Data.DbType.Int32, this.CategoryId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Categories SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", ParentId = @ParentId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", Summary = @Summary");
                    updateQuery.Append(", Description = @Description");
                    updateQuery.Append(", ThumbnailUrl = @ThumbnailUrl");
                    updateQuery.Append(", ThumbnailAltText = @ThumbnailAltText");
                    updateQuery.Append(", DisplayPage = @DisplayPage");
                    updateQuery.Append(", Theme = @Theme");
                    updateQuery.Append(", HtmlHead = @HtmlHead");
                    updateQuery.Append(", VisibilityId = @VisibilityId");
                    updateQuery.Append(" WHERE CategoryId = @CategoryId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@CategoryId", System.Data.DbType.Int32, this.CategoryId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@ParentId", System.Data.DbType.Int32, this.ParentId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@Summary", System.Data.DbType.String, NullableData.DbNullify(this.Summary));
                        database.AddInParameter(updateCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        database.AddInParameter(updateCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(updateCommand, "@ThumbnailAltText", System.Data.DbType.String, NullableData.DbNullify(_ThumbnailAltText));
                        database.AddInParameter(updateCommand, "@DisplayPage", System.Data.DbType.String, NullableData.DbNullify(this.DisplayPage));
                        database.AddInParameter(updateCommand, "@Theme", System.Data.DbType.String, NullableData.DbNullify(this.Theme));
                        database.AddInParameter(updateCommand, "@HtmlHead", System.Data.DbType.String, NullableData.DbNullify(this.HtmlHead));
                        database.AddInParameter(updateCommand, "@VisibilityId", System.Data.DbType.Byte, this.VisibilityId);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Categories (StoreId, ParentId, Name, Summary, Description, ThumbnailUrl, ThumbnailAltText, DisplayPage, Theme, HtmlHead, VisibilityId)");
                    insertQuery.Append(" VALUES (@StoreId, @ParentId, @Name, @Summary, @Description, @ThumbnailUrl, @ThumbnailAltText, @DisplayPage, @Theme, @HtmlHead, @VisibilityId)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@CategoryId", System.Data.DbType.Int32, this.CategoryId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@ParentId", System.Data.DbType.Int32, this.ParentId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@Summary", System.Data.DbType.String, NullableData.DbNullify(this.Summary));
                        database.AddInParameter(insertCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        database.AddInParameter(insertCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(insertCommand, "@ThumbnailAltText", System.Data.DbType.String, NullableData.DbNullify(_ThumbnailAltText));
                        database.AddInParameter(insertCommand, "@DisplayPage", System.Data.DbType.String, NullableData.DbNullify(this.DisplayPage));
                        database.AddInParameter(insertCommand, "@Theme", System.Data.DbType.String, NullableData.DbNullify(this.Theme));
                        database.AddInParameter(insertCommand, "@HtmlHead", System.Data.DbType.String, NullableData.DbNullify(this.HtmlHead));
                        database.AddInParameter(insertCommand, "@VisibilityId", System.Data.DbType.Byte, this.VisibilityId);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._CategoryId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Category object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.CatalogNodesLoaded) this.CatalogNodes.Save();
            if (this.ParentsLoaded) this.Parents.Save();
            if (this.CategoryVolumeDiscountsLoaded) this.CategoryVolumeDiscounts.Save();
        }

     }
}
