//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Products;
using CommerceBuilder.Taxes;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// This class represents a BasketItem object in the database.
    /// </summary>
    public partial class BasketItem : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public BasketItem() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="basketItemId">Value of BasketItemId.</param>
        /// </summary>
        public BasketItem(Int32 basketItemId)
        {
            this.BasketItemId = basketItemId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "BasketItemId");
          columnNames.Add(prefix + "ParentItemId");
          columnNames.Add(prefix + "BasketId");
          columnNames.Add(prefix + "BasketShipmentId");
          columnNames.Add(prefix + "ProductId");
          columnNames.Add(prefix + "OptionList");
          columnNames.Add(prefix + "TaxCodeId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "Sku");
          columnNames.Add(prefix + "Price");
          columnNames.Add(prefix + "Weight");
          columnNames.Add(prefix + "Quantity");
          columnNames.Add(prefix + "LineMessage");
          columnNames.Add(prefix + "OrderItemTypeId");
          columnNames.Add(prefix + "OrderBy");
          columnNames.Add(prefix + "WrapStyleId");
          columnNames.Add(prefix + "GiftMessage");
          columnNames.Add(prefix + "WishlistItemId");
          columnNames.Add(prefix + "ShippableId");
          columnNames.Add(prefix + "LastModifiedDate");
          columnNames.Add(prefix + "TaxRate");
          columnNames.Add(prefix + "TaxAmount");
          columnNames.Add(prefix + "KitList");
          columnNames.Add(prefix + "CustomFields");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given BasketItem object from the given database data reader.
        /// </summary>
        /// <param name="basketItem">The BasketItem object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(BasketItem basketItem, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            basketItem.BasketItemId = dr.GetInt32(0);
            basketItem.ParentItemId = dr.GetInt32(1);
            basketItem.BasketId = dr.GetInt32(2);
            basketItem.BasketShipmentId = NullableData.GetInt32(dr, 3);
            basketItem.ProductId = dr.GetInt32(4);
            basketItem.OptionList = NullableData.GetString(dr, 5);
            basketItem.TaxCodeId = NullableData.GetInt32(dr, 6);
            basketItem.Name = dr.GetString(7);
            basketItem.Sku = NullableData.GetString(dr, 8);
            basketItem.Price = dr.GetDecimal(9);
            basketItem.Weight = dr.GetDecimal(10);
            basketItem.Quantity = dr.GetInt16(11);
            basketItem.LineMessage = NullableData.GetString(dr, 12);
            basketItem.OrderItemTypeId = dr.GetInt16(13);
            basketItem.OrderBy = dr.GetInt16(14);
            basketItem.WrapStyleId = NullableData.GetInt32(dr, 15);
            basketItem.GiftMessage = NullableData.GetString(dr, 16);
            basketItem.WishlistItemId = NullableData.GetInt32(dr, 17);
            basketItem.ShippableId = dr.GetByte(18);
            basketItem.LastModifiedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(19));
            basketItem.TaxRate = dr.GetDecimal(20);
            basketItem.TaxAmount = dr.GetDecimal(21);
            basketItem.KitList = NullableData.GetString(dr, 22);
            basketItem.CustomFields.Parse(NullableData.GetString(dr, 23));
            basketItem.IsDirty = false;
        }

#endregion

        private Int32 _BasketItemId;
        private Int32 _ParentItemId;
        private Int32 _BasketId;
        private Int32 _BasketShipmentId;
        private Int32 _ProductId;
        private String _OptionList = string.Empty;
        private Int32 _TaxCodeId;
        private String _Name = string.Empty;
        private String _Sku = string.Empty;
        private LSDecimal _Price;
        private LSDecimal _Weight;
        private Int16 _Quantity;
        private String _LineMessage = string.Empty;
        private Int16 _OrderItemTypeId;
        private Int16 _OrderBy = -1;
        private Int32 _WrapStyleId;
        private String _GiftMessage = string.Empty;
        private Int32 _WishlistItemId;
        private Byte _ShippableId;
        private DateTime _LastModifiedDate;
        private LSDecimal _TaxRate;
        private LSDecimal _TaxAmount;
        private String _KitList = string.Empty;
        private UrlEncodedDictionary  _CustomFields = new UrlEncodedDictionary();
        private bool _IsDirty;

        /// <summary>
        /// BasketItemId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 BasketItemId
        {
            get { return this._BasketItemId; }
            set
            {
                if (this._BasketItemId != value)
                {
                    this._BasketItemId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// ParentItemId
        /// </summary>
        public Int32 ParentItemId
        {
            get { return this._ParentItemId; }
            set
            {
                if (this._ParentItemId != value)
                {
                    this._ParentItemId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BasketId
        /// </summary>
        public Int32 BasketId
        {
            get { return this._BasketId; }
            set
            {
                if (this._BasketId != value)
                {
                    this._BasketId = value;
                    this.IsDirty = true;
                    this._Basket = null;
                }
            }
        }

        /// <summary>
        /// BasketShipmentId
        /// </summary>
        public Int32 BasketShipmentId
        {
            get { return this._BasketShipmentId; }
            set
            {
                if (this._BasketShipmentId != value)
                {
                    this._BasketShipmentId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ProductId
        /// </summary>
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this._Product = null;
                }
            }
        }

        /// <summary>
        /// OptionList
        /// </summary>
        public String OptionList
        {
            get { return this._OptionList; }
            set
            {
                if (this._OptionList != value)
                {
                    this._OptionList = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxCodeId
        /// </summary>
        public Int32 TaxCodeId
        {
            get { return this._TaxCodeId; }
            set
            {
                if (this._TaxCodeId != value)
                {
                    this._TaxCodeId = value;
                    this.IsDirty = true;
                    this._TaxCode = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Sku
        /// </summary>
        public String Sku
        {
            get { return this._Sku; }
            set
            {
                if (this._Sku != value)
                {
                    this._Sku = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Price
        /// </summary>
        public LSDecimal Price
        {
            get { return this._Price; }
            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Weight
        /// </summary>
        public LSDecimal Weight
        {
            get { return this._Weight; }
            set
            {
                if (this._Weight != value)
                {
                    this._Weight = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Quantity
        /// </summary>
        public Int16 Quantity
        {
            get { return this._Quantity; }
            set
            {
                if (this._Quantity != value)
                {
                    this._Quantity = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LineMessage
        /// </summary>
        public String LineMessage
        {
            get { return this._LineMessage; }
            set
            {
                if (this._LineMessage != value)
                {
                    this._LineMessage = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderItemTypeId
        /// </summary>
        public Int16 OrderItemTypeId
        {
            get { return this._OrderItemTypeId; }
            set
            {
                if (this._OrderItemTypeId != value)
                {
                    this._OrderItemTypeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderBy
        /// </summary>
        public Int16 OrderBy
        {
            get { return this._OrderBy; }
            set
            {
                if (this._OrderBy != value)
                {
                    this._OrderBy = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// WrapStyleId
        /// </summary>
        public Int32 WrapStyleId
        {
            get { return this._WrapStyleId; }
            set
            {
                if (this._WrapStyleId != value)
                {
                    this._WrapStyleId = value;
                    this.IsDirty = true;
                    this._WrapStyle = null;
                }
            }
        }

        /// <summary>
        /// GiftMessage
        /// </summary>
        public String GiftMessage
        {
            get { return this._GiftMessage; }
            set
            {
                if (this._GiftMessage != value)
                {
                    this._GiftMessage = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// WishlistItemId
        /// </summary>
        public Int32 WishlistItemId
        {
            get { return this._WishlistItemId; }
            set
            {
                if (this._WishlistItemId != value)
                {
                    this._WishlistItemId = value;
                    this.IsDirty = true;
                    this._WishlistItem = null;
                }
            }
        }

        /// <summary>
        /// ShippableId
        /// </summary>
        public Byte ShippableId
        {
            get { return this._ShippableId; }
            set
            {
                if (this._ShippableId != value)
                {
                    this._ShippableId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastModifiedDate
        /// </summary>
        public DateTime LastModifiedDate
        {
            get { return this._LastModifiedDate; }
            set
            {
                if (this._LastModifiedDate != value)
                {
                    this._LastModifiedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxRate
        /// </summary>
        public LSDecimal TaxRate
        {
            get { return this._TaxRate; }
            set
            {
                if (this._TaxRate != value)
                {
                    this._TaxRate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxAmount
        /// </summary>
        public LSDecimal TaxAmount
        {
            get { return this._TaxAmount; }
            set
            {
                if (this._TaxAmount != value)
                {
                    this._TaxAmount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// KitList
        /// </summary>
        public String KitList
        {
            get { return this._KitList; }
            set
            {
                if (this._KitList != value)
                {
                    this._KitList = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CustomFields
        /// </summary>
        public UrlEncodedDictionary CustomFields
        {
            get { return this._CustomFields; }
            set
            {
                if (this._CustomFields != value)
                {
                    this._CustomFields = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this BasketItem object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.InputsLoaded && this.Inputs.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this BasketItem are properly associated with this BasketItem object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.InputsLoaded) { foreach (BasketItemInput basketItemInput in this.Inputs) { basketItemInput.BasketItemId = this.BasketItemId; } }
        }

#region Parents
        private Basket _Basket;
        private Product _Product;
        private TaxCode _TaxCode;
        private WishlistItem _WishlistItem;
        private WrapStyle _WrapStyle;

        /// <summary>
        /// The Basket object that this BasketItem object is associated with
        /// </summary>
        public Basket Basket
        {
            get
            {
                if (!this.BasketLoaded)
                {
                    this._Basket = BasketDataSource.Load(this.BasketId);
                }
                return this._Basket;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketLoaded { get { return ((this._Basket != null) && (this._Basket.BasketId == this.BasketId)); } }

        /// <summary>
        /// The Product object that this BasketItem object is associated with
        /// </summary>
        public Product Product
        {
            get
            {
                if (!this.ProductLoaded)
                {
                    this._Product = ProductDataSource.Load(this.ProductId);
                }
                return this._Product;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductLoaded { get { return ((this._Product != null) && (this._Product.ProductId == this.ProductId)); } }

        /// <summary>
        /// The TaxCode object that this BasketItem object is associated with
        /// </summary>
        public TaxCode TaxCode
        {
            get
            {
                if (!this.TaxCodeLoaded)
                {
                    this._TaxCode = TaxCodeDataSource.Load(this.TaxCodeId);
                }
                return this._TaxCode;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxCodeLoaded { get { return ((this._TaxCode != null) && (this._TaxCode.TaxCodeId == this.TaxCodeId)); } }

        /// <summary>
        /// The WishlistItem object that this BasketItem object is associated with
        /// </summary>
        public WishlistItem WishlistItem
        {
            get
            {
                if (!this.WishlistItemLoaded)
                {
                    this._WishlistItem = WishlistItemDataSource.Load(this.WishlistItemId);
                }
                return this._WishlistItem;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WishlistItemLoaded { get { return ((this._WishlistItem != null) && (this._WishlistItem.WishlistItemId == this.WishlistItemId)); } }

        /// <summary>
        /// The WrapStyle object that this BasketItem object is associated with
        /// </summary>
        public WrapStyle WrapStyle
        {
            get
            {
                if (!this.WrapStyleLoaded)
                {
                    this._WrapStyle = WrapStyleDataSource.Load(this.WrapStyleId);
                }
                return this._WrapStyle;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WrapStyleLoaded { get { return ((this._WrapStyle != null) && (this._WrapStyle.WrapStyleId == this.WrapStyleId)); } }

#endregion

#region Children
        private BasketItemInputCollection _Inputs;

        /// <summary>
        /// A collection of BasketItemInput objects associated with this BasketItem object.
        /// </summary>
        public BasketItemInputCollection Inputs
        {
            get
            {
                if (!this.InputsLoaded)
                {
                    this._Inputs = BasketItemInputDataSource.LoadForBasketItem(this.BasketItemId);
                }
                return this._Inputs;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool InputsLoaded { get { return (this._Inputs != null); } }

#endregion

        /// <summary>
        /// Deletes this BasketItem object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_BasketItems");
            deleteQuery.Append(" WHERE BasketItemId = @BasketItemId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@BasketItemId", System.Data.DbType.Int32, this.BasketItemId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this BasketItem object from the database for the given primary key.
        /// </summary>
        /// <param name="basketItemId">Value of BasketItemId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 basketItemId)
        {
            bool result = false;
            this.BasketItemId = basketItemId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_BasketItems");
            selectQuery.Append(" WHERE BasketItemId = @basketItemId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@basketItemId", System.Data.DbType.Int32, basketItemId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this BasketItem object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.BasketItemId == 0) recordExists = false;

                if (this.OrderBy < 0) this.OrderBy = BasketItemDataSource.GetNextOrderBy(this.BasketId);

                //SET DEFAULT FOR DATE FIELD
                if (this.LastModifiedDate == System.DateTime.MinValue) this.LastModifiedDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_BasketItems");
                    selectQuery.Append(" WHERE BasketItemId = @BasketItemId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@BasketItemId", System.Data.DbType.Int32, this.BasketItemId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_BasketItems SET ");
                    updateQuery.Append("ParentItemId = @ParentItemId");
                    updateQuery.Append(", BasketId = @BasketId");
                    updateQuery.Append(", BasketShipmentId = @BasketShipmentId");
                    updateQuery.Append(", ProductId = @ProductId");
                    updateQuery.Append(", OptionList = @OptionList");
                    updateQuery.Append(", TaxCodeId = @TaxCodeId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", Sku = @Sku");
                    updateQuery.Append(", Price = @Price");
                    updateQuery.Append(", Weight = @Weight");
                    updateQuery.Append(", Quantity = @Quantity");
                    updateQuery.Append(", LineMessage = @LineMessage");
                    updateQuery.Append(", OrderItemTypeId = @OrderItemTypeId");
                    updateQuery.Append(", OrderBy = @OrderBy");
                    updateQuery.Append(", WrapStyleId = @WrapStyleId");
                    updateQuery.Append(", GiftMessage = @GiftMessage");
                    updateQuery.Append(", WishlistItemId = @WishlistItemId");
                    updateQuery.Append(", ShippableId = @ShippableId");
                    updateQuery.Append(", LastModifiedDate = @LastModifiedDate");
                    updateQuery.Append(", TaxRate = @TaxRate");
                    updateQuery.Append(", TaxAmount = @TaxAmount");
                    updateQuery.Append(", KitList = @KitList");
                    updateQuery.Append(", CustomFields = @CustomFields");
                    updateQuery.Append(" WHERE BasketItemId = @BasketItemId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@BasketItemId", System.Data.DbType.Int32, this.BasketItemId);
                        database.AddInParameter(updateCommand, "@ParentItemId", System.Data.DbType.Int32, this.ParentItemId);
                        database.AddInParameter(updateCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                        database.AddInParameter(updateCommand, "@BasketShipmentId", System.Data.DbType.Int32, NullableData.DbNullify(this.BasketShipmentId));
                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(updateCommand, "@OptionList", System.Data.DbType.String, NullableData.DbNullify(this.OptionList));
                        database.AddInParameter(updateCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@Sku", System.Data.DbType.String, NullableData.DbNullify(this.Sku));
                        database.AddInParameter(updateCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(updateCommand, "@Weight", System.Data.DbType.Decimal, this.Weight);
                        database.AddInParameter(updateCommand, "@Quantity", System.Data.DbType.Int16, this.Quantity);
                        database.AddInParameter(updateCommand, "@LineMessage", System.Data.DbType.String, NullableData.DbNullify(this.LineMessage));
                        database.AddInParameter(updateCommand, "@OrderItemTypeId", System.Data.DbType.Int16, this.OrderItemTypeId);
                        database.AddInParameter(updateCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        database.AddInParameter(updateCommand, "@WrapStyleId", System.Data.DbType.Int32, NullableData.DbNullify(this.WrapStyleId));
                        database.AddInParameter(updateCommand, "@GiftMessage", System.Data.DbType.String, NullableData.DbNullify(this.GiftMessage));
                        database.AddInParameter(updateCommand, "@WishlistItemId", System.Data.DbType.Int32, NullableData.DbNullify(this.WishlistItemId));
                        database.AddInParameter(updateCommand, "@ShippableId", System.Data.DbType.Byte, this.ShippableId);
                        database.AddInParameter(updateCommand, "@LastModifiedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.LastModifiedDate));
                        database.AddInParameter(updateCommand, "@TaxRate", System.Data.DbType.Decimal, this.TaxRate);
                        database.AddInParameter(updateCommand, "@TaxAmount", System.Data.DbType.Decimal, this.TaxAmount);
                        database.AddInParameter(updateCommand, "@KitList", System.Data.DbType.String, NullableData.DbNullify(this.KitList));
                        database.AddInParameter(updateCommand, "@CustomFields", System.Data.DbType.String, NullableData.DbNullify(this.CustomFields.ToString()));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_BasketItems (ParentItemId, BasketId, BasketShipmentId, ProductId, OptionList, TaxCodeId, Name, Sku, Price, Weight, Quantity, LineMessage, OrderItemTypeId, OrderBy, WrapStyleId, GiftMessage, WishlistItemId, ShippableId, LastModifiedDate, TaxRate, TaxAmount, KitList, CustomFields)");
                    insertQuery.Append(" VALUES (@ParentItemId, @BasketId, @BasketShipmentId, @ProductId, @OptionList, @TaxCodeId, @Name, @Sku, @Price, @Weight, @Quantity, @LineMessage, @OrderItemTypeId, @OrderBy, @WrapStyleId, @GiftMessage, @WishlistItemId, @ShippableId, @LastModifiedDate, @TaxRate, @TaxAmount, @KitList, @CustomFields)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@BasketItemId", System.Data.DbType.Int32, this.BasketItemId);
                        database.AddInParameter(insertCommand, "@ParentItemId", System.Data.DbType.Int32, this.ParentItemId);
                        database.AddInParameter(insertCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                        database.AddInParameter(insertCommand, "@BasketShipmentId", System.Data.DbType.Int32, NullableData.DbNullify(this.BasketShipmentId));
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@OptionList", System.Data.DbType.String, NullableData.DbNullify(this.OptionList));
                        database.AddInParameter(insertCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@Sku", System.Data.DbType.String, NullableData.DbNullify(this.Sku));
                        database.AddInParameter(insertCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(insertCommand, "@Weight", System.Data.DbType.Decimal, this.Weight);
                        database.AddInParameter(insertCommand, "@Quantity", System.Data.DbType.Int16, this.Quantity);
                        database.AddInParameter(insertCommand, "@LineMessage", System.Data.DbType.String, NullableData.DbNullify(this.LineMessage));
                        database.AddInParameter(insertCommand, "@OrderItemTypeId", System.Data.DbType.Int16, this.OrderItemTypeId);
                        database.AddInParameter(insertCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        database.AddInParameter(insertCommand, "@WrapStyleId", System.Data.DbType.Int32, NullableData.DbNullify(this.WrapStyleId));
                        database.AddInParameter(insertCommand, "@GiftMessage", System.Data.DbType.String, NullableData.DbNullify(this.GiftMessage));
                        database.AddInParameter(insertCommand, "@WishlistItemId", System.Data.DbType.Int32, NullableData.DbNullify(this.WishlistItemId));
                        database.AddInParameter(insertCommand, "@ShippableId", System.Data.DbType.Byte, this.ShippableId);
                        database.AddInParameter(insertCommand, "@LastModifiedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.LastModifiedDate));
                        database.AddInParameter(insertCommand, "@TaxRate", System.Data.DbType.Decimal, this.TaxRate);
                        database.AddInParameter(insertCommand, "@TaxAmount", System.Data.DbType.Decimal, this.TaxAmount);
                        database.AddInParameter(insertCommand, "@KitList", System.Data.DbType.String, NullableData.DbNullify(this.KitList));
                        database.AddInParameter(insertCommand, "@CustomFields", System.Data.DbType.String, NullableData.DbNullify(this.CustomFields.ToString()));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._BasketItemId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this BasketItem object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.InputsLoaded) this.Inputs.Save();
        }

     }
}
