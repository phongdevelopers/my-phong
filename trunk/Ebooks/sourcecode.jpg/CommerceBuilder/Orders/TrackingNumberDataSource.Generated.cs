//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// DataSource class for TrackingNumber objects
    /// </summary>
    public partial class TrackingNumberDataSource
    {
        /// <summary>
        /// Deletes a TrackingNumber object from the database
        /// </summary>
        /// <param name="trackingNumber">The TrackingNumber object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(TrackingNumber trackingNumber)
        {
            return trackingNumber.Delete();
        }

        /// <summary>
        /// Deletes a TrackingNumber object with given id from the database
        /// </summary>
        /// <param name="trackingNumberId">Value of TrackingNumberId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 trackingNumberId)
        {
            TrackingNumber trackingNumber = new TrackingNumber();
            if (trackingNumber.Load(trackingNumberId)) return trackingNumber.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a TrackingNumber object to the database.
        /// </summary>
        /// <param name="trackingNumber">The TrackingNumber object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(TrackingNumber trackingNumber) { return trackingNumber.Save(); }

        /// <summary>
        /// Loads a TrackingNumber object for given Id from the database.
        /// </summary>
        /// <param name="trackingNumberId">Value of TrackingNumberId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded TrackingNumber object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumber Load(Int32 trackingNumberId)
        {
            return TrackingNumberDataSource.Load(trackingNumberId, true);
        }

        /// <summary>
        /// Loads a TrackingNumber object for given Id from the database.
        /// </summary>
        /// <param name="trackingNumberId">Value of TrackingNumberId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded TrackingNumber object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumber Load(Int32 trackingNumberId, bool useCache)
        {
            if (trackingNumberId == 0) return null;
            TrackingNumber trackingNumber = null;
            string key = "TrackingNumber_" + trackingNumberId.ToString();
            if (useCache)
            {
                trackingNumber = ContextCache.GetObject(key) as TrackingNumber;
                if (trackingNumber != null) return trackingNumber;
            }
            trackingNumber = new TrackingNumber();
            if (trackingNumber.Load(trackingNumberId))
            {
                if (useCache) ContextCache.SetObject(key, trackingNumber);
                return trackingNumber;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of TrackingNumber objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the TrackingNumber objects that should be loaded.</param>
        /// <returns>The number of TrackingNumber objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_TrackingNumbers" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TrackingNumber.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TrackingNumbers");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            TrackingNumberCollection results = new TrackingNumberCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TrackingNumber trackingNumber = new TrackingNumber();
                        TrackingNumber.LoadDataReader(trackingNumber, dr);
                        results.Add(trackingNumber);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TrackingNumber objects for the given OrderShipmentId in the database.
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// </summary>
        /// <returns>The Number of TrackingNumber objects for the given OrderShipmentId in the database.</returns>
        public static int CountForOrderShipment(Int32 orderShipmentId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_TrackingNumbers WHERE OrderShipmentId = @orderShipmentId");
            database.AddInParameter(selectCommand, "@orderShipmentId", System.Data.DbType.Int32, orderShipmentId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForOrderShipment(Int32 orderShipmentId)
        {
            return LoadForOrderShipment(orderShipmentId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForOrderShipment(Int32 orderShipmentId, string sortExpression)
        {
            return LoadForOrderShipment(orderShipmentId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForOrderShipment(Int32 orderShipmentId, int maximumRows, int startRowIndex)
        {
            return LoadForOrderShipment(orderShipmentId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given OrderShipmentId from the database
        /// </summary>
        /// <param name="orderShipmentId">The given OrderShipmentId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForOrderShipment(Int32 orderShipmentId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TrackingNumber.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TrackingNumbers");
            selectQuery.Append(" WHERE OrderShipmentId = @orderShipmentId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderShipmentId", System.Data.DbType.Int32, orderShipmentId);
            //EXECUTE THE COMMAND
            TrackingNumberCollection results = new TrackingNumberCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TrackingNumber trackingNumber = new TrackingNumber();
                        TrackingNumber.LoadDataReader(trackingNumber, dr);
                        results.Add(trackingNumber);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of TrackingNumber objects for the given ShipGatewayId in the database.
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// </summary>
        /// <returns>The Number of TrackingNumber objects for the given ShipGatewayId in the database.</returns>
        public static int CountForShipGateway(Int32 shipGatewayId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_TrackingNumbers WHERE ShipGatewayId = @shipGatewayId");
            database.AddInParameter(selectCommand, "@shipGatewayId", System.Data.DbType.Int32, NullableData.DbNullify(shipGatewayId));
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForShipGateway(Int32 shipGatewayId)
        {
            return LoadForShipGateway(shipGatewayId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForShipGateway(Int32 shipGatewayId, string sortExpression)
        {
            return LoadForShipGateway(shipGatewayId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForShipGateway(Int32 shipGatewayId, int maximumRows, int startRowIndex)
        {
            return LoadForShipGateway(shipGatewayId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of TrackingNumber objects for the given ShipGatewayId from the database
        /// </summary>
        /// <param name="shipGatewayId">The given ShipGatewayId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of TrackingNumber objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static TrackingNumberCollection LoadForShipGateway(Int32 shipGatewayId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + TrackingNumber.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TrackingNumbers");
            selectQuery.Append(" WHERE ShipGatewayId = @shipGatewayId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipGatewayId", System.Data.DbType.Int32, NullableData.DbNullify(shipGatewayId));
            //EXECUTE THE COMMAND
            TrackingNumberCollection results = new TrackingNumberCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        TrackingNumber trackingNumber = new TrackingNumber();
                        TrackingNumber.LoadDataReader(trackingNumber, dr);
                        results.Add(trackingNumber);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given TrackingNumber object to the database.
        /// </summary>
        /// <param name="trackingNumber">The TrackingNumber object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(TrackingNumber trackingNumber) { return trackingNumber.Save(); }

    }
}
