//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// DataSource class for OrderStatusTrigger objects
    /// </summary>
    public partial class OrderStatusTriggerDataSource
    {
        /// <summary>
        /// Deletes a OrderStatusTrigger object from the database
        /// </summary>
        /// <param name="orderStatusTrigger">The OrderStatusTrigger object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(OrderStatusTrigger orderStatusTrigger)
        {
            return orderStatusTrigger.Delete();
        }

        /// <summary>
        /// Deletes a OrderStatusTrigger object with given id from the database
        /// </summary>
        /// <param name="storeEventId">Value of StoreEventId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 storeEventId)
        {
            OrderStatusTrigger orderStatusTrigger = new OrderStatusTrigger();
            if (orderStatusTrigger.Load(storeEventId)) return orderStatusTrigger.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a OrderStatusTrigger object to the database.
        /// </summary>
        /// <param name="orderStatusTrigger">The OrderStatusTrigger object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(OrderStatusTrigger orderStatusTrigger) { return orderStatusTrigger.Save(); }

        /// <summary>
        /// Loads a OrderStatusTrigger object for given Id from the database.
        /// </summary>
        /// <param name="storeEventId">Value of StoreEventId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded OrderStatusTrigger object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTrigger Load(Int32 storeEventId)
        {
            return OrderStatusTriggerDataSource.Load(storeEventId, true);
        }

        /// <summary>
        /// Loads a OrderStatusTrigger object for given Id from the database.
        /// </summary>
        /// <param name="storeEventId">Value of StoreEventId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded OrderStatusTrigger object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTrigger Load(Int32 storeEventId, bool useCache)
        {
            if (storeEventId == 0) return null;
            OrderStatusTrigger orderStatusTrigger = null;
            string key = "OrderStatusTrigger_" + storeEventId.ToString();
            if (useCache)
            {
                orderStatusTrigger = ContextCache.GetObject(key) as OrderStatusTrigger;
                if (orderStatusTrigger != null) return orderStatusTrigger;
            }
            orderStatusTrigger = new OrderStatusTrigger();
            if (orderStatusTrigger.Load(storeEventId))
            {
                if (useCache) ContextCache.SetObject(key, orderStatusTrigger);
                return orderStatusTrigger;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of OrderStatusTrigger objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the OrderStatusTrigger objects that should be loaded.</param>
        /// <returns>The number of OrderStatusTrigger objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderStatusTriggers" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderStatusTrigger.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderStatusTriggers");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            OrderStatusTriggerCollection results = new OrderStatusTriggerCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderStatusTrigger orderStatusTrigger = new OrderStatusTrigger();
                        OrderStatusTrigger.LoadDataReader(orderStatusTrigger, dr);
                        results.Add(orderStatusTrigger);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of OrderStatusTrigger objects for the given OrderStatusId in the database.
        /// <param name="orderStatusId">The given OrderStatusId</param>
        /// </summary>
        /// <returns>The Number of OrderStatusTrigger objects for the given OrderStatusId in the database.</returns>
        public static int CountForOrderStatus(Int32 orderStatusId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_OrderStatusTriggers WHERE OrderStatusId = @orderStatusId");
            database.AddInParameter(selectCommand, "@orderStatusId", System.Data.DbType.Int32, orderStatusId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects for the given OrderStatusId from the database
        /// </summary>
        /// <param name="orderStatusId">The given OrderStatusId</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection LoadForOrderStatus(Int32 orderStatusId)
        {
            return LoadForOrderStatus(orderStatusId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects for the given OrderStatusId from the database
        /// </summary>
        /// <param name="orderStatusId">The given OrderStatusId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection LoadForOrderStatus(Int32 orderStatusId, string sortExpression)
        {
            return LoadForOrderStatus(orderStatusId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects for the given OrderStatusId from the database
        /// </summary>
        /// <param name="orderStatusId">The given OrderStatusId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection LoadForOrderStatus(Int32 orderStatusId, int maximumRows, int startRowIndex)
        {
            return LoadForOrderStatus(orderStatusId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of OrderStatusTrigger objects for the given OrderStatusId from the database
        /// </summary>
        /// <param name="orderStatusId">The given OrderStatusId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of OrderStatusTrigger objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static OrderStatusTriggerCollection LoadForOrderStatus(Int32 orderStatusId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + OrderStatusTrigger.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_OrderStatusTriggers");
            selectQuery.Append(" WHERE OrderStatusId = @orderStatusId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@orderStatusId", System.Data.DbType.Int32, orderStatusId);
            //EXECUTE THE COMMAND
            OrderStatusTriggerCollection results = new OrderStatusTriggerCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        OrderStatusTrigger orderStatusTrigger = new OrderStatusTrigger();
                        OrderStatusTrigger.LoadDataReader(orderStatusTrigger, dr);
                        results.Add(orderStatusTrigger);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given OrderStatusTrigger object to the database.
        /// </summary>
        /// <param name="orderStatusTrigger">The OrderStatusTrigger object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(OrderStatusTrigger orderStatusTrigger) { return orderStatusTrigger.Save(); }

    }
}
