//CUSTOMIZED FOR CACHING OF BASKETS
//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    
    /// <summary>
    /// DataSource class for Basket object
    /// </summary>
    public partial class BasketDataSource
    {
        /// <summary>
        /// Deletes the given Basket object from the database.
        /// </summary>
        /// <param name="basket">The Basket object to delete.</param>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(Basket basket)
        {
            return basket.Delete();
        }

        /// <summary>
        /// Deletes a Basket object from the database with the given BasketId.
        /// </summary>
        /// <param name="basketId">BasketId for which to delete a Basket object.</param>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 basketId)
        {
            Basket basket = new Basket();
            if (basket.Load(basketId)) return basket.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a Basket object to the database.
        /// </summary>
        /// <param name="basket">The Basket object to save.</param>
        /// <returns><b>SaveResult</b> enumeration that indicates the result of save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(Basket basket) { return basket.Save(); }

        /// <summary>
        /// Loads a Basket object from the database for given BasketId.
        /// </summary>
        /// <param name="basketId">BasketId for which to load the Basket object.</param>
        /// <returns>If the load is successful the newly loaded Basket object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Basket Load(Int32 basketId)
        {
            return BasketDataSource.Load(basketId, true);
        }

        /// <summary>
        /// Loads a Basket object from the database for given BasketId. 
        /// </summary>
        /// <param name="basketId">BasketId for which to load the Basket object.</param>
        /// <param name="useCache">If true tries to load the Basket object from the cache first.</param>
        /// <returns>If the load is successful the newly loaded Basket object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Basket Load(Int32 basketId, bool useCache)
        {
            if (basketId == 0) return null;
            Basket basket = null;
            string key = "Basket_" + basketId.ToString();
            if (useCache)
            {
                basket = ContextCache.GetObject(key) as Basket;
                if (basket != null) return basket;
            }
            basket = new Basket();
            if (basket.Load(basketId))
            {
                if (useCache) ContextCache.SetObject(key, basket);
                return basket;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of Basket objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the Basket objects that should be loaded.</param>
        /// <returns>The number of Basket objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Baskets" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Basket objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Basket objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Basket objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Basket objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "BasketId";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Basket.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Baskets");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            BasketCollection results = new BasketCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Basket basket = new Basket();
                        Basket.LoadDataReader(basket, dr);
                        string key = "Basket_" + basket.BasketId.ToString();
                        ContextCache.SetObject(key, basket);
                        results.Add(basket);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Basket objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>The number of Basket objects associated with with the given CouponId</returns>
        public static int CountForCoupon(Int32 couponId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_BasketCoupons WHERE CouponId = @couponId");
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads the Basket objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>A collection of Basket objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForCoupon(Int32 couponId)
        {
            return BasketDataSource.LoadForCoupon(couponId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads the Basket objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Basket objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForCoupon(Int32 couponId, string sortExpression)
        {
            return BasketDataSource.LoadForCoupon(couponId, 0, 0, sortExpression);
        }


        /// <summary>
        /// Loads the Basket objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Basket objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex)
        {
            return BasketDataSource.LoadForCoupon(couponId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads the Basket objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Basket objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "BasketId";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Basket.GetColumnNames("ac_Baskets"));
            selectQuery.Append(" FROM ac_Baskets, ac_BasketCoupons");
            selectQuery.Append(" WHERE ac_Baskets.BasketId = ac_BasketCoupons.BasketId");
            selectQuery.Append(" AND ac_BasketCoupons.CouponId = @couponId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            //EXECUTE THE COMMAND
            BasketCollection results = new BasketCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Basket basket = new Basket();
                        Basket.LoadDataReader(basket, dr);
                        string key = "Basket_" + basket.BasketId.ToString();
                        ContextCache.SetObject(key, basket);
                        results.Add(basket);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Basket objects for the given UserId in the database.
        /// <param name="userId">The given UserId</param>
        /// </summary>
        /// <returns>The Number of Basket objects for the given UserId in the database.</returns>
        public static int CountForUser(Int32 userId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Baskets WHERE UserId = @userId");
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Basket objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForUser(Int32 userId)
        {
            return LoadForUser(userId, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Basket objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForUser(Int32 userId, string sortExpression)
        {
            return LoadForUser(userId, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Basket objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForUser(Int32 userId, int maximumRows, int startRowIndex)
        {
            return LoadForUser(userId, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Basket objects for the given UserId from the database
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Basket objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static BasketCollection LoadForUser(Int32 userId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //DEFAULT SORT EXPRESSION
            if (string.IsNullOrEmpty(sortExpression)) sortExpression = "BasketId";
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Basket.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Baskets");
            selectQuery.Append(" WHERE UserId = @userId");
            selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            //EXECUTE THE COMMAND
            BasketCollection results = new BasketCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Basket basket = new Basket();
                        Basket.LoadDataReader(basket, dr);
                        results.Add(basket);
                        //add basket to cache as well
                        string key = "Basket_" + basket.BasketId.ToString();
                        ContextCache.SetObject(key, basket);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given Basket object to the database.
        /// </summary>
        /// <param name="basket">The Basket object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that indicates the result of save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(Basket basket) { return basket.Save(); }

    }
}
