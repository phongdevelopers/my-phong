//CUSTOMIZED
//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Payments;
using CommerceBuilder.Products;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// This class represents a Subscription object in the database.
    /// </summary>
    public partial class Subscription : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Subscription() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="subscriptionId">Value of SubscriptionId.</param>
        /// </summary>
        public Subscription(Int32 subscriptionId)
        {
            this.SubscriptionId = subscriptionId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
            if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
            else prefix = prefix + ".";
            List<string> columnNames = new List<string>();
            columnNames.Add(prefix + "SubscriptionId");
            columnNames.Add(prefix + "ProductId");
            columnNames.Add(prefix + "UserId");
            columnNames.Add(prefix + "OrderItemId");
            columnNames.Add(prefix + "TransactionId");
            columnNames.Add(prefix + "IsActive");
            columnNames.Add(prefix + "ExpirationDate");
            columnNames.Add(prefix + "GroupId");
            return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Subscription object from the given database data reader.
        /// </summary>
        /// <param name="subscription">The Subscription object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Subscription subscription, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            subscription.SubscriptionId = dr.GetInt32(0);
            subscription.ProductId = dr.GetInt32(1);
            subscription.UserId = dr.GetInt32(2);
            subscription.OrderItemId = NullableData.GetInt32(dr, 3);
            subscription.TransactionId = NullableData.GetInt32(dr, 4);
            subscription.IsActive = dr.GetBoolean(5);
            subscription.ExpirationDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 6));
            subscription.GroupId = NullableData.GetInt32(dr, 7);
            subscription.IsDirty = false;
        }

#endregion

        private Int32 _SubscriptionId;
        private Int32 _ProductId;
        private Int32 _UserId;
        private Int32 _OrderItemId;
        private Int32 _TransactionId;
        private Boolean _IsActive;
        private DateTime _ExpirationDate;
        private Int32 _GroupId;
        private bool _IsDirty;

        /// <summary>
        /// SubscriptionId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 SubscriptionId
        {
            get { return this._SubscriptionId; }
            set
            {
                if (this._SubscriptionId != value)
                {
                    this._SubscriptionId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// ProductId
        /// </summary>
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this._SubscriptionPlan = null;
                }
            }
        }

        /// <summary>
        /// UserId
        /// </summary>
        public Int32 UserId
        {
            get { return this._UserId; }
            set
            {
                if (this._UserId != value)
                {
                    this._UserId = value;
                    this.IsDirty = true;
                    this._User = null;
                }
            }
        }

        /// <summary>
        /// OrderItemId
        /// </summary>
        public Int32 OrderItemId
        {
            get { return this._OrderItemId; }
            set
            {
                if (this._OrderItemId != value)
                {
                    this._OrderItemId = value;
                    this.IsDirty = true;
                    this._OrderItem = null;
                }
            }
        }

        /// <summary>
        /// TransactionId
        /// </summary>
        public Int32 TransactionId
        {
            get { return this._TransactionId; }
            set
            {
                if (this._TransactionId != value)
                {
                    this._TransactionId = value;
                    this.IsDirty = true;
                    this._Transaction = null;
                }
            }
        }

        /// <summary>
        /// IsActive
        /// </summary>
        public Boolean IsActive
        {
            get
            {
                if (this._ExpirationDate < LocaleHelper.LocalNow) return false;
                return this._IsActive;
            }
            set
            {
                if (this._IsActive != value)
                {
                    this._IsActive = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ExpirationDate
        /// </summary>
        public DateTime ExpirationDate
        {
            get { return this._ExpirationDate; }
            set
            {
                if (this._ExpirationDate != value)
                {
                    this._ExpirationDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// GroupId
        /// </summary>
        public Int32 GroupId
        {
            get { return this._GroupId; }
            set
            {
                if (this._GroupId != value)
                {
                    this._GroupId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Subscription object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.PaymentsLoaded && this.Payments.IsDirty) return true;
                if (this.UserGroupsLoaded && this.UserGroups.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Subscription are properly associated with this Subscription object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.PaymentsLoaded) { foreach (Payment payment in this.Payments) { payment.SubscriptionId = this.SubscriptionId; } }
            if (this.UserGroupsLoaded) { foreach (UserGroup userGroup in this.UserGroups) { userGroup.SubscriptionId = this.SubscriptionId; } }
        }

#region Parents
        private OrderItem _OrderItem;
        private SubscriptionPlan _SubscriptionPlan;
        private Transaction _Transaction;
        private User _User;

        /// <summary>
        /// The OrderItem object that this Subscription object is associated with
        /// </summary>
        public OrderItem OrderItem
        {
            get
            {
                if (!this.OrderItemLoaded)
                {
                    this._OrderItem = OrderItemDataSource.Load(this.OrderItemId);
                }
                return this._OrderItem;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemLoaded { get { return ((this._OrderItem != null) && (this._OrderItem.OrderItemId == this.OrderItemId)); } }

        /// <summary>
        /// The SubscriptionPlan object that this Subscription object is associated with
        /// </summary>
        public SubscriptionPlan SubscriptionPlan
        {
            get
            {
                if (!this.SubscriptionPlanLoaded)
                {
                    this._SubscriptionPlan = SubscriptionPlanDataSource.Load(this.ProductId);
                }
                return this._SubscriptionPlan;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SubscriptionPlanLoaded { get { return ((this._SubscriptionPlan != null) && (this._SubscriptionPlan.ProductId == this.ProductId)); } }

        /// <summary>
        /// The Transaction object that this Subscription object is associated with
        /// </summary>
        public Transaction Transaction
        {
            get
            {
                if (!this.TransactionLoaded)
                {
                    this._Transaction = TransactionDataSource.Load(this.TransactionId);
                }
                return this._Transaction;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TransactionLoaded { get { return ((this._Transaction != null) && (this._Transaction.TransactionId == this.TransactionId)); } }

        /// <summary>
        /// The User object that this Subscription object is associated with
        /// </summary>
        public User User
        {
            get
            {
                if (!this.UserLoaded)
                {
                    this._User = UserDataSource.Load(this.UserId);
                }
                return this._User;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserLoaded { get { return ((this._User != null) && (this._User.UserId == this.UserId)); } }

#endregion

#region Children
        private PaymentCollection _Payments;
        private UserGroupCollection _UserGroups;

        /// <summary>
        /// A collection of Payment objects associated with this Subscription object.
        /// </summary>
        public PaymentCollection Payments
        {
            get
            {
                if (!this.PaymentsLoaded)
                {
                    this._Payments = PaymentDataSource.LoadForSubscription(this.SubscriptionId);
                }
                return this._Payments;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentsLoaded { get { return (this._Payments != null); } }

        /// <summary>
        /// A collection of UserGroup objects associated with this Subscription object.
        /// </summary>
        public UserGroupCollection UserGroups
        {
            get
            {
                if (!this.UserGroupsLoaded)
                {
                    this._UserGroups = UserGroupDataSource.LoadForSubscription(this.SubscriptionId);
                }
                return this._UserGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserGroupsLoaded { get { return (this._UserGroups != null); } }

#endregion

        /// <summary>
        /// Deletes this Subscription object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Subscriptions");
            deleteQuery.Append(" WHERE SubscriptionId = @SubscriptionId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@SubscriptionId", System.Data.DbType.Int32, this.SubscriptionId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Subscription object from the database for the given primary key.
        /// </summary>
        /// <param name="subscriptionId">Value of SubscriptionId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 subscriptionId)
        {
            bool result = false;
            this.SubscriptionId = subscriptionId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Subscriptions");
            selectQuery.Append(" WHERE SubscriptionId = @subscriptionId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@subscriptionId", System.Data.DbType.Int32, subscriptionId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Subscription object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.SubscriptionId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Subscriptions");
                    selectQuery.Append(" WHERE SubscriptionId = @SubscriptionId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@SubscriptionId", System.Data.DbType.Int32, this.SubscriptionId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Subscriptions SET ");
                    updateQuery.Append("ProductId = @ProductId");
                    updateQuery.Append(", UserId = @UserId");
                    updateQuery.Append(", OrderItemId = @OrderItemId");
                    updateQuery.Append(", TransactionId = @TransactionId");
                    updateQuery.Append(", IsActive = @IsActive");
                    updateQuery.Append(", ExpirationDate = @ExpirationDate");
                    updateQuery.Append(", GroupId = @GroupId");
                    updateQuery.Append(" WHERE SubscriptionId = @SubscriptionId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@SubscriptionId", System.Data.DbType.Int32, this.SubscriptionId);
                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(updateCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        database.AddInParameter(updateCommand, "@OrderItemId", System.Data.DbType.Int32, NullableData.DbNullify(this.OrderItemId));
                        database.AddInParameter(updateCommand, "@TransactionId", System.Data.DbType.Int32, NullableData.DbNullify(this.TransactionId));
                        database.AddInParameter(updateCommand, "@IsActive", System.Data.DbType.Boolean, this.IsActive);
                        database.AddInParameter(updateCommand, "@ExpirationDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.ExpirationDate)));
                        database.AddInParameter(updateCommand, "@GroupId", System.Data.DbType.Int32, NullableData.DbNullify(this.GroupId));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Subscriptions (ProductId, UserId, OrderItemId, TransactionId, IsActive, ExpirationDate, GroupId)");
                    insertQuery.Append(" VALUES (@ProductId, @UserId, @OrderItemId, @TransactionId, @IsActive, @ExpirationDate, @GroupId)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@SubscriptionId", System.Data.DbType.Int32, this.SubscriptionId);
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        database.AddInParameter(insertCommand, "@OrderItemId", System.Data.DbType.Int32, NullableData.DbNullify(this.OrderItemId));
                        database.AddInParameter(insertCommand, "@TransactionId", System.Data.DbType.Int32, NullableData.DbNullify(this.TransactionId));
                        database.AddInParameter(insertCommand, "@IsActive", System.Data.DbType.Boolean, this.IsActive);
                        database.AddInParameter(insertCommand, "@ExpirationDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.ExpirationDate)));
                        database.AddInParameter(insertCommand, "@GroupId", System.Data.DbType.Int32, NullableData.DbNullify(this.GroupId));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._SubscriptionId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Subscription object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.PaymentsLoaded) this.Payments.Save();
            if (this.UserGroupsLoaded) this.UserGroups.Save();
        }

    }
}
