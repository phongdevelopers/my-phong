//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Products;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// This class represents a BasketItemInput object in the database.
    /// </summary>
    public partial class BasketItemInput : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public BasketItemInput() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="basketItemInputId">Value of BasketItemInputId.</param>
        /// </summary>
        public BasketItemInput(Int32 basketItemInputId)
        {
            this.BasketItemInputId = basketItemInputId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "BasketItemInputId");
          columnNames.Add(prefix + "BasketItemId");
          columnNames.Add(prefix + "InputFieldId");
          columnNames.Add(prefix + "InputValue");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given BasketItemInput object from the given database data reader.
        /// </summary>
        /// <param name="basketItemInput">The BasketItemInput object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(BasketItemInput basketItemInput, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            basketItemInput.BasketItemInputId = dr.GetInt32(0);
            basketItemInput.BasketItemId = dr.GetInt32(1);
            basketItemInput.InputFieldId = dr.GetInt32(2);
            basketItemInput.InputValue = dr.GetString(3);
            basketItemInput.IsDirty = false;
        }

#endregion

        private Int32 _BasketItemInputId;
        private Int32 _BasketItemId;
        private Int32 _InputFieldId;
        private String _InputValue = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// BasketItemInputId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 BasketItemInputId
        {
            get { return this._BasketItemInputId; }
            set
            {
                if (this._BasketItemInputId != value)
                {
                    this._BasketItemInputId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// BasketItemId
        /// </summary>
        public Int32 BasketItemId
        {
            get { return this._BasketItemId; }
            set
            {
                if (this._BasketItemId != value)
                {
                    this._BasketItemId = value;
                    this.IsDirty = true;
                    this._BasketItem = null;
                }
            }
        }

        /// <summary>
        /// InputFieldId
        /// </summary>
        public Int32 InputFieldId
        {
            get { return this._InputFieldId; }
            set
            {
                if (this._InputFieldId != value)
                {
                    this._InputFieldId = value;
                    this.IsDirty = true;
                    this._InputField = null;
                }
            }
        }

        /// <summary>
        /// InputValue
        /// </summary>
        public String InputValue
        {
            get { return this._InputValue; }
            set
            {
                if (this._InputValue != value)
                {
                    this._InputValue = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this BasketItemInput object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private BasketItem _BasketItem;
        private InputField _InputField;

        /// <summary>
        /// The BasketItem object that this BasketItemInput object is associated with
        /// </summary>
        public BasketItem BasketItem
        {
            get
            {
                if (!this.BasketItemLoaded)
                {
                    this._BasketItem = BasketItemDataSource.Load(this.BasketItemId);
                }
                return this._BasketItem;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketItemLoaded { get { return ((this._BasketItem != null) && (this._BasketItem.BasketItemId == this.BasketItemId)); } }

        /// <summary>
        /// The InputField object that this BasketItemInput object is associated with
        /// </summary>
        public InputField InputField
        {
            get
            {
                if (!this.InputFieldLoaded)
                {
                    this._InputField = InputFieldDataSource.Load(this.InputFieldId);
                }
                return this._InputField;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool InputFieldLoaded { get { return ((this._InputField != null) && (this._InputField.InputFieldId == this.InputFieldId)); } }

#endregion

        /// <summary>
        /// Deletes this BasketItemInput object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_BasketItemInputs");
            deleteQuery.Append(" WHERE BasketItemInputId = @BasketItemInputId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@BasketItemInputId", System.Data.DbType.Int32, this.BasketItemInputId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this BasketItemInput object from the database for the given primary key.
        /// </summary>
        /// <param name="basketItemInputId">Value of BasketItemInputId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 basketItemInputId)
        {
            bool result = false;
            this.BasketItemInputId = basketItemInputId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_BasketItemInputs");
            selectQuery.Append(" WHERE BasketItemInputId = @basketItemInputId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@basketItemInputId", System.Data.DbType.Int32, basketItemInputId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this BasketItemInput object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.BasketItemInputId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_BasketItemInputs");
                    selectQuery.Append(" WHERE BasketItemInputId = @BasketItemInputId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@BasketItemInputId", System.Data.DbType.Int32, this.BasketItemInputId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_BasketItemInputs SET ");
                    updateQuery.Append("BasketItemId = @BasketItemId");
                    updateQuery.Append(", InputFieldId = @InputFieldId");
                    updateQuery.Append(", InputValue = @InputValue");
                    updateQuery.Append(" WHERE BasketItemInputId = @BasketItemInputId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@BasketItemInputId", System.Data.DbType.Int32, this.BasketItemInputId);
                        database.AddInParameter(updateCommand, "@BasketItemId", System.Data.DbType.Int32, this.BasketItemId);
                        database.AddInParameter(updateCommand, "@InputFieldId", System.Data.DbType.Int32, this.InputFieldId);
                        database.AddInParameter(updateCommand, "@InputValue", System.Data.DbType.String, this.InputValue);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_BasketItemInputs (BasketItemId, InputFieldId, InputValue)");
                    insertQuery.Append(" VALUES (@BasketItemId, @InputFieldId, @InputValue)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@BasketItemInputId", System.Data.DbType.Int32, this.BasketItemInputId);
                        database.AddInParameter(insertCommand, "@BasketItemId", System.Data.DbType.Int32, this.BasketItemId);
                        database.AddInParameter(insertCommand, "@InputFieldId", System.Data.DbType.Int32, this.InputFieldId);
                        database.AddInParameter(insertCommand, "@InputValue", System.Data.DbType.String, this.InputValue);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._BasketItemInputId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
