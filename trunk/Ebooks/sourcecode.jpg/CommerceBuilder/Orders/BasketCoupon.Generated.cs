//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Marketing;
using CommerceBuilder.Orders;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Orders
{
    /// <summary>
    /// This class represents a BasketCoupon object in the database.
    /// </summary>
    public partial class BasketCoupon : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public BasketCoupon() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="basketId">Value of BasketId.</param>
        /// <param name="couponId">Value of CouponId.</param>
        /// </summary>
        public BasketCoupon(Int32 basketId, Int32 couponId)
        {
            this.BasketId = basketId;
            this.CouponId = couponId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "BasketId");
          columnNames.Add(prefix + "CouponId");
          columnNames.Add(prefix + "AppliedDate");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given BasketCoupon object from the given database data reader.
        /// </summary>
        /// <param name="basketCoupon">The BasketCoupon object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(BasketCoupon basketCoupon, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            basketCoupon.BasketId = dr.GetInt32(0);
            basketCoupon.CouponId = dr.GetInt32(1);
            basketCoupon.AppliedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(2));
            basketCoupon.IsDirty = false;
        }

#endregion

        private Int32 _BasketId;
        private Int32 _CouponId;
        private DateTime _AppliedDate;
        private bool _IsDirty;

        /// <summary>
        /// BasketId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 BasketId
        {
            get { return this._BasketId; }
            set
            {
                if (this._BasketId != value)
                {
                    this._BasketId = value;
                    this.IsDirty = true;
                    this._Basket = null;
                }
            }
        }

        /// <summary>
        /// CouponId
        /// </summary>
        [DataObjectField(true, false, false)]
        public Int32 CouponId
        {
            get { return this._CouponId; }
            set
            {
                if (this._CouponId != value)
                {
                    this._CouponId = value;
                    this.IsDirty = true;
                    this._Coupon = null;
                }
            }
        }

        /// <summary>
        /// AppliedDate
        /// </summary>
        public DateTime AppliedDate
        {
            get { return this._AppliedDate; }
            set
            {
                if (this._AppliedDate != value)
                {
                    this._AppliedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this BasketCoupon object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Basket _Basket;
        private Coupon _Coupon;

        /// <summary>
        /// The Basket object that this BasketCoupon object is associated with
        /// </summary>
        public Basket Basket
        {
            get
            {
                if (!this.BasketLoaded)
                {
                    this._Basket = BasketDataSource.Load(this.BasketId);
                }
                return this._Basket;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketLoaded { get { return ((this._Basket != null) && (this._Basket.BasketId == this.BasketId)); } }

        /// <summary>
        /// The Coupon object that this BasketCoupon object is associated with
        /// </summary>
        public Coupon Coupon
        {
            get
            {
                if (!this.CouponLoaded)
                {
                    this._Coupon = CouponDataSource.Load(this.CouponId);
                }
                return this._Coupon;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CouponLoaded { get { return ((this._Coupon != null) && (this._Coupon.CouponId == this.CouponId)); } }

#endregion

        /// <summary>
        /// Deletes this BasketCoupon object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_BasketCoupons");
            deleteQuery.Append(" WHERE BasketId = @BasketId AND CouponId = @CouponId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                database.AddInParameter(deleteCommand, "@CouponId", System.Data.DbType.Int32, this.CouponId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this BasketCoupon object from the database for the given primary key.
        /// </summary>
        /// <param name="basketId">Value of BasketId of the object to load.</param>
        /// <param name="couponId">Value of CouponId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 basketId, Int32 couponId)
        {
            bool result = false;
            this.BasketId = basketId;
            this.CouponId = couponId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_BasketCoupons");
            selectQuery.Append(" WHERE BasketId = @basketId AND CouponId = @couponId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@basketId", System.Data.DbType.Int32, basketId);
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this BasketCoupon object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET DEFAULT FOR DATE FIELD
                if (this.AppliedDate == System.DateTime.MinValue) this.AppliedDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_BasketCoupons");
                    selectQuery.Append(" WHERE BasketId = @BasketId AND CouponId = @CouponId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                        database.AddInParameter(selectCommand, "@CouponId", System.Data.DbType.Int32, this.CouponId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_BasketCoupons SET ");
                    updateQuery.Append("AppliedDate = @AppliedDate");
                    updateQuery.Append(" WHERE BasketId = @BasketId AND CouponId = @CouponId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                        database.AddInParameter(updateCommand, "@CouponId", System.Data.DbType.Int32, this.CouponId);
                        database.AddInParameter(updateCommand, "@AppliedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.AppliedDate));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_BasketCoupons (BasketId, CouponId, AppliedDate)");
                    insertQuery.Append(" VALUES (@BasketId, @CouponId, @AppliedDate)");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@BasketId", System.Data.DbType.Int32, this.BasketId);
                        database.AddInParameter(insertCommand, "@CouponId", System.Data.DbType.Int32, this.CouponId);
                        database.AddInParameter(insertCommand, "@AppliedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.AppliedDate));
                        //RESULT IS NUMBER OF RECORDS AFFECTED;
                        result = database.ExecuteNonQuery(insertCommand);
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
