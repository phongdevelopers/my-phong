//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Stores;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Seo
{
    /// <summary>
    /// This class represents a Redirect object in the database.
    /// </summary>
    public partial class Redirect : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Redirect() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="redirectId">Value of RedirectId.</param>
        /// </summary>
        public Redirect(Int32 redirectId)
        {
            this.RedirectId = redirectId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "RedirectId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "SourceUrl");
          columnNames.Add(prefix + "TargetUrl");
          columnNames.Add(prefix + "UseRegEx");
          columnNames.Add(prefix + "CreatedDate");
          columnNames.Add(prefix + "LastVisitedDate");
          columnNames.Add(prefix + "VisitCount");
          columnNames.Add(prefix + "OrderBy");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Redirect object from the given database data reader.
        /// </summary>
        /// <param name="redirect">The Redirect object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Redirect redirect, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            redirect.RedirectId = dr.GetInt32(0);
            redirect.StoreId = dr.GetInt32(1);
            redirect.SourceUrl = dr.GetString(2);
            redirect.TargetUrl = dr.GetString(3);
            redirect.UseRegEx = dr.GetBoolean(4);
            redirect.CreatedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(5));
            redirect.LastVisitedDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 6));
            redirect.VisitCount = NullableData.GetInt32(dr, 7);
            redirect.OrderBy = dr.GetInt16(8);
            redirect.IsDirty = false;
        }

#endregion

        private Int32 _RedirectId;
        private Int32 _StoreId;
        private String _SourceUrl = string.Empty;
        private String _LoweredSourceUrl = string.Empty;
        private String _TargetUrl = string.Empty;
        private Boolean _UseRegEx;
        private DateTime _CreatedDate;
        private DateTime _LastVisitedDate;
        private Int32 _VisitCount;
        private Int16 _OrderBy = -1;
        private bool _IsDirty;

        /// <summary>
        /// RedirectId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 RedirectId
        {
            get { return this._RedirectId; }
            set
            {
                if (this._RedirectId != value)
                {
                    this._RedirectId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// SourceUrl
        /// </summary>
        public String SourceUrl
        {
            get { return this._SourceUrl; }
            set
            {
                if (this._SourceUrl != value)
                {
                    this._SourceUrl = value;
                    this.IsDirty = true;
                    this._LoweredSourceUrl = value.ToLowerInvariant();
                }
            }
        }

        /// <summary>
        /// LoweredSourceUrl
        /// </summary>
        public String LoweredSourceUrl
        {
            get { return this._LoweredSourceUrl; }
        }

        /// <summary>
        /// TargetUrl
        /// </summary>
        public String TargetUrl
        {
            get { return this._TargetUrl; }
            set
            {
                if (this._TargetUrl != value)
                {
                    this._TargetUrl = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UseRegEx
        /// </summary>
        public Boolean UseRegEx
        {
            get { return this._UseRegEx; }
            set
            {
                if (this._UseRegEx != value)
                {
                    this._UseRegEx = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CreatedDate
        /// </summary>
        public DateTime CreatedDate
        {
            get { return this._CreatedDate; }
            set
            {
                if (this._CreatedDate != value)
                {
                    this._CreatedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastVisitedDate
        /// </summary>
        public DateTime LastVisitedDate
        {
            get { return this._LastVisitedDate; }
            set
            {
                if (this._LastVisitedDate != value)
                {
                    this._LastVisitedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// VisitCount
        /// </summary>
        public Int32 VisitCount
        {
            get { return this._VisitCount; }
            set
            {
                if (this._VisitCount != value)
                {
                    this._VisitCount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderBy
        /// </summary>
        public Int16 OrderBy
        {
            get { return this._OrderBy; }
            set
            {
                if (this._OrderBy != value)
                {
                    this._OrderBy = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Redirect object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this Redirect object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

        /// <summary>
        /// Deletes this Redirect object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Redirects");
            deleteQuery.Append(" WHERE RedirectId = @redirectId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@RedirectId", System.Data.DbType.Int32, this.RedirectId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Redirect object from the database for the given primary key.
        /// </summary>
        /// <param name="redirectId">Value of RedirectId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 redirectId)
        {
            bool result = false;
            this.RedirectId = redirectId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Redirects");
            selectQuery.Append(" WHERE RedirectId = @redirectId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@redirectId", System.Data.DbType.Int32, redirectId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Redirect object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.RedirectId == 0) recordExists = false;

                if (this.OrderBy < 0) this.OrderBy = RedirectDataSource.GetNextOrderBy();

                //SET DEFAULT FOR DATE FIELD
                if (this.CreatedDate == System.DateTime.MinValue) this.CreatedDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Redirects");
                    selectQuery.Append(" WHERE RedirectId = @redirectId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@RedirectId", System.Data.DbType.Int32, this.RedirectId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Redirects SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", SourceUrl = @SourceUrl");
                    updateQuery.Append(", LoweredSourceUrl = @LoweredSourceUrl");
                    updateQuery.Append(", TargetUrl = @TargetUrl");
                    updateQuery.Append(", UseRegEx = @UseRegEx");
                    updateQuery.Append(", CreatedDate = @CreatedDate");
                    updateQuery.Append(", LastVisitedDate = @LastVisitedDate");
                    updateQuery.Append(", VisitCount = @VisitCount");
                    updateQuery.Append(", OrderBy = @OrderBy");
                    updateQuery.Append(" WHERE RedirectId = @RedirectId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@RedirectId", System.Data.DbType.Int32, this.RedirectId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@SourceUrl", System.Data.DbType.String, this.SourceUrl);
                        database.AddInParameter(updateCommand, "@LoweredSourceUrl", System.Data.DbType.String, this.LoweredSourceUrl);
                        database.AddInParameter(updateCommand, "@TargetUrl", System.Data.DbType.String, this.TargetUrl);
                        database.AddInParameter(updateCommand, "@UseRegEx", System.Data.DbType.Boolean, this.UseRegEx);
                        database.AddInParameter(updateCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        database.AddInParameter(updateCommand, "@LastVisitedDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastVisitedDate)));
                        database.AddInParameter(updateCommand, "@VisitCount", System.Data.DbType.Int32, NullableData.DbNullify(this.VisitCount));
                        database.AddInParameter(updateCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Redirects (StoreId, SourceUrl, LoweredSourceUrl, TargetUrl, UseRegEx, CreatedDate, LastVisitedDate, VisitCount, OrderBy)");
                    insertQuery.Append(" VALUES (@StoreId, @SourceUrl, @LoweredSourceUrl, @TargetUrl, @UseRegEx, @CreatedDate, @LastVisitedDate, @VisitCount, @OrderBy)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@RedirectId", System.Data.DbType.Int32, this.RedirectId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@SourceUrl", System.Data.DbType.String, this.SourceUrl);
                        database.AddInParameter(insertCommand, "@LoweredSourceUrl", System.Data.DbType.String, this.LoweredSourceUrl);
                        database.AddInParameter(insertCommand, "@TargetUrl", System.Data.DbType.String, this.TargetUrl);
                        database.AddInParameter(insertCommand, "@UseRegEx", System.Data.DbType.Boolean, this.UseRegEx);
                        database.AddInParameter(insertCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        database.AddInParameter(insertCommand, "@LastVisitedDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastVisitedDate)));
                        database.AddInParameter(insertCommand, "@VisitCount", System.Data.DbType.Int32, NullableData.DbNullify(this.VisitCount));
                        database.AddInParameter(insertCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._RedirectId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
