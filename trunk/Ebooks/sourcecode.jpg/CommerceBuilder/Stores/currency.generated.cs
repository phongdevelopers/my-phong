//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Stores;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Stores
{
    /// <summary>
    /// This class represents a Currency object in the database.
    /// </summary>
    public partial class Currency : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Currency() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="currencyId">Value of CurrencyId.</param>
        /// </summary>
        public Currency(Int32 currencyId)
        {
            this.CurrencyId = currencyId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "CurrencyId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "CurrencySymbol");
          columnNames.Add(prefix + "DecimalDigits");
          columnNames.Add(prefix + "DecimalSeparator");
          columnNames.Add(prefix + "GroupSeparator");
          columnNames.Add(prefix + "GroupSizes");
          columnNames.Add(prefix + "NegativePattern");
          columnNames.Add(prefix + "NegativeSign");
          columnNames.Add(prefix + "PositivePattern");
          columnNames.Add(prefix + "ISOCode");
          columnNames.Add(prefix + "ISOCodePattern");
          columnNames.Add(prefix + "ExchangeRate");
          columnNames.Add(prefix + "AutoUpdate");
          columnNames.Add(prefix + "LastUpdate");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Currency object from the given database data reader.
        /// </summary>
        /// <param name="currency">The Currency object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Currency currency, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            currency.CurrencyId = dr.GetInt32(0);
            currency.StoreId = dr.GetInt32(1);
            currency.Name = dr.GetString(2);
            currency.CurrencySymbol = NullableData.GetString(dr, 3);
            currency.DecimalDigits = dr.GetInt32(4);
            currency.DecimalSeparator = NullableData.GetString(dr, 5);
            currency.GroupSeparator = NullableData.GetString(dr, 6);
            currency.GroupSizes = NullableData.GetString(dr, 7);
            currency.NegativePattern = dr.GetByte(8);
            currency.NegativeSign = NullableData.GetString(dr, 9);
            currency.PositivePattern = dr.GetByte(10);
            currency.ISOCode = dr.GetString(11);
            currency.ISOCodePattern = NullableData.GetByte(dr, 12);
            currency.ExchangeRate = dr.GetDecimal(13);
            currency.AutoUpdate = dr.GetBoolean(14);
            currency.LastUpdate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 15));
            currency.IsDirty = false;
        }

#endregion

        private Int32 _CurrencyId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _CurrencySymbol = string.Empty;
        private Int32 _DecimalDigits;
        private String _DecimalSeparator = string.Empty;
        private String _GroupSeparator = string.Empty;
        private String _GroupSizes = string.Empty;
        private Byte _NegativePattern;
        private String _NegativeSign = string.Empty;
        private Byte _PositivePattern;
        private String _ISOCode = string.Empty;
        private Byte _ISOCodePattern;
        private LSDecimal _ExchangeRate;
        private Boolean _AutoUpdate;
        private DateTime _LastUpdate;
        private bool _IsDirty;

        /// <summary>
        /// CurrencyId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 CurrencyId
        {
            get { return this._CurrencyId; }
            set
            {
                if (this._CurrencyId != value)
                {
                    this._CurrencyId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CurrencySymbol
        /// </summary>
        public String CurrencySymbol
        {
            get { return this._CurrencySymbol; }
            set
            {
                if (this._CurrencySymbol != value)
                {
                    this._CurrencySymbol = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DecimalDigits
        /// </summary>
        public Int32 DecimalDigits
        {
            get { return this._DecimalDigits; }
            set
            {
                if (this._DecimalDigits != value)
                {
                    this._DecimalDigits = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DecimalSeparator
        /// </summary>
        public String DecimalSeparator
        {
            get { return this._DecimalSeparator; }
            set
            {
                if (this._DecimalSeparator != value)
                {
                    this._DecimalSeparator = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// GroupSeparator
        /// </summary>
        public String GroupSeparator
        {
            get { return this._GroupSeparator; }
            set
            {
                if (this._GroupSeparator != value)
                {
                    this._GroupSeparator = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// GroupSizes
        /// </summary>
        public String GroupSizes
        {
            get { return this._GroupSizes; }
            set
            {
                if (this._GroupSizes != value)
                {
                    this._GroupSizes = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// NegativePattern
        /// </summary>
        public Byte NegativePattern
        {
            get { return this._NegativePattern; }
            set
            {
                if (this._NegativePattern != value)
                {
                    this._NegativePattern = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// NegativeSign
        /// </summary>
        public String NegativeSign
        {
            get { return this._NegativeSign; }
            set
            {
                if (this._NegativeSign != value)
                {
                    this._NegativeSign = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PositivePattern
        /// </summary>
        public Byte PositivePattern
        {
            get { return this._PositivePattern; }
            set
            {
                if (this._PositivePattern != value)
                {
                    this._PositivePattern = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ISOCode
        /// </summary>
        public String ISOCode
        {
            get { return this._ISOCode; }
            set
            {
                if (this._ISOCode != value)
                {
                    this._ISOCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ISOCodePattern
        /// </summary>
        public Byte ISOCodePattern
        {
            get { return this._ISOCodePattern; }
            set
            {
                if (this._ISOCodePattern != value)
                {
                    this._ISOCodePattern = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ExchangeRate
        /// </summary>
        public LSDecimal ExchangeRate
        {
            get { return this._ExchangeRate; }
            set
            {
                if (this._ExchangeRate != value)
                {
                    this._ExchangeRate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// AutoUpdate
        /// </summary>
        public Boolean AutoUpdate
        {
            get { return this._AutoUpdate; }
            set
            {
                if (this._AutoUpdate != value)
                {
                    this._AutoUpdate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastUpdate
        /// </summary>
        public DateTime LastUpdate
        {
            get { return this._LastUpdate; }
            set
            {
                if (this._LastUpdate != value)
                {
                    this._LastUpdate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Currency object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this Currency object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

        /// <summary>
        /// Deletes this Currency object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Currencies");
            deleteQuery.Append(" WHERE CurrencyId = @CurrencyId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@CurrencyId", System.Data.DbType.Int32, this.CurrencyId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Currency object from the database for the given primary key.
        /// </summary>
        /// <param name="currencyId">Value of CurrencyId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 currencyId)
        {
            bool result = false;
            this.CurrencyId = currencyId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Currencies");
            selectQuery.Append(" WHERE CurrencyId = @currencyId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@currencyId", System.Data.DbType.Int32, currencyId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Currency object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.CurrencyId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Currencies");
                    selectQuery.Append(" WHERE CurrencyId = @CurrencyId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@CurrencyId", System.Data.DbType.Int32, this.CurrencyId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Currencies SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", CurrencySymbol = @CurrencySymbol");
                    updateQuery.Append(", DecimalDigits = @DecimalDigits");
                    updateQuery.Append(", DecimalSeparator = @DecimalSeparator");
                    updateQuery.Append(", GroupSeparator = @GroupSeparator");
                    updateQuery.Append(", GroupSizes = @GroupSizes");
                    updateQuery.Append(", NegativePattern = @NegativePattern");
                    updateQuery.Append(", NegativeSign = @NegativeSign");
                    updateQuery.Append(", PositivePattern = @PositivePattern");
                    updateQuery.Append(", ISOCode = @ISOCode");
                    updateQuery.Append(", ISOCodePattern = @ISOCodePattern");
                    updateQuery.Append(", ExchangeRate = @ExchangeRate");
                    updateQuery.Append(", AutoUpdate = @AutoUpdate");
                    updateQuery.Append(", LastUpdate = @LastUpdate");
                    updateQuery.Append(" WHERE CurrencyId = @CurrencyId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@CurrencyId", System.Data.DbType.Int32, this.CurrencyId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@CurrencySymbol", System.Data.DbType.String, NullableData.DbNullify(this.CurrencySymbol));
                        database.AddInParameter(updateCommand, "@DecimalDigits", System.Data.DbType.Int32, this.DecimalDigits);
                        database.AddInParameter(updateCommand, "@DecimalSeparator", System.Data.DbType.String, NullableData.DbNullify(this.DecimalSeparator));
                        database.AddInParameter(updateCommand, "@GroupSeparator", System.Data.DbType.String, NullableData.DbNullify(this.GroupSeparator));
                        database.AddInParameter(updateCommand, "@GroupSizes", System.Data.DbType.String, NullableData.DbNullify(this.GroupSizes));
                        database.AddInParameter(updateCommand, "@NegativePattern", System.Data.DbType.Byte, this.NegativePattern);
                        database.AddInParameter(updateCommand, "@NegativeSign", System.Data.DbType.String, NullableData.DbNullify(this.NegativeSign));
                        database.AddInParameter(updateCommand, "@PositivePattern", System.Data.DbType.Byte, this.PositivePattern);
                        database.AddInParameter(updateCommand, "@ISOCode", System.Data.DbType.String, this.ISOCode);
                        database.AddInParameter(updateCommand, "@ISOCodePattern", System.Data.DbType.Byte, NullableData.DbNullify(this.ISOCodePattern));
                        database.AddInParameter(updateCommand, "@ExchangeRate", System.Data.DbType.Decimal, this.ExchangeRate);
                        database.AddInParameter(updateCommand, "@AutoUpdate", System.Data.DbType.Boolean, this.AutoUpdate);
                        database.AddInParameter(updateCommand, "@LastUpdate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastUpdate)));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Currencies (StoreId, Name, CurrencySymbol, DecimalDigits, DecimalSeparator, GroupSeparator, GroupSizes, NegativePattern, NegativeSign, PositivePattern, ISOCode, ISOCodePattern, ExchangeRate, AutoUpdate, LastUpdate)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @CurrencySymbol, @DecimalDigits, @DecimalSeparator, @GroupSeparator, @GroupSizes, @NegativePattern, @NegativeSign, @PositivePattern, @ISOCode, @ISOCodePattern, @ExchangeRate, @AutoUpdate, @LastUpdate)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@CurrencyId", System.Data.DbType.Int32, this.CurrencyId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@CurrencySymbol", System.Data.DbType.String, NullableData.DbNullify(this.CurrencySymbol));
                        database.AddInParameter(insertCommand, "@DecimalDigits", System.Data.DbType.Int32, this.DecimalDigits);
                        database.AddInParameter(insertCommand, "@DecimalSeparator", System.Data.DbType.String, NullableData.DbNullify(this.DecimalSeparator));
                        database.AddInParameter(insertCommand, "@GroupSeparator", System.Data.DbType.String, NullableData.DbNullify(this.GroupSeparator));
                        database.AddInParameter(insertCommand, "@GroupSizes", System.Data.DbType.String, NullableData.DbNullify(this.GroupSizes));
                        database.AddInParameter(insertCommand, "@NegativePattern", System.Data.DbType.Byte, this.NegativePattern);
                        database.AddInParameter(insertCommand, "@NegativeSign", System.Data.DbType.String, NullableData.DbNullify(this.NegativeSign));
                        database.AddInParameter(insertCommand, "@PositivePattern", System.Data.DbType.Byte, this.PositivePattern);
                        database.AddInParameter(insertCommand, "@ISOCode", System.Data.DbType.String, this.ISOCode);
                        database.AddInParameter(insertCommand, "@ISOCodePattern", System.Data.DbType.Byte, NullableData.DbNullify(this.ISOCodePattern));
                        database.AddInParameter(insertCommand, "@ExchangeRate", System.Data.DbType.Decimal, this.ExchangeRate);
                        database.AddInParameter(insertCommand, "@AutoUpdate", System.Data.DbType.Boolean, this.AutoUpdate);
                        database.AddInParameter(insertCommand, "@LastUpdate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastUpdate)));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._CurrencyId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
