//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Catalog;
using CommerceBuilder.DigitalDelivery;
using CommerceBuilder.Marketing;
using CommerceBuilder.Messaging;
using CommerceBuilder.Orders;
using CommerceBuilder.Payments;
using CommerceBuilder.Personalization;
using CommerceBuilder.Products;
using CommerceBuilder.Reporting;
using CommerceBuilder.Seo;
using CommerceBuilder.Shipping;
using CommerceBuilder.Stores;
using CommerceBuilder.Taxes;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Stores
{
    /// <summary>
    /// This class represents a Store object in the database.
    /// </summary>
    public partial class Store : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Store() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="storeId">Value of StoreId.</param>
        /// </summary>
        public Store(Int32 storeId)
        {
            this.StoreId = storeId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "ApplicationName");
          columnNames.Add(prefix + "LicenseKey");
          columnNames.Add(prefix + "DefaultWarehouseId");
          columnNames.Add(prefix + "NextOrderId");
          columnNames.Add(prefix + "OrderIdIncrement");
          columnNames.Add(prefix + "WeightUnitId");
          columnNames.Add(prefix + "MeasurementUnitId");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Store object from the given database data reader.
        /// </summary>
        /// <param name="store">The Store object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Store store, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            store.StoreId = dr.GetInt32(0);
            store.Name = dr.GetString(1);
            store.ApplicationName = dr.GetString(2);
            store.LicenseKey = NullableData.GetString(dr, 3);
            store.DefaultWarehouseId = NullableData.GetInt32(dr, 4);
            store.NextOrderId = dr.GetInt32(5);
            store.OrderIdIncrement = dr.GetInt16(6);
            store.WeightUnitId = dr.GetInt16(7);
            store.MeasurementUnitId = dr.GetInt16(8);
            store.IsDirty = false;
        }

#endregion

        private Int32 _StoreId;
        private String _Name = string.Empty;
        private String _ApplicationName = string.Empty;
        private String _LoweredApplicationName = string.Empty;
        private String _LicenseKey = string.Empty;
        private Int32 _DefaultWarehouseId;
        private Int32 _NextOrderId;
        private Int16 _OrderIdIncrement;
        private Int16 _WeightUnitId;
        private Int16 _MeasurementUnitId;
        private bool _IsDirty;

        /// <summary>
        /// StoreId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ApplicationName
        /// </summary>
        public String ApplicationName
        {
            get { return this._ApplicationName; }
            set
            {
                if (this._ApplicationName != value)
                {
                    this._ApplicationName = value;
                    this.IsDirty = true;
                    this._LoweredApplicationName = value.ToLowerInvariant();
                }
            }
        }

        /// <summary>
        /// LoweredApplicationName
        /// </summary>
        public String LoweredApplicationName
        {
            get { return this._LoweredApplicationName; }
        }

        /// <summary>
        /// LicenseKey
        /// </summary>
        public String LicenseKey
        {
            get { return this._LicenseKey; }
            set
            {
                if (this._LicenseKey != value)
                {
                    this._LicenseKey = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DefaultWarehouseId
        /// </summary>
        public Int32 DefaultWarehouseId
        {
            get { return this._DefaultWarehouseId; }
            set
            {
                if (this._DefaultWarehouseId != value)
                {
                    this._DefaultWarehouseId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// NextOrderId
        /// </summary>
        public Int32 NextOrderId
        {
            get { return this._NextOrderId; }
            set
            {
                if (this._NextOrderId != value)
                {
                    this._NextOrderId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderIdIncrement
        /// </summary>
        public Int16 OrderIdIncrement
        {
            get { return this._OrderIdIncrement; }
            set
            {
                if (this._OrderIdIncrement != value)
                {
                    this._OrderIdIncrement = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// WeightUnitId
        /// </summary>
        public Int16 WeightUnitId
        {
            get { return this._WeightUnitId; }
            set
            {
                if (this._WeightUnitId != value)
                {
                    this._WeightUnitId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MeasurementUnitId
        /// </summary>
        public Int16 MeasurementUnitId
        {
            get { return this._MeasurementUnitId; }
            set
            {
                if (this._MeasurementUnitId != value)
                {
                    this._MeasurementUnitId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Store object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.AffiliatesLoaded && this.Affiliates.IsDirty) return true;
                if (this.AuditEventsLoaded && this.AuditEvents.IsDirty) return true;
                if (this.BannedIPsLoaded && this.BannedIPs.IsDirty) return true;
                if (this.CategoriesLoaded && this.Categories.IsDirty) return true;
                if (this.CountriesLoaded && this.Countries.IsDirty) return true;
                if (this.CouponsLoaded && this.Coupons.IsDirty) return true;
                if (this.CurrenciesLoaded && this.Currencies.IsDirty) return true;
                if (this.CustomFieldsLoaded && this.CustomFields.IsDirty) return true;
                if (this.CustomUrlsLoaded && this.CustomUrls.IsDirty) return true;
                if (this.DigitalGoodsLoaded && this.DigitalGoods.IsDirty) return true;
                if (this.EmailListsLoaded && this.EmailLists.IsDirty) return true;
                if (this.EmailTemplatesLoaded && this.EmailTemplates.IsDirty) return true;
                if (this.ErrorMessagesLoaded && this.ErrorMessages.IsDirty) return true;
                if (this.GiftCertificatesLoaded && this.GiftCertificates.IsDirty) return true;
                if (this.GroupsLoaded && this.Groups.IsDirty) return true;
                if (this.KitComponentsLoaded && this.KitComponents.IsDirty) return true;
                if (this.LicenseAgreementsLoaded && this.LicenseAgreements.IsDirty) return true;
                if (this.LinksLoaded && this.Links.IsDirty) return true;
                if (this.ManufacturersLoaded && this.Manufacturers.IsDirty) return true;
                if (this.OrdersLoaded && this.Orders.IsDirty) return true;
                if (this.OrderStatusesLoaded && this.OrderStatuses.IsDirty) return true;
                if (this.PageViewsLoaded && this.PageViews.IsDirty) return true;
                if (this.PaymentGatewaysLoaded && this.PaymentGateways.IsDirty) return true;
                if (this.PaymentMethodsLoaded && this.PaymentMethods.IsDirty) return true;
                if (this.PersonalizationPathesLoaded && this.PersonalizationPathes.IsDirty) return true;
                if (this.ProductsLoaded && this.Products.IsDirty) return true;
                if (this.ProductTemplatesLoaded && this.ProductTemplates.IsDirty) return true;
                if (this.ReadmesLoaded && this.Readmes.IsDirty) return true;
                if (this.RedirectsLoaded && this.Redirects.IsDirty) return true;
                if (this.ShipGatewaysLoaded && this.ShipGateways.IsDirty) return true;
                if (this.ShipMethodsLoaded && this.ShipMethods.IsDirty) return true;
                if (this.ShipZonesLoaded && this.ShipZones.IsDirty) return true;
                if (this.SettingsLoaded && this.Settings.IsDirty) return true;
                if (this.TaxCodesLoaded && this.TaxCodes.IsDirty) return true;
                if (this.TaxGatewaysLoaded && this.TaxGateways.IsDirty) return true;
                if (this.TaxRulesLoaded && this.TaxRules.IsDirty) return true;
                if (this.UsersLoaded && this.Users.IsDirty) return true;
                if (this.VendorsLoaded && this.Vendors.IsDirty) return true;
                if (this.VolumeDiscountsLoaded && this.VolumeDiscounts.IsDirty) return true;
                if (this.WarehousesLoaded && this.Warehouses.IsDirty) return true;
                if (this.WebpagesLoaded && this.Webpages.IsDirty) return true;
                if (this.WrapGroupsLoaded && this.WrapGroups.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Store are properly associated with this Store object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.AffiliatesLoaded) { foreach (Affiliate affiliate in this.Affiliates) { affiliate.StoreId = this.StoreId; } }
            if (this.AuditEventsLoaded) { foreach (AuditEvent auditEvent in this.AuditEvents) { auditEvent.StoreId = this.StoreId; } }
            if (this.BannedIPsLoaded) { foreach (BannedIP bannedIP in this.BannedIPs) { bannedIP.StoreId = this.StoreId; } }
            if (this.CategoriesLoaded) { foreach (Category category in this.Categories) { category.StoreId = this.StoreId; } }
            if (this.CountriesLoaded) { foreach (Country country in this.Countries) { country.StoreId = this.StoreId; } }
            if (this.CouponsLoaded) { foreach (Coupon coupon in this.Coupons) { coupon.StoreId = this.StoreId; } }
            if (this.CurrenciesLoaded) { foreach (Currency currency in this.Currencies) { currency.StoreId = this.StoreId; } }
            if (this.CustomFieldsLoaded) { foreach (CustomField customField in this.CustomFields) { customField.StoreId = this.StoreId; } }
            if (this.CustomUrlsLoaded) { foreach (CustomUrl customUrl in this.CustomUrls) { customUrl.StoreId = this.StoreId; } }
            if (this.DigitalGoodsLoaded) { foreach (DigitalGood digitalGood in this.DigitalGoods) { digitalGood.StoreId = this.StoreId; } }
            if (this.EmailListsLoaded) { foreach (EmailList emailList in this.EmailLists) { emailList.StoreId = this.StoreId; } }
            if (this.EmailTemplatesLoaded) { foreach (EmailTemplate emailTemplate in this.EmailTemplates) { emailTemplate.StoreId = this.StoreId; } }
            if (this.ErrorMessagesLoaded) { foreach (ErrorMessage errorMessage in this.ErrorMessages) { errorMessage.StoreId = this.StoreId; } }
            if (this.GiftCertificatesLoaded) { foreach (GiftCertificate giftCertificate in this.GiftCertificates) { giftCertificate.StoreId = this.StoreId; } }
            if (this.GroupsLoaded) { foreach (Group group in this.Groups) { group.StoreId = this.StoreId; } }
            if (this.KitComponentsLoaded) { foreach (KitComponent kitComponent in this.KitComponents) { kitComponent.StoreId = this.StoreId; } }
            if (this.LicenseAgreementsLoaded) { foreach (LicenseAgreement licenseAgreement in this.LicenseAgreements) { licenseAgreement.StoreId = this.StoreId; } }
            if (this.LinksLoaded) { foreach (Link link in this.Links) { link.StoreId = this.StoreId; } }
            if (this.ManufacturersLoaded) { foreach (Manufacturer manufacturer in this.Manufacturers) { manufacturer.StoreId = this.StoreId; } }
            if (this.OrdersLoaded) { foreach (Order order in this.Orders) { order.StoreId = this.StoreId; } }
            if (this.OrderStatusesLoaded) { foreach (OrderStatus orderStatus in this.OrderStatuses) { orderStatus.StoreId = this.StoreId; } }
            if (this.PageViewsLoaded) { foreach (PageView pageView in this.PageViews) { pageView.StoreId = this.StoreId; } }
            if (this.PaymentGatewaysLoaded) { foreach (PaymentGateway paymentGateway in this.PaymentGateways) { paymentGateway.StoreId = this.StoreId; } }
            if (this.PaymentMethodsLoaded) { foreach (PaymentMethod paymentMethod in this.PaymentMethods) { paymentMethod.StoreId = this.StoreId; } }
            if (this.PersonalizationPathesLoaded) { foreach (PersonalizationPath personalizationPath in this.PersonalizationPathes) { personalizationPath.StoreId = this.StoreId; } }
            if (this.ProductsLoaded) { foreach (Product product in this.Products) { product.StoreId = this.StoreId; } }
            if (this.ProductTemplatesLoaded) { foreach (ProductTemplate productTemplate in this.ProductTemplates) { productTemplate.StoreId = this.StoreId; } }
            if (this.ReadmesLoaded) { foreach (Readme readme in this.Readmes) { readme.StoreId = this.StoreId; } }
            if (this.RedirectsLoaded) { foreach (Redirect redirect in this.Redirects) { redirect.StoreId = this.StoreId; } }
            if (this.ShipGatewaysLoaded) { foreach (ShipGateway shipGateway in this.ShipGateways) { shipGateway.StoreId = this.StoreId; } }
            if (this.ShipMethodsLoaded) { foreach (ShipMethod shipMethod in this.ShipMethods) { shipMethod.StoreId = this.StoreId; } }
            if (this.ShipZonesLoaded) { foreach (ShipZone shipZone in this.ShipZones) { shipZone.StoreId = this.StoreId; } }
            if (this.SettingsLoaded) { foreach (StoreSetting storeSetting in this.Settings) { storeSetting.StoreId = this.StoreId; } }
            if (this.TaxCodesLoaded) { foreach (TaxCode taxCode in this.TaxCodes) { taxCode.StoreId = this.StoreId; } }
            if (this.TaxGatewaysLoaded) { foreach (TaxGateway taxGateway in this.TaxGateways) { taxGateway.StoreId = this.StoreId; } }
            if (this.TaxRulesLoaded) { foreach (TaxRule taxRule in this.TaxRules) { taxRule.StoreId = this.StoreId; } }
            if (this.UsersLoaded) { foreach (User user in this.Users) { user.StoreId = this.StoreId; } }
            if (this.VendorsLoaded) { foreach (Vendor vendor in this.Vendors) { vendor.StoreId = this.StoreId; } }
            if (this.VolumeDiscountsLoaded) { foreach (VolumeDiscount volumeDiscount in this.VolumeDiscounts) { volumeDiscount.StoreId = this.StoreId; } }
            if (this.WarehousesLoaded) { foreach (Warehouse warehouse in this.Warehouses) { warehouse.StoreId = this.StoreId; } }
            if (this.WebpagesLoaded) { foreach (Webpage webpage in this.Webpages) { webpage.StoreId = this.StoreId; } }
            if (this.WrapGroupsLoaded) { foreach (WrapGroup wrapGroup in this.WrapGroups) { wrapGroup.StoreId = this.StoreId; } }
        }

#region Children
        private AffiliateCollection _Affiliates;
        private AuditEventCollection _AuditEvents;
        private BannedIPCollection _BannedIPs;
        private CategoryCollection _Categories;
        private CountryCollection _Countries;
        private CouponCollection _Coupons;
        private CurrencyCollection _Currencies;
        private CustomFieldCollection _CustomFields;
        private CustomUrlCollection _CustomUrls;
        private DigitalGoodCollection _DigitalGoods;
        private EmailListCollection _EmailLists;
        private EmailTemplateCollection _EmailTemplates;
        private ErrorMessageCollection _ErrorMessages;
        private GiftCertificateCollection _GiftCertificates;
        private GroupCollection _Groups;
        private KitComponentCollection _KitComponents;
        private LicenseAgreementCollection _LicenseAgreements;
        private LinkCollection _Links;
        private ManufacturerCollection _Manufacturers;
        private OrderCollection _Orders;
        private OrderStatusCollection _OrderStatuses;
        private PageViewCollection _PageViews;
        private PaymentGatewayCollection _PaymentGateways;
        private PaymentMethodCollection _PaymentMethods;
        private PersonalizationPathCollection _PersonalizationPathes;
        private ProductCollection _Products;
        private ProductTemplateCollection _ProductTemplates;
        private ReadmeCollection _Readmes;
        private RedirectCollection _Redirects;
        private ShipGatewayCollection _ShipGateways;
        private ShipMethodCollection _ShipMethods;
        private ShipZoneCollection _ShipZones;
        private StoreSettingCollection _Settings;
        private TaxCodeCollection _TaxCodes;
        private TaxGatewayCollection _TaxGateways;
        private TaxRuleCollection _TaxRules;
        private UserCollection _Users;
        private VendorCollection _Vendors;
        private VolumeDiscountCollection _VolumeDiscounts;
        private WarehouseCollection _Warehouses;
        private WebpageCollection _Webpages;
        private WrapGroupCollection _WrapGroups;

        /// <summary>
        /// A collection of Affiliate objects associated with this Store object.
        /// </summary>
        public AffiliateCollection Affiliates
        {
            get
            {
                if (!this.AffiliatesLoaded)
                {
                    this._Affiliates = AffiliateDataSource.LoadForStore();
                }
                return this._Affiliates;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AffiliatesLoaded { get { return (this._Affiliates != null); } }

        /// <summary>
        /// A collection of AuditEvent objects associated with this Store object.
        /// </summary>
        public AuditEventCollection AuditEvents
        {
            get
            {
                if (!this.AuditEventsLoaded)
                {
                    this._AuditEvents = AuditEventDataSource.LoadForStore();
                }
                return this._AuditEvents;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AuditEventsLoaded { get { return (this._AuditEvents != null); } }

        /// <summary>
        /// A collection of BannedIP objects associated with this Store object.
        /// </summary>
        public BannedIPCollection BannedIPs
        {
            get
            {
                if (!this.BannedIPsLoaded)
                {
                    this._BannedIPs = BannedIPDataSource.LoadForStore();
                }
                return this._BannedIPs;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BannedIPsLoaded { get { return (this._BannedIPs != null); } }

        /// <summary>
        /// A collection of Category objects associated with this Store object.
        /// </summary>
        public CategoryCollection Categories
        {
            get
            {
                if (!this.CategoriesLoaded)
                {
                    this._Categories = CategoryDataSource.LoadForStore();
                }
                return this._Categories;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CategoriesLoaded { get { return (this._Categories != null); } }

        /// <summary>
        /// A collection of Country objects associated with this Store object.
        /// </summary>
        public CountryCollection Countries
        {
            get
            {
                if (!this.CountriesLoaded)
                {
                    this._Countries = CountryDataSource.LoadForStore();
                }
                return this._Countries;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CountriesLoaded { get { return (this._Countries != null); } }

        /// <summary>
        /// A collection of Coupon objects associated with this Store object.
        /// </summary>
        public CouponCollection Coupons
        {
            get
            {
                if (!this.CouponsLoaded)
                {
                    this._Coupons = CouponDataSource.LoadForStore();
                }
                return this._Coupons;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CouponsLoaded { get { return (this._Coupons != null); } }

        /// <summary>
        /// A collection of Currency objects associated with this Store object.
        /// </summary>
        public CurrencyCollection Currencies
        {
            get
            {
                if (!this.CurrenciesLoaded)
                {
                    this._Currencies = CurrencyDataSource.LoadForStore();
                }
                return this._Currencies;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CurrenciesLoaded { get { return (this._Currencies != null); } }

        /// <summary>
        /// A collection of CustomField objects associated with this Store object.
        /// </summary>
        public CustomFieldCollection CustomFields
        {
            get
            {
                if (!this.CustomFieldsLoaded)
                {
                    this._CustomFields = CustomFieldDataSource.LoadForStore();
                }
                return this._CustomFields;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CustomFieldsLoaded { get { return (this._CustomFields != null); } }

        /// <summary>
        /// A collection of CustomUrl objects associated with this Store object.
        /// </summary>
        public CustomUrlCollection CustomUrls
        {
            get
            {
                if (!this.CustomUrlsLoaded)
                {
                    this._CustomUrls = CustomUrlDataSource.LoadForStore();
                }
                return this._CustomUrls;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CustomUrlsLoaded { get { return (this._CustomUrls != null); } }

        /// <summary>
        /// A collection of DigitalGood objects associated with this Store object.
        /// </summary>
        public DigitalGoodCollection DigitalGoods
        {
            get
            {
                if (!this.DigitalGoodsLoaded)
                {
                    this._DigitalGoods = DigitalGoodDataSource.LoadForStore();
                }
                return this._DigitalGoods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool DigitalGoodsLoaded { get { return (this._DigitalGoods != null); } }

        /// <summary>
        /// A collection of EmailList objects associated with this Store object.
        /// </summary>
        public EmailListCollection EmailLists
        {
            get
            {
                if (!this.EmailListsLoaded)
                {
                    this._EmailLists = EmailListDataSource.LoadForStore();
                }
                return this._EmailLists;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool EmailListsLoaded { get { return (this._EmailLists != null); } }

        /// <summary>
        /// A collection of EmailTemplate objects associated with this Store object.
        /// </summary>
        public EmailTemplateCollection EmailTemplates
        {
            get
            {
                if (!this.EmailTemplatesLoaded)
                {
                    this._EmailTemplates = EmailTemplateDataSource.LoadForStore();
                }
                return this._EmailTemplates;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool EmailTemplatesLoaded { get { return (this._EmailTemplates != null); } }

        /// <summary>
        /// A collection of ErrorMessage objects associated with this Store object.
        /// </summary>
        public ErrorMessageCollection ErrorMessages
        {
            get
            {
                if (!this.ErrorMessagesLoaded)
                {
                    this._ErrorMessages = ErrorMessageDataSource.LoadForStore();
                }
                return this._ErrorMessages;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ErrorMessagesLoaded { get { return (this._ErrorMessages != null); } }

        /// <summary>
        /// A collection of GiftCertificate objects associated with this Store object.
        /// </summary>
        public GiftCertificateCollection GiftCertificates
        {
            get
            {
                if (!this.GiftCertificatesLoaded)
                {
                    this._GiftCertificates = GiftCertificateDataSource.LoadForStore();
                }
                return this._GiftCertificates;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool GiftCertificatesLoaded { get { return (this._GiftCertificates != null); } }

        /// <summary>
        /// A collection of Group objects associated with this Store object.
        /// </summary>
        public GroupCollection Groups
        {
            get
            {
                if (!this.GroupsLoaded)
                {
                    this._Groups = GroupDataSource.LoadForStore();
                }
                return this._Groups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool GroupsLoaded { get { return (this._Groups != null); } }

        /// <summary>
        /// A collection of KitComponent objects associated with this Store object.
        /// </summary>
        public KitComponentCollection KitComponents
        {
            get
            {
                if (!this.KitComponentsLoaded)
                {
                    this._KitComponents = KitComponentDataSource.LoadForStore();
                }
                return this._KitComponents;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool KitComponentsLoaded { get { return (this._KitComponents != null); } }

        /// <summary>
        /// A collection of LicenseAgreement objects associated with this Store object.
        /// </summary>
        public LicenseAgreementCollection LicenseAgreements
        {
            get
            {
                if (!this.LicenseAgreementsLoaded)
                {
                    this._LicenseAgreements = LicenseAgreementDataSource.LoadForStore();
                }
                return this._LicenseAgreements;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool LicenseAgreementsLoaded { get { return (this._LicenseAgreements != null); } }

        /// <summary>
        /// A collection of Link objects associated with this Store object.
        /// </summary>
        public LinkCollection Links
        {
            get
            {
                if (!this.LinksLoaded)
                {
                    this._Links = LinkDataSource.LoadForStore();
                }
                return this._Links;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool LinksLoaded { get { return (this._Links != null); } }

        /// <summary>
        /// A collection of Manufacturer objects associated with this Store object.
        /// </summary>
        public ManufacturerCollection Manufacturers
        {
            get
            {
                if (!this.ManufacturersLoaded)
                {
                    this._Manufacturers = ManufacturerDataSource.LoadForStore();
                }
                return this._Manufacturers;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ManufacturersLoaded { get { return (this._Manufacturers != null); } }

        /// <summary>
        /// A collection of Order objects associated with this Store object.
        /// </summary>
        public OrderCollection Orders
        {
            get
            {
                if (!this.OrdersLoaded)
                {
                    this._Orders = OrderDataSource.LoadForStore();
                }
                return this._Orders;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrdersLoaded { get { return (this._Orders != null); } }

        /// <summary>
        /// A collection of OrderStatus objects associated with this Store object.
        /// </summary>
        public OrderStatusCollection OrderStatuses
        {
            get
            {
                if (!this.OrderStatusesLoaded)
                {
                    this._OrderStatuses = OrderStatusDataSource.LoadForStore();
                }
                return this._OrderStatuses;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderStatusesLoaded { get { return (this._OrderStatuses != null); } }

        /// <summary>
        /// A collection of PageView objects associated with this Store object.
        /// </summary>
        public PageViewCollection PageViews
        {
            get
            {
                if (!this.PageViewsLoaded)
                {
                    this._PageViews = PageViewDataSource.LoadForStore();
                }
                return this._PageViews;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PageViewsLoaded { get { return (this._PageViews != null); } }

        /// <summary>
        /// A collection of PaymentGateway objects associated with this Store object.
        /// </summary>
        public PaymentGatewayCollection PaymentGateways
        {
            get
            {
                if (!this.PaymentGatewaysLoaded)
                {
                    this._PaymentGateways = PaymentGatewayDataSource.LoadForStore();
                }
                return this._PaymentGateways;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentGatewaysLoaded { get { return (this._PaymentGateways != null); } }

        /// <summary>
        /// A collection of PaymentMethod objects associated with this Store object.
        /// </summary>
        public PaymentMethodCollection PaymentMethods
        {
            get
            {
                if (!this.PaymentMethodsLoaded)
                {
                    this._PaymentMethods = PaymentMethodDataSource.LoadForStore();
                }
                return this._PaymentMethods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PaymentMethodsLoaded { get { return (this._PaymentMethods != null); } }

        /// <summary>
        /// A collection of PersonalizationPath objects associated with this Store object.
        /// </summary>
        public PersonalizationPathCollection PersonalizationPathes
        {
            get
            {
                if (!this.PersonalizationPathesLoaded)
                {
                    this._PersonalizationPathes = PersonalizationPathDataSource.LoadForStore();
                }
                return this._PersonalizationPathes;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PersonalizationPathesLoaded { get { return (this._PersonalizationPathes != null); } }

        /// <summary>
        /// A collection of Product objects associated with this Store object.
        /// </summary>
        public ProductCollection Products
        {
            get
            {
                if (!this.ProductsLoaded)
                {
                    this._Products = ProductDataSource.LoadForStore();
                }
                return this._Products;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductsLoaded { get { return (this._Products != null); } }

        /// <summary>
        /// A collection of ProductTemplate objects associated with this Store object.
        /// </summary>
        public ProductTemplateCollection ProductTemplates
        {
            get
            {
                if (!this.ProductTemplatesLoaded)
                {
                    this._ProductTemplates = ProductTemplateDataSource.LoadForStore();
                }
                return this._ProductTemplates;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductTemplatesLoaded { get { return (this._ProductTemplates != null); } }

        /// <summary>
        /// A collection of Readme objects associated with this Store object.
        /// </summary>
        public ReadmeCollection Readmes
        {
            get
            {
                if (!this.ReadmesLoaded)
                {
                    this._Readmes = ReadmeDataSource.LoadForStore();
                }
                return this._Readmes;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ReadmesLoaded { get { return (this._Readmes != null); } }

        /// <summary>
        /// A collection of Redirect objects associated with this Store object.
        /// </summary>
        public RedirectCollection Redirects
        {
            get
            {
                if (!this.RedirectsLoaded)
                {
                    this._Redirects = RedirectDataSource.LoadForStore();
                }
                return this._Redirects;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool RedirectsLoaded { get { return (this._Redirects != null); } }

        /// <summary>
        /// A collection of ShipGateway objects associated with this Store object.
        /// </summary>
        public ShipGatewayCollection ShipGateways
        {
            get
            {
                if (!this.ShipGatewaysLoaded)
                {
                    this._ShipGateways = ShipGatewayDataSource.LoadForStore();
                }
                return this._ShipGateways;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipGatewaysLoaded { get { return (this._ShipGateways != null); } }

        /// <summary>
        /// A collection of ShipMethod objects associated with this Store object.
        /// </summary>
        public ShipMethodCollection ShipMethods
        {
            get
            {
                if (!this.ShipMethodsLoaded)
                {
                    this._ShipMethods = ShipMethodDataSource.LoadForStore();
                }
                return this._ShipMethods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodsLoaded { get { return (this._ShipMethods != null); } }

        /// <summary>
        /// A collection of ShipZone objects associated with this Store object.
        /// </summary>
        public ShipZoneCollection ShipZones
        {
            get
            {
                if (!this.ShipZonesLoaded)
                {
                    this._ShipZones = ShipZoneDataSource.LoadForStore();
                }
                return this._ShipZones;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipZonesLoaded { get { return (this._ShipZones != null); } }

        /// <summary>
        /// A collection of StoreSetting objects associated with this Store object.
        /// </summary>
        public StoreSettingCollection Settings
        {
            get
            {
                if (!this.SettingsLoaded)
                {
                    this._Settings = StoreSettingDataSource.LoadForStore();
                }
                return this._Settings;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SettingsLoaded { get { return (this._Settings != null); } }

        /// <summary>
        /// A collection of TaxCode objects associated with this Store object.
        /// </summary>
        public TaxCodeCollection TaxCodes
        {
            get
            {
                if (!this.TaxCodesLoaded)
                {
                    this._TaxCodes = TaxCodeDataSource.LoadForStore();
                }
                return this._TaxCodes;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxCodesLoaded { get { return (this._TaxCodes != null); } }

        /// <summary>
        /// A collection of TaxGateway objects associated with this Store object.
        /// </summary>
        public TaxGatewayCollection TaxGateways
        {
            get
            {
                if (!this.TaxGatewaysLoaded)
                {
                    this._TaxGateways = TaxGatewayDataSource.LoadForStore();
                }
                return this._TaxGateways;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxGatewaysLoaded { get { return (this._TaxGateways != null); } }

        /// <summary>
        /// A collection of TaxRule objects associated with this Store object.
        /// </summary>
        public TaxRuleCollection TaxRules
        {
            get
            {
                if (!this.TaxRulesLoaded)
                {
                    this._TaxRules = TaxRuleDataSource.LoadForStore();
                }
                return this._TaxRules;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxRulesLoaded { get { return (this._TaxRules != null); } }

        /// <summary>
        /// A collection of User objects associated with this Store object.
        /// </summary>
        public UserCollection Users
        {
            get
            {
                if (!this.UsersLoaded)
                {
                    this._Users = UserDataSource.LoadForStore();
                }
                return this._Users;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UsersLoaded { get { return (this._Users != null); } }

        /// <summary>
        /// A collection of Vendor objects associated with this Store object.
        /// </summary>
        public VendorCollection Vendors
        {
            get
            {
                if (!this.VendorsLoaded)
                {
                    this._Vendors = VendorDataSource.LoadForStore();
                }
                return this._Vendors;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool VendorsLoaded { get { return (this._Vendors != null); } }

        /// <summary>
        /// A collection of VolumeDiscount objects associated with this Store object.
        /// </summary>
        public VolumeDiscountCollection VolumeDiscounts
        {
            get
            {
                if (!this.VolumeDiscountsLoaded)
                {
                    this._VolumeDiscounts = VolumeDiscountDataSource.LoadForStore();
                }
                return this._VolumeDiscounts;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool VolumeDiscountsLoaded { get { return (this._VolumeDiscounts != null); } }

        /// <summary>
        /// A collection of Warehouse objects associated with this Store object.
        /// </summary>
        public WarehouseCollection Warehouses
        {
            get
            {
                if (!this.WarehousesLoaded)
                {
                    this._Warehouses = WarehouseDataSource.LoadForStore();
                }
                return this._Warehouses;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WarehousesLoaded { get { return (this._Warehouses != null); } }

        /// <summary>
        /// A collection of Webpage objects associated with this Store object.
        /// </summary>
        public WebpageCollection Webpages
        {
            get
            {
                if (!this.WebpagesLoaded)
                {
                    this._Webpages = WebpageDataSource.LoadForStore();
                }
                return this._Webpages;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WebpagesLoaded { get { return (this._Webpages != null); } }

        /// <summary>
        /// A collection of WrapGroup objects associated with this Store object.
        /// </summary>
        public WrapGroupCollection WrapGroups
        {
            get
            {
                if (!this.WrapGroupsLoaded)
                {
                    this._WrapGroups = WrapGroupDataSource.LoadForStore();
                }
                return this._WrapGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WrapGroupsLoaded { get { return (this._WrapGroups != null); } }

#endregion

        /// <summary>
        /// Deletes this Store object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Stores");
            deleteQuery.Append(" WHERE StoreId = @storeId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Store object from the database for the given primary key.
        /// </summary>
        /// <param name="storeId">Value of StoreId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 storeId)
        {
            bool result = false;
            this.StoreId = storeId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Stores");
            selectQuery.Append(" WHERE StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Store object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.StoreId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Stores");
                    selectQuery.Append(" WHERE StoreId = @storeId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Stores SET ");
                    updateQuery.Append("Name = @Name");
                    updateQuery.Append(", ApplicationName = @ApplicationName");
                    updateQuery.Append(", LoweredApplicationName = @LoweredApplicationName");
                    updateQuery.Append(", LicenseKey = @LicenseKey");
                    updateQuery.Append(", DefaultWarehouseId = @DefaultWarehouseId");
                    updateQuery.Append(", NextOrderId = @NextOrderId");
                    updateQuery.Append(", OrderIdIncrement = @OrderIdIncrement");
                    updateQuery.Append(", WeightUnitId = @WeightUnitId");
                    updateQuery.Append(", MeasurementUnitId = @MeasurementUnitId");
                    updateQuery.Append(" WHERE StoreId = @StoreId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@ApplicationName", System.Data.DbType.String, this.ApplicationName);
                        database.AddInParameter(updateCommand, "@LoweredApplicationName", System.Data.DbType.String, this.LoweredApplicationName);
                        database.AddInParameter(updateCommand, "@LicenseKey", System.Data.DbType.String, NullableData.DbNullify(this.LicenseKey));
                        database.AddInParameter(updateCommand, "@DefaultWarehouseId", System.Data.DbType.Int32, NullableData.DbNullify(this.DefaultWarehouseId));
                        database.AddInParameter(updateCommand, "@NextOrderId", System.Data.DbType.Int32, this.NextOrderId);
                        database.AddInParameter(updateCommand, "@OrderIdIncrement", System.Data.DbType.Int16, this.OrderIdIncrement);
                        database.AddInParameter(updateCommand, "@WeightUnitId", System.Data.DbType.Int16, this.WeightUnitId);
                        database.AddInParameter(updateCommand, "@MeasurementUnitId", System.Data.DbType.Int16, this.MeasurementUnitId);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Stores (Name, ApplicationName, LoweredApplicationName, LicenseKey, DefaultWarehouseId, NextOrderId, OrderIdIncrement, WeightUnitId, MeasurementUnitId)");
                    insertQuery.Append(" VALUES (@Name, @ApplicationName, @LoweredApplicationName, @LicenseKey, @DefaultWarehouseId, @NextOrderId, @OrderIdIncrement, @WeightUnitId, @MeasurementUnitId)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@ApplicationName", System.Data.DbType.String, this.ApplicationName);
                        database.AddInParameter(insertCommand, "@LoweredApplicationName", System.Data.DbType.String, this.LoweredApplicationName);
                        database.AddInParameter(insertCommand, "@LicenseKey", System.Data.DbType.String, NullableData.DbNullify(this.LicenseKey));
                        database.AddInParameter(insertCommand, "@DefaultWarehouseId", System.Data.DbType.Int32, NullableData.DbNullify(this.DefaultWarehouseId));
                        database.AddInParameter(insertCommand, "@NextOrderId", System.Data.DbType.Int32, this.NextOrderId);
                        database.AddInParameter(insertCommand, "@OrderIdIncrement", System.Data.DbType.Int16, this.OrderIdIncrement);
                        database.AddInParameter(insertCommand, "@WeightUnitId", System.Data.DbType.Int16, this.WeightUnitId);
                        database.AddInParameter(insertCommand, "@MeasurementUnitId", System.Data.DbType.Int16, this.MeasurementUnitId);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._StoreId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Store object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.AffiliatesLoaded) this.Affiliates.Save();
            if (this.AuditEventsLoaded) this.AuditEvents.Save();
            if (this.BannedIPsLoaded) this.BannedIPs.Save();
            if (this.CategoriesLoaded) this.Categories.Save();
            if (this.CountriesLoaded) this.Countries.Save();
            if (this.CouponsLoaded) this.Coupons.Save();
            if (this.CurrenciesLoaded) this.Currencies.Save();
            if (this.CustomFieldsLoaded) this.CustomFields.Save();
            if (this.CustomUrlsLoaded) this.CustomUrls.Save();
            if (this.DigitalGoodsLoaded) this.DigitalGoods.Save();
            if (this.EmailListsLoaded) this.EmailLists.Save();
            if (this.EmailTemplatesLoaded) this.EmailTemplates.Save();
            if (this.ErrorMessagesLoaded) this.ErrorMessages.Save();
            if (this.GiftCertificatesLoaded) this.GiftCertificates.Save();
            if (this.GroupsLoaded) this.Groups.Save();
            if (this.KitComponentsLoaded) this.KitComponents.Save();
            if (this.LicenseAgreementsLoaded) this.LicenseAgreements.Save();
            if (this.LinksLoaded) this.Links.Save();
            if (this.ManufacturersLoaded) this.Manufacturers.Save();
            if (this.OrdersLoaded) this.Orders.Save();
            if (this.OrderStatusesLoaded) this.OrderStatuses.Save();
            if (this.PageViewsLoaded) this.PageViews.Save();
            if (this.PaymentGatewaysLoaded) this.PaymentGateways.Save();
            if (this.PaymentMethodsLoaded) this.PaymentMethods.Save();
            if (this.PersonalizationPathesLoaded) this.PersonalizationPathes.Save();
            if (this.ProductsLoaded) this.Products.Save();
            if (this.ProductTemplatesLoaded) this.ProductTemplates.Save();
            if (this.ReadmesLoaded) this.Readmes.Save();
            if (this.RedirectsLoaded) this.Redirects.Save();
            if (this.ShipGatewaysLoaded) this.ShipGateways.Save();
            if (this.ShipMethodsLoaded) this.ShipMethods.Save();
            if (this.ShipZonesLoaded) this.ShipZones.Save();
            if (this.SettingsLoaded) this.Settings.Save();
            if (this.TaxCodesLoaded) this.TaxCodes.Save();
            if (this.TaxGatewaysLoaded) this.TaxGateways.Save();
            if (this.TaxRulesLoaded) this.TaxRules.Save();
            if (this.UsersLoaded) this.Users.Save();
            if (this.VendorsLoaded) this.Vendors.Save();
            if (this.VolumeDiscountsLoaded) this.VolumeDiscounts.Save();
            if (this.WarehousesLoaded) this.Warehouses.Save();
            if (this.WebpagesLoaded) this.Webpages.Save();
            if (this.WrapGroupsLoaded) this.WrapGroups.Save();
        }

     }
}
