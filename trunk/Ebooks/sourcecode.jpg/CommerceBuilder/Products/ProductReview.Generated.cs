//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Products;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a ProductReview object in the database.
    /// </summary>
    public partial class ProductReview : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ProductReview() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="productReviewId">Value of ProductReviewId.</param>
        /// </summary>
        public ProductReview(Int32 productReviewId)
        {
            this.ProductReviewId = productReviewId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ProductReviewId");
          columnNames.Add(prefix + "ProductId");
          columnNames.Add(prefix + "ReviewerProfileId");
          columnNames.Add(prefix + "ReviewDate");
          columnNames.Add(prefix + "Rating");
          columnNames.Add(prefix + "ReviewTitle");
          columnNames.Add(prefix + "ReviewBody");
          columnNames.Add(prefix + "IsApproved");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given ProductReview object from the given database data reader.
        /// </summary>
        /// <param name="productReview">The ProductReview object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(ProductReview productReview, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            productReview.ProductReviewId = dr.GetInt32(0);
            productReview.ProductId = dr.GetInt32(1);
            productReview.ReviewerProfileId = dr.GetInt32(2);
            productReview.ReviewDate = LocaleHelper.ToLocalTime(dr.GetDateTime(3));
            productReview.Rating = dr.GetByte(4);
            productReview.ReviewTitle = dr.GetString(5);
            productReview.ReviewBody = dr.GetString(6);
            productReview.IsApproved = dr.GetBoolean(7);
            productReview.IsDirty = false;
        }

#endregion

        private Int32 _ProductReviewId;
        private Int32 _ProductId;
        private Int32 _ReviewerProfileId;
        private DateTime _ReviewDate;
        private Byte _Rating;
        private String _ReviewTitle = string.Empty;
        private String _ReviewBody = string.Empty;
        private Boolean _IsApproved;
        private bool _IsDirty;

        /// <summary>
        /// ProductReviewId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 ProductReviewId
        {
            get { return this._ProductReviewId; }
            set
            {
                if (this._ProductReviewId != value)
                {
                    this._ProductReviewId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ProductId
        /// </summary>
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this._Product = null;
                }
            }
        }

        /// <summary>
        /// ReviewerProfileId
        /// </summary>
        public Int32 ReviewerProfileId
        {
            get { return this._ReviewerProfileId; }
            set
            {
                if (this._ReviewerProfileId != value)
                {
                    this._ReviewerProfileId = value;
                    this.IsDirty = true;
                    this._ReviewerProfile = null;
                }
            }
        }

        /// <summary>
        /// ReviewDate
        /// </summary>
        public DateTime ReviewDate
        {
            get { return this._ReviewDate; }
            set
            {
                if (this._ReviewDate != value)
                {
                    this._ReviewDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Rating
        /// </summary>
        public Byte Rating
        {
            get { return this._Rating; }
            set
            {
                if (this._Rating != value)
                {
                    this._Rating = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReviewTitle
        /// </summary>
        public String ReviewTitle
        {
            get { return this._ReviewTitle; }
            set
            {
                if (this._ReviewTitle != value)
                {
                    this._ReviewTitle = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ReviewBody
        /// </summary>
        public String ReviewBody
        {
            get { return this._ReviewBody; }
            set
            {
                if (this._ReviewBody != value)
                {
                    this._ReviewBody = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsApproved
        /// </summary>
        public Boolean IsApproved
        {
            get { return this._IsApproved; }
            set
            {
                if (this._IsApproved != value)
                {
                    this._IsApproved = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this ProductReview object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private Product _Product;
        private ReviewerProfile _ReviewerProfile;

        /// <summary>
        /// The Product object that this ProductReview object is associated with
        /// </summary>
        public Product Product
        {
            get
            {
                if (!this.ProductLoaded)
                {
                    this._Product = ProductDataSource.Load(this.ProductId);
                }
                return this._Product;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductLoaded { get { return ((this._Product != null) && (this._Product.ProductId == this.ProductId)); } }

        /// <summary>
        /// The ReviewerProfile object that this ProductReview object is associated with
        /// </summary>
        public ReviewerProfile ReviewerProfile
        {
            get
            {
                if (!this.ReviewerProfileLoaded)
                {
                    this._ReviewerProfile = ReviewerProfileDataSource.Load(this.ReviewerProfileId);
                }
                return this._ReviewerProfile;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ReviewerProfileLoaded { get { return ((this._ReviewerProfile != null) && (this._ReviewerProfile.ReviewerProfileId == this.ReviewerProfileId)); } }

#endregion

        /// <summary>
        /// Deletes this ProductReview object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_ProductReviews");
            deleteQuery.Append(" WHERE ProductReviewId = @ProductReviewId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ProductReviewId", System.Data.DbType.Int32, this.ProductReviewId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this ProductReview object from the database for the given primary key.
        /// </summary>
        /// <param name="productReviewId">Value of ProductReviewId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 productReviewId)
        {
            bool result = false;
            this.ProductReviewId = productReviewId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ProductReviews");
            selectQuery.Append(" WHERE ProductReviewId = @productReviewId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productReviewId", System.Data.DbType.Int32, productReviewId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this ProductReview object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.ProductReviewId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.ReviewDate == System.DateTime.MinValue) this.ReviewDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_ProductReviews");
                    selectQuery.Append(" WHERE ProductReviewId = @ProductReviewId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ProductReviewId", System.Data.DbType.Int32, this.ProductReviewId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_ProductReviews SET ");
                    updateQuery.Append("ProductId = @ProductId");
                    updateQuery.Append(", ReviewerProfileId = @ReviewerProfileId");
                    updateQuery.Append(", ReviewDate = @ReviewDate");
                    updateQuery.Append(", Rating = @Rating");
                    updateQuery.Append(", ReviewTitle = @ReviewTitle");
                    updateQuery.Append(", ReviewBody = @ReviewBody");
                    updateQuery.Append(", IsApproved = @IsApproved");
                    updateQuery.Append(" WHERE ProductReviewId = @ProductReviewId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@ProductReviewId", System.Data.DbType.Int32, this.ProductReviewId);
                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(updateCommand, "@ReviewerProfileId", System.Data.DbType.Int32, this.ReviewerProfileId);
                        database.AddInParameter(updateCommand, "@ReviewDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.ReviewDate));
                        database.AddInParameter(updateCommand, "@Rating", System.Data.DbType.Byte, this.Rating);
                        database.AddInParameter(updateCommand, "@ReviewTitle", System.Data.DbType.String, this.ReviewTitle);
                        database.AddInParameter(updateCommand, "@ReviewBody", System.Data.DbType.String, this.ReviewBody);
                        database.AddInParameter(updateCommand, "@IsApproved", System.Data.DbType.Boolean, this.IsApproved);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_ProductReviews (ProductId, ReviewerProfileId, ReviewDate, Rating, ReviewTitle, ReviewBody, IsApproved)");
                    insertQuery.Append(" VALUES (@ProductId, @ReviewerProfileId, @ReviewDate, @Rating, @ReviewTitle, @ReviewBody, @IsApproved)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ProductReviewId", System.Data.DbType.Int32, this.ProductReviewId);
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@ReviewerProfileId", System.Data.DbType.Int32, this.ReviewerProfileId);
                        database.AddInParameter(insertCommand, "@ReviewDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.ReviewDate));
                        database.AddInParameter(insertCommand, "@Rating", System.Data.DbType.Byte, this.Rating);
                        database.AddInParameter(insertCommand, "@ReviewTitle", System.Data.DbType.String, this.ReviewTitle);
                        database.AddInParameter(insertCommand, "@ReviewBody", System.Data.DbType.String, this.ReviewBody);
                        database.AddInParameter(insertCommand, "@IsApproved", System.Data.DbType.Boolean, this.IsApproved);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._ProductReviewId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
