//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Products;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a Special object in the database.
    /// </summary>
    public partial class Special : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Special() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="specialId">Value of SpecialId.</param>
        /// </summary>
        public Special(Int32 specialId)
        {
            this.SpecialId = specialId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "SpecialId");
          columnNames.Add(prefix + "ProductId");
          columnNames.Add(prefix + "Price");
          columnNames.Add(prefix + "StartDate");
          columnNames.Add(prefix + "EndDate");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Special object from the given database data reader.
        /// </summary>
        /// <param name="special">The Special object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Special special, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            special.SpecialId = dr.GetInt32(0);
            special.ProductId = dr.GetInt32(1);
            special.Price = dr.GetDecimal(2);
            special.StartDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 3));
            special.EndDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 4));
            special.IsDirty = false;
        }

#endregion

        private Int32 _SpecialId;
        private Int32 _ProductId;
        private LSDecimal _Price;
        private DateTime _StartDate;
        private DateTime _EndDate;
        private bool _IsDirty;

        /// <summary>
        /// SpecialId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 SpecialId
        {
            get { return this._SpecialId; }
            set
            {
                if (this._SpecialId != value)
                {
                    this._SpecialId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// ProductId
        /// </summary>
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this._Product = null;
                }
            }
        }

        /// <summary>
        /// Price
        /// </summary>
        public LSDecimal Price
        {
            get { return this._Price; }
            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// StartDate
        /// </summary>
        public DateTime StartDate
        {
            get { return this._StartDate; }
            set
            {
                if (this._StartDate != value)
                {
                    this._StartDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// EndDate
        /// </summary>
        public DateTime EndDate
        {
            get { return this._EndDate; }
            set
            {
                if (this._EndDate != value)
                {
                    this._EndDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Special object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.SpecialGroupsLoaded && this.SpecialGroups.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Special are properly associated with this Special object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.SpecialGroupsLoaded) { foreach (SpecialGroup specialGroup in this.SpecialGroups) { specialGroup.SpecialId = this.SpecialId; } }
        }

#region Parents
        private Product _Product;

        /// <summary>
        /// The Product object that this Special object is associated with
        /// </summary>
        public Product Product
        {
            get
            {
                if (!this.ProductLoaded)
                {
                    this._Product = ProductDataSource.Load(this.ProductId);
                }
                return this._Product;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductLoaded { get { return ((this._Product != null) && (this._Product.ProductId == this.ProductId)); } }

#endregion

#region Associations
        private SpecialGroupCollection _SpecialGroups;

        /// <summary>
        /// A collection of SpecialGroup objects associated with this Special object.
        /// </summary>
        public SpecialGroupCollection SpecialGroups
        {
            get
            {
                if (!this.SpecialGroupsLoaded)
                {
                    this._SpecialGroups = SpecialGroupDataSource.LoadForSpecial(this.SpecialId);
                }
                return this._SpecialGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SpecialGroupsLoaded { get { return (this._SpecialGroups != null); } }
#endregion

        /// <summary>
        /// Deletes this Special object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Specials");
            deleteQuery.Append(" WHERE SpecialId = @SpecialId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@SpecialId", System.Data.DbType.Int32, this.SpecialId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Special object from the database for the given primary key.
        /// </summary>
        /// <param name="specialId">Value of SpecialId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 specialId)
        {
            bool result = false;
            this.SpecialId = specialId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Specials");
            selectQuery.Append(" WHERE SpecialId = @specialId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@specialId", System.Data.DbType.Int32, specialId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Special object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.SpecialId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Specials");
                    selectQuery.Append(" WHERE SpecialId = @SpecialId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@SpecialId", System.Data.DbType.Int32, this.SpecialId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Specials SET ");
                    updateQuery.Append("ProductId = @ProductId");
                    updateQuery.Append(", Price = @Price");
                    updateQuery.Append(", StartDate = @StartDate");
                    updateQuery.Append(", EndDate = @EndDate");
                    updateQuery.Append(" WHERE SpecialId = @SpecialId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@SpecialId", System.Data.DbType.Int32, this.SpecialId);
                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(updateCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(updateCommand, "@StartDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.StartDate)));
                        database.AddInParameter(updateCommand, "@EndDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.EndDate)));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Specials (ProductId, Price, StartDate, EndDate)");
                    insertQuery.Append(" VALUES (@ProductId, @Price, @StartDate, @EndDate)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@SpecialId", System.Data.DbType.Int32, this.SpecialId);
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(insertCommand, "@StartDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.StartDate)));
                        database.AddInParameter(insertCommand, "@EndDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.EndDate)));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._SpecialId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Special object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.SpecialGroupsLoaded) this.SpecialGroups.Save();
        }

     }
}
