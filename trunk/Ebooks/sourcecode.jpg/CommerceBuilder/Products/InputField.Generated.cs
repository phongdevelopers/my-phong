//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Products;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a InputField object in the database.
    /// </summary>
    public partial class InputField : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public InputField() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="inputFieldId">Value of InputFieldId.</param>
        /// </summary>
        public InputField(Int32 inputFieldId)
        {
            this.InputFieldId = inputFieldId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "InputFieldId");
          columnNames.Add(prefix + "ProductTemplateId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "UserPrompt");
          columnNames.Add(prefix + "InputTypeId");
          columnNames.Add(prefix + "Rows");
          columnNames.Add(prefix + "Columns");
          columnNames.Add(prefix + "MaxLength");
          columnNames.Add(prefix + "IsRequired");
          columnNames.Add(prefix + "RequiredMessage");
          columnNames.Add(prefix + "IsMerchantField");
          columnNames.Add(prefix + "PersistWithOrder");
          columnNames.Add(prefix + "PromptCssClass");
          columnNames.Add(prefix + "ControlCssClass");
          columnNames.Add(prefix + "AdditionalData");
          columnNames.Add(prefix + "OrderBy");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given InputField object from the given database data reader.
        /// </summary>
        /// <param name="inputField">The InputField object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(InputField inputField, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            inputField.InputFieldId = dr.GetInt32(0);
            inputField.ProductTemplateId = dr.GetInt32(1);
            inputField.Name = dr.GetString(2);
            inputField.UserPrompt = dr.GetString(3);
            inputField.InputTypeId = dr.GetInt16(4);
            inputField.Rows = dr.GetByte(5);
            inputField.Columns = dr.GetByte(6);
            inputField.MaxLength = dr.GetInt16(7);
            inputField.IsRequired = dr.GetBoolean(8);
            inputField.RequiredMessage = NullableData.GetString(dr, 9);
            inputField.IsMerchantField = dr.GetBoolean(10);
            inputField.PersistWithOrder = dr.GetBoolean(11);
            inputField.PromptCssClass = NullableData.GetString(dr, 12);
            inputField.ControlCssClass = NullableData.GetString(dr, 13);
            inputField.AdditionalData = NullableData.GetString(dr, 14);
            inputField.OrderBy = dr.GetInt16(15);
            inputField.IsDirty = false;
        }

#endregion

        private Int32 _InputFieldId;
        private Int32 _ProductTemplateId;
        private String _Name = string.Empty;
        private String _UserPrompt = string.Empty;
        private Int16 _InputTypeId;
        private Byte _Rows;
        private Byte _Columns;
        private Int16 _MaxLength;
        private Boolean _IsRequired;
        private String _RequiredMessage = string.Empty;
        private Boolean _IsMerchantField;
        private Boolean _PersistWithOrder;
        private String _PromptCssClass = string.Empty;
        private String _ControlCssClass = string.Empty;
        private String _AdditionalData = string.Empty;
        private Int16 _OrderBy = -1;
        private bool _IsDirty;

        /// <summary>
        /// InputFieldId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 InputFieldId
        {
            get { return this._InputFieldId; }
            set
            {
                if (this._InputFieldId != value)
                {
                    this._InputFieldId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// ProductTemplateId
        /// </summary>
        public Int32 ProductTemplateId
        {
            get { return this._ProductTemplateId; }
            set
            {
                if (this._ProductTemplateId != value)
                {
                    this._ProductTemplateId = value;
                    this.IsDirty = true;
                    this._ProductTemplate = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UserPrompt
        /// </summary>
        public String UserPrompt
        {
            get { return this._UserPrompt; }
            set
            {
                if (this._UserPrompt != value)
                {
                    this._UserPrompt = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// InputTypeId
        /// </summary>
        public Int16 InputTypeId
        {
            get { return this._InputTypeId; }
            set
            {
                if (this._InputTypeId != value)
                {
                    this._InputTypeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Rows
        /// </summary>
        public Byte Rows
        {
            get { return this._Rows; }
            set
            {
                if (this._Rows != value)
                {
                    this._Rows = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Columns
        /// </summary>
        public Byte Columns
        {
            get { return this._Columns; }
            set
            {
                if (this._Columns != value)
                {
                    this._Columns = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MaxLength
        /// </summary>
        public Int16 MaxLength
        {
            get { return this._MaxLength; }
            set
            {
                if (this._MaxLength != value)
                {
                    this._MaxLength = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsRequired
        /// </summary>
        public Boolean IsRequired
        {
            get { return this._IsRequired; }
            set
            {
                if (this._IsRequired != value)
                {
                    this._IsRequired = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// RequiredMessage
        /// </summary>
        public String RequiredMessage
        {
            get { return this._RequiredMessage; }
            set
            {
                if (this._RequiredMessage != value)
                {
                    this._RequiredMessage = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsMerchantField
        /// </summary>
        public Boolean IsMerchantField
        {
            get { return this._IsMerchantField; }
            set
            {
                if (this._IsMerchantField != value)
                {
                    this._IsMerchantField = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PersistWithOrder
        /// </summary>
        public Boolean PersistWithOrder
        {
            get { return this._PersistWithOrder; }
            set
            {
                if (this._PersistWithOrder != value)
                {
                    this._PersistWithOrder = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PromptCssClass
        /// </summary>
        public String PromptCssClass
        {
            get { return this._PromptCssClass; }
            set
            {
                if (this._PromptCssClass != value)
                {
                    this._PromptCssClass = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ControlCssClass
        /// </summary>
        public String ControlCssClass
        {
            get { return this._ControlCssClass; }
            set
            {
                if (this._ControlCssClass != value)
                {
                    this._ControlCssClass = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// AdditionalData
        /// </summary>
        public String AdditionalData
        {
            get { return this._AdditionalData; }
            set
            {
                if (this._AdditionalData != value)
                {
                    this._AdditionalData = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// OrderBy
        /// </summary>
        public Int16 OrderBy
        {
            get { return this._OrderBy; }
            set
            {
                if (this._OrderBy != value)
                {
                    this._OrderBy = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this InputField object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.BasketItemInputsLoaded && this.BasketItemInputs.IsDirty) return true;
                if (this.InputChoicesLoaded && this.InputChoices.IsDirty) return true;
                if (this.ProductTemplateFieldsLoaded && this.ProductTemplateFields.IsDirty) return true;
                if (this.WishlistItemInputsLoaded && this.WishlistItemInputs.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this InputField are properly associated with this InputField object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.BasketItemInputsLoaded) { foreach (BasketItemInput basketItemInput in this.BasketItemInputs) { basketItemInput.InputFieldId = this.InputFieldId; } }
            if (this.InputChoicesLoaded) { foreach (InputChoice inputChoice in this.InputChoices) { inputChoice.InputFieldId = this.InputFieldId; } }
            if (this.ProductTemplateFieldsLoaded) { foreach (ProductTemplateField productTemplateField in this.ProductTemplateFields) { productTemplateField.InputFieldId = this.InputFieldId; } }
            if (this.WishlistItemInputsLoaded) { foreach (WishlistItemInput wishlistItemInput in this.WishlistItemInputs) { wishlistItemInput.InputFieldId = this.InputFieldId; } }
        }

#region Parents
        private ProductTemplate _ProductTemplate;

        /// <summary>
        /// The ProductTemplate object that this InputField object is associated with
        /// </summary>
        public ProductTemplate ProductTemplate
        {
            get
            {
                if (!this.ProductTemplateLoaded)
                {
                    this._ProductTemplate = ProductTemplateDataSource.Load(this.ProductTemplateId);
                }
                return this._ProductTemplate;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductTemplateLoaded { get { return ((this._ProductTemplate != null) && (this._ProductTemplate.ProductTemplateId == this.ProductTemplateId)); } }

#endregion

#region Children
        private BasketItemInputCollection _BasketItemInputs;
        private InputChoiceCollection _InputChoices;
        private ProductTemplateFieldCollection _ProductTemplateFields;
        private WishlistItemInputCollection _WishlistItemInputs;

        /// <summary>
        /// A collection of BasketItemInput objects associated with this InputField object.
        /// </summary>
        public BasketItemInputCollection BasketItemInputs
        {
            get
            {
                if (!this.BasketItemInputsLoaded)
                {
                    this._BasketItemInputs = BasketItemInputDataSource.LoadForInputField(this.InputFieldId);
                }
                return this._BasketItemInputs;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketItemInputsLoaded { get { return (this._BasketItemInputs != null); } }

        /// <summary>
        /// A collection of InputChoice objects associated with this InputField object.
        /// </summary>
        public InputChoiceCollection InputChoices
        {
            get
            {
                if (!this.InputChoicesLoaded)
                {
                    this._InputChoices = InputChoiceDataSource.LoadForInputField(this.InputFieldId);
                }
                return this._InputChoices;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool InputChoicesLoaded { get { return (this._InputChoices != null); } }

        /// <summary>
        /// A collection of ProductTemplateField objects associated with this InputField object.
        /// </summary>
        public ProductTemplateFieldCollection ProductTemplateFields
        {
            get
            {
                if (!this.ProductTemplateFieldsLoaded)
                {
                    this._ProductTemplateFields = ProductTemplateFieldDataSource.LoadForInputField(this.InputFieldId);
                }
                return this._ProductTemplateFields;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductTemplateFieldsLoaded { get { return (this._ProductTemplateFields != null); } }

        /// <summary>
        /// A collection of WishlistItemInput objects associated with this InputField object.
        /// </summary>
        public WishlistItemInputCollection WishlistItemInputs
        {
            get
            {
                if (!this.WishlistItemInputsLoaded)
                {
                    this._WishlistItemInputs = WishlistItemInputDataSource.LoadForInputField(this.InputFieldId);
                }
                return this._WishlistItemInputs;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WishlistItemInputsLoaded { get { return (this._WishlistItemInputs != null); } }

#endregion

        /// <summary>
        /// Deletes this InputField object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_InputFields");
            deleteQuery.Append(" WHERE InputFieldId = @InputFieldId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@InputFieldId", System.Data.DbType.Int32, this.InputFieldId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this InputField object from the database for the given primary key.
        /// </summary>
        /// <param name="inputFieldId">Value of InputFieldId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 inputFieldId)
        {
            bool result = false;
            this.InputFieldId = inputFieldId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_InputFields");
            selectQuery.Append(" WHERE InputFieldId = @inputFieldId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@inputFieldId", System.Data.DbType.Int32, inputFieldId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this InputField object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.InputFieldId == 0) recordExists = false;

                if (this.OrderBy < 0) this.OrderBy = InputFieldDataSource.GetNextOrderBy(this.ProductTemplateId);

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_InputFields");
                    selectQuery.Append(" WHERE InputFieldId = @InputFieldId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@InputFieldId", System.Data.DbType.Int32, this.InputFieldId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_InputFields SET ");
                    updateQuery.Append("ProductTemplateId = @ProductTemplateId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", UserPrompt = @UserPrompt");
                    updateQuery.Append(", InputTypeId = @InputTypeId");
                    updateQuery.Append(", Rows = @Rows");
                    updateQuery.Append(", Columns = @Columns");
                    updateQuery.Append(", MaxLength = @MaxLength");
                    updateQuery.Append(", IsRequired = @IsRequired");
                    updateQuery.Append(", RequiredMessage = @RequiredMessage");
                    updateQuery.Append(", IsMerchantField = @IsMerchantField");
                    updateQuery.Append(", PersistWithOrder = @PersistWithOrder");
                    updateQuery.Append(", PromptCssClass = @PromptCssClass");
                    updateQuery.Append(", ControlCssClass = @ControlCssClass");
                    updateQuery.Append(", AdditionalData = @AdditionalData");
                    updateQuery.Append(", OrderBy = @OrderBy");
                    updateQuery.Append(" WHERE InputFieldId = @InputFieldId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@InputFieldId", System.Data.DbType.Int32, this.InputFieldId);
                        database.AddInParameter(updateCommand, "@ProductTemplateId", System.Data.DbType.Int32, this.ProductTemplateId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@UserPrompt", System.Data.DbType.String, this.UserPrompt);
                        database.AddInParameter(updateCommand, "@InputTypeId", System.Data.DbType.Int16, this.InputTypeId);
                        database.AddInParameter(updateCommand, "@Rows", System.Data.DbType.Byte, this.Rows);
                        database.AddInParameter(updateCommand, "@Columns", System.Data.DbType.Byte, this.Columns);
                        database.AddInParameter(updateCommand, "@MaxLength", System.Data.DbType.Int16, this.MaxLength);
                        database.AddInParameter(updateCommand, "@IsRequired", System.Data.DbType.Boolean, this.IsRequired);
                        database.AddInParameter(updateCommand, "@RequiredMessage", System.Data.DbType.String, NullableData.DbNullify(this.RequiredMessage));
                        database.AddInParameter(updateCommand, "@IsMerchantField", System.Data.DbType.Boolean, this.IsMerchantField);
                        database.AddInParameter(updateCommand, "@PersistWithOrder", System.Data.DbType.Boolean, this.PersistWithOrder);
                        database.AddInParameter(updateCommand, "@PromptCssClass", System.Data.DbType.String, NullableData.DbNullify(this.PromptCssClass));
                        database.AddInParameter(updateCommand, "@ControlCssClass", System.Data.DbType.String, NullableData.DbNullify(this.ControlCssClass));
                        database.AddInParameter(updateCommand, "@AdditionalData", System.Data.DbType.String, NullableData.DbNullify(this.AdditionalData));
                        database.AddInParameter(updateCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_InputFields (ProductTemplateId, Name, UserPrompt, InputTypeId, Rows, Columns, MaxLength, IsRequired, RequiredMessage, IsMerchantField, PersistWithOrder, PromptCssClass, ControlCssClass, AdditionalData, OrderBy)");
                    insertQuery.Append(" VALUES (@ProductTemplateId, @Name, @UserPrompt, @InputTypeId, @Rows, @Columns, @MaxLength, @IsRequired, @RequiredMessage, @IsMerchantField, @PersistWithOrder, @PromptCssClass, @ControlCssClass, @AdditionalData, @OrderBy)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@InputFieldId", System.Data.DbType.Int32, this.InputFieldId);
                        database.AddInParameter(insertCommand, "@ProductTemplateId", System.Data.DbType.Int32, this.ProductTemplateId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@UserPrompt", System.Data.DbType.String, this.UserPrompt);
                        database.AddInParameter(insertCommand, "@InputTypeId", System.Data.DbType.Int16, this.InputTypeId);
                        database.AddInParameter(insertCommand, "@Rows", System.Data.DbType.Byte, this.Rows);
                        database.AddInParameter(insertCommand, "@Columns", System.Data.DbType.Byte, this.Columns);
                        database.AddInParameter(insertCommand, "@MaxLength", System.Data.DbType.Int16, this.MaxLength);
                        database.AddInParameter(insertCommand, "@IsRequired", System.Data.DbType.Boolean, this.IsRequired);
                        database.AddInParameter(insertCommand, "@RequiredMessage", System.Data.DbType.String, NullableData.DbNullify(this.RequiredMessage));
                        database.AddInParameter(insertCommand, "@IsMerchantField", System.Data.DbType.Boolean, this.IsMerchantField);
                        database.AddInParameter(insertCommand, "@PersistWithOrder", System.Data.DbType.Boolean, this.PersistWithOrder);
                        database.AddInParameter(insertCommand, "@PromptCssClass", System.Data.DbType.String, NullableData.DbNullify(this.PromptCssClass));
                        database.AddInParameter(insertCommand, "@ControlCssClass", System.Data.DbType.String, NullableData.DbNullify(this.ControlCssClass));
                        database.AddInParameter(insertCommand, "@AdditionalData", System.Data.DbType.String, NullableData.DbNullify(this.AdditionalData));
                        database.AddInParameter(insertCommand, "@OrderBy", System.Data.DbType.Int16, this.OrderBy);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._InputFieldId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this InputField object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.BasketItemInputsLoaded) this.BasketItemInputs.Save();
            if (this.InputChoicesLoaded) this.InputChoices.Save();
            if (this.ProductTemplateFieldsLoaded) this.ProductTemplateFields.Save();
            if (this.WishlistItemInputsLoaded) this.WishlistItemInputs.Save();
        }

     }
}
