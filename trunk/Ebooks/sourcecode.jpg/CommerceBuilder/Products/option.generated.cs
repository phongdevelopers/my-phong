//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Products;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a Option object in the database.
    /// </summary>
    public partial class Option : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Option() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="optionId">Value of OptionId.</param>
        /// </summary>
        public Option(Int32 optionId)
        {
            this.OptionId = optionId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "OptionId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "HeaderText");
          columnNames.Add(prefix + "ShowThumbnails");
          columnNames.Add(prefix + "ThumbnailColumns");
          columnNames.Add(prefix + "ThumbnailWidth");
          columnNames.Add(prefix + "ThumbnailHeight");
          columnNames.Add(prefix + "CreatedDate");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Option object from the given database data reader.
        /// </summary>
        /// <param name="option">The Option object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Option option, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            option.OptionId = dr.GetInt32(0);
            option.Name = dr.GetString(1);
            option.HeaderText = NullableData.GetString(dr, 2);
            option.ShowThumbnails = dr.GetBoolean(3);
            option.ThumbnailColumns = dr.GetByte(4);
            option.ThumbnailWidth = dr.GetInt16(5);
            option.ThumbnailHeight = dr.GetInt16(6);
            option.CreatedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(7));
            option.IsDirty = false;
        }

#endregion

        private Int32 _OptionId;
        private String _Name = string.Empty;
        private String _HeaderText = string.Empty;
        private Boolean _ShowThumbnails;
        private Byte _ThumbnailColumns;
        private Int16 _ThumbnailWidth;
        private Int16 _ThumbnailHeight;
        private DateTime _CreatedDate;
        private bool _IsDirty;

        /// <summary>
        /// OptionId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 OptionId
        {
            get { return this._OptionId; }
            set
            {
                if (this._OptionId != value)
                {
                    this._OptionId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// HeaderText
        /// </summary>
        public String HeaderText
        {
            get { return this._HeaderText; }
            set
            {
                if (this._HeaderText != value)
                {
                    this._HeaderText = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ShowThumbnails
        /// </summary>
        public Boolean ShowThumbnails
        {
            get { return this._ShowThumbnails; }
            set
            {
                if (this._ShowThumbnails != value)
                {
                    this._ShowThumbnails = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailColumns
        /// </summary>
        public Byte ThumbnailColumns
        {
            get { return this._ThumbnailColumns; }
            set
            {
                if (this._ThumbnailColumns != value)
                {
                    this._ThumbnailColumns = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailWidth
        /// </summary>
        public Int16 ThumbnailWidth
        {
            get { return this._ThumbnailWidth; }
            set
            {
                if (this._ThumbnailWidth != value)
                {
                    this._ThumbnailWidth = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailHeight
        /// </summary>
        public Int16 ThumbnailHeight
        {
            get { return this._ThumbnailHeight; }
            set
            {
                if (this._ThumbnailHeight != value)
                {
                    this._ThumbnailHeight = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CreatedDate
        /// </summary>
        public DateTime CreatedDate
        {
            get { return this._CreatedDate; }
            set
            {
                if (this._CreatedDate != value)
                {
                    this._CreatedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Option object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.ChoicesLoaded && this.Choices.IsDirty) return true;
                if (this.ProductOptionsLoaded && this.ProductOptions.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Option are properly associated with this Option object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.ChoicesLoaded) { foreach (OptionChoice optionChoice in this.Choices) { optionChoice.OptionId = this.OptionId; } }
            if (this.ProductOptionsLoaded) { foreach (ProductOption productOption in this.ProductOptions) { productOption.OptionId = this.OptionId; } }
        }

#region Children
        private OptionChoiceCollection _Choices;

        /// <summary>
        /// A collection of OptionChoice objects associated with this Option object.
        /// </summary>
        public OptionChoiceCollection Choices
        {
            get
            {
                if (!this.ChoicesLoaded)
                {
                    this._Choices = OptionChoiceDataSource.LoadForOption(this.OptionId);
                }
                return this._Choices;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ChoicesLoaded { get { return (this._Choices != null); } }

#endregion

#region Associations
        private ProductOptionCollection _ProductOptions;

        /// <summary>
        /// A collection of ProductOption objects associated with this Option object.
        /// </summary>
        public ProductOptionCollection ProductOptions
        {
            get
            {
                if (!this.ProductOptionsLoaded)
                {
                    this._ProductOptions = ProductOptionDataSource.LoadForOption(this.OptionId);
                }
                return this._ProductOptions;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductOptionsLoaded { get { return (this._ProductOptions != null); } }
#endregion

        /// <summary>
        /// Deletes this Option object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Options");
            deleteQuery.Append(" WHERE OptionId = @OptionId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@OptionId", System.Data.DbType.Int32, this.OptionId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Option object from the database for the given primary key.
        /// </summary>
        /// <param name="optionId">Value of OptionId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 optionId)
        {
            bool result = false;
            this.OptionId = optionId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Options");
            selectQuery.Append(" WHERE OptionId = @optionId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@optionId", System.Data.DbType.Int32, optionId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Option object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.OptionId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.CreatedDate == System.DateTime.MinValue) this.CreatedDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Options");
                    selectQuery.Append(" WHERE OptionId = @OptionId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@OptionId", System.Data.DbType.Int32, this.OptionId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Options SET ");
                    updateQuery.Append("Name = @Name");
                    updateQuery.Append(", HeaderText = @HeaderText");
                    updateQuery.Append(", ShowThumbnails = @ShowThumbnails");
                    updateQuery.Append(", ThumbnailColumns = @ThumbnailColumns");
                    updateQuery.Append(", ThumbnailWidth = @ThumbnailWidth");
                    updateQuery.Append(", ThumbnailHeight = @ThumbnailHeight");
                    updateQuery.Append(", CreatedDate = @CreatedDate");
                    updateQuery.Append(" WHERE OptionId = @OptionId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@OptionId", System.Data.DbType.Int32, this.OptionId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@HeaderText", System.Data.DbType.String, NullableData.DbNullify(this.HeaderText));
                        database.AddInParameter(updateCommand, "@ShowThumbnails", System.Data.DbType.Boolean, this.ShowThumbnails);
                        database.AddInParameter(updateCommand, "@ThumbnailColumns", System.Data.DbType.Byte, this.ThumbnailColumns);
                        database.AddInParameter(updateCommand, "@ThumbnailWidth", System.Data.DbType.Int16, this.ThumbnailWidth);
                        database.AddInParameter(updateCommand, "@ThumbnailHeight", System.Data.DbType.Int16, this.ThumbnailHeight);
                        database.AddInParameter(updateCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Options (Name, HeaderText, ShowThumbnails, ThumbnailColumns, ThumbnailWidth, ThumbnailHeight, CreatedDate)");
                    insertQuery.Append(" VALUES (@Name, @HeaderText, @ShowThumbnails, @ThumbnailColumns, @ThumbnailWidth, @ThumbnailHeight, @CreatedDate)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@OptionId", System.Data.DbType.Int32, this.OptionId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@HeaderText", System.Data.DbType.String, NullableData.DbNullify(this.HeaderText));
                        database.AddInParameter(insertCommand, "@ShowThumbnails", System.Data.DbType.Boolean, this.ShowThumbnails);
                        database.AddInParameter(insertCommand, "@ThumbnailColumns", System.Data.DbType.Byte, this.ThumbnailColumns);
                        database.AddInParameter(insertCommand, "@ThumbnailWidth", System.Data.DbType.Int16, this.ThumbnailWidth);
                        database.AddInParameter(insertCommand, "@ThumbnailHeight", System.Data.DbType.Int16, this.ThumbnailHeight);
                        database.AddInParameter(insertCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._OptionId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Option object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.ChoicesLoaded) this.Choices.Save();
            if (this.ProductOptionsLoaded) this.ProductOptions.Save();
        }

     }
}
