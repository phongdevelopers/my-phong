//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.DigitalDelivery;
using CommerceBuilder.Marketing;
using CommerceBuilder.Orders;
using CommerceBuilder.Products;
using CommerceBuilder.Shipping;
using CommerceBuilder.Stores;
using CommerceBuilder.Taxes;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Products
{
    /// <summary>
    /// This class represents a Product object in the database.
    /// </summary>
    public partial class Product : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Product() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="productId">Value of ProductId.</param>
        /// </summary>
        public Product(Int32 productId)
        {
            this.ProductId = productId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ProductId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "Price");
          columnNames.Add(prefix + "CostOfGoods");
          columnNames.Add(prefix + "MSRP");
          columnNames.Add(prefix + "Weight");
          columnNames.Add(prefix + "Length");
          columnNames.Add(prefix + "Width");
          columnNames.Add(prefix + "Height");
          columnNames.Add(prefix + "ManufacturerId");
          columnNames.Add(prefix + "Sku");
          columnNames.Add(prefix + "ModelNumber");
          columnNames.Add(prefix + "DisplayPage");
          columnNames.Add(prefix + "TaxCodeId");
          columnNames.Add(prefix + "ShippableId");
          columnNames.Add(prefix + "WarehouseId");
          columnNames.Add(prefix + "InventoryModeId");
          columnNames.Add(prefix + "InStock");
          columnNames.Add(prefix + "InStockWarningLevel");
          columnNames.Add(prefix + "ThumbnailUrl");
          columnNames.Add(prefix + "ThumbnailAltText");
          columnNames.Add(prefix + "ImageUrl");
          columnNames.Add(prefix + "ImageAltText");
          columnNames.Add(prefix + "Summary");
          columnNames.Add(prefix + "Description");
          columnNames.Add(prefix + "ExtendedDescription");
          columnNames.Add(prefix + "VendorId");
          columnNames.Add(prefix + "CreatedDate");
          columnNames.Add(prefix + "LastModifiedDate");
          columnNames.Add(prefix + "IsFeatured");
          columnNames.Add(prefix + "IsProhibited");
          columnNames.Add(prefix + "AllowReviews");
          columnNames.Add(prefix + "AllowBackorder");
          columnNames.Add(prefix + "WrapGroupId");
          columnNames.Add(prefix + "ExcludeFromFeed");
          columnNames.Add(prefix + "HtmlHead");
          columnNames.Add(prefix + "DisablePurchase");
          columnNames.Add(prefix + "MinQuantity");
          columnNames.Add(prefix + "MaxQuantity");
          columnNames.Add(prefix + "VisibilityId");
          columnNames.Add(prefix + "Theme");
          columnNames.Add(prefix + "IconUrl");
          columnNames.Add(prefix + "IconAltText");
          columnNames.Add(prefix + "IsGiftCertificate");
          columnNames.Add(prefix + "UseVariablePrice");
          columnNames.Add(prefix + "MinimumPrice");
          columnNames.Add(prefix + "MaximumPrice");
          columnNames.Add(prefix + "SearchKeywords");
          columnNames.Add(prefix + "HidePrice");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Product object from the given database data reader.
        /// </summary>
        /// <param name="product">The Product object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Product product, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            product.ProductId = dr.GetInt32(0);
            product.StoreId = dr.GetInt32(1);
            product.Name = dr.GetString(2);
            product.Price = dr.GetDecimal(3);
            product.CostOfGoods = dr.GetDecimal(4);
            product.MSRP = dr.GetDecimal(5);
            product.Weight = dr.GetDecimal(6);
            product.Length = dr.GetDecimal(7);
            product.Width = dr.GetDecimal(8);
            product.Height = dr.GetDecimal(9);
            product.ManufacturerId = NullableData.GetInt32(dr, 10);
            product.Sku = NullableData.GetString(dr, 11);
            product.ModelNumber = NullableData.GetString(dr, 12);
            product.DisplayPage = NullableData.GetString(dr, 13);
            product.TaxCodeId = NullableData.GetInt32(dr, 14);
            product.ShippableId = dr.GetByte(15);
            product.WarehouseId = NullableData.GetInt32(dr, 16);
            product.InventoryModeId = dr.GetByte(17);
            product.InStock = dr.GetInt32(18);
            product.InStockWarningLevel = dr.GetInt32(19);
            product.ThumbnailUrl = NullableData.GetString(dr, 20);
            product.ThumbnailAltText = NullableData.GetString(dr, 21);
            product.ImageUrl = NullableData.GetString(dr, 22);
            product.ImageAltText = NullableData.GetString(dr, 23);
            product.Summary = NullableData.GetString(dr, 24);
            product.Description = NullableData.GetString(dr, 25);
            product.ExtendedDescription = NullableData.GetString(dr, 26);
            product.VendorId = NullableData.GetInt32(dr, 27);
            product.CreatedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(28));
            product.LastModifiedDate = LocaleHelper.ToLocalTime(dr.GetDateTime(29));
            product.IsFeatured = dr.GetBoolean(30);
            product.IsProhibited = dr.GetBoolean(31);
            product.AllowReviews = dr.GetBoolean(32);
            product.AllowBackorder = dr.GetBoolean(33);
            product.WrapGroupId = NullableData.GetInt32(dr, 34);
            product.ExcludeFromFeed = dr.GetBoolean(35);
            product.HtmlHead = NullableData.GetString(dr, 36);
            product.DisablePurchase = dr.GetBoolean(37);
            product.MinQuantity = dr.GetInt16(38);
            product.MaxQuantity = dr.GetInt16(39);
            product.VisibilityId = dr.GetByte(40);
            product.Theme = NullableData.GetString(dr, 41);
            product.IconUrl = NullableData.GetString(dr, 42);
            product.IconAltText = NullableData.GetString(dr, 43);
            product.IsGiftCertificate = dr.GetBoolean(44);
            product.UseVariablePrice = dr.GetBoolean(45);
            product.MinimumPrice = NullableData.GetDecimal(dr, 46);
            product.MaximumPrice = NullableData.GetDecimal(dr, 47);
            product.SearchKeywords = NullableData.GetString(dr, 48);
            product.HidePrice = dr.GetBoolean(49);
            product.IsDirty = false;
        }

#endregion

        private Int32 _ProductId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private LSDecimal _Price;
        private LSDecimal _CostOfGoods;
        private LSDecimal _MSRP;
        private LSDecimal _Weight;
        private LSDecimal _Length;
        private LSDecimal _Width;
        private LSDecimal _Height;
        private Int32 _ManufacturerId;
        private String _Sku = string.Empty;
        private String _ModelNumber = string.Empty;
        private String _DisplayPage = string.Empty;
        private Int32 _TaxCodeId;
        private Byte _ShippableId;
        private Int32 _WarehouseId;
        private Byte _InventoryModeId;
        private Int32 _InStock;
        private Int32 _InStockWarningLevel;
        private String _ThumbnailAltText = string.Empty;
        private String _ImageAltText = string.Empty;
        private String _Summary = string.Empty;
        private String _Description = string.Empty;
        private String _ExtendedDescription = string.Empty;
        private Int32 _VendorId;
        private DateTime _CreatedDate;
        private DateTime _LastModifiedDate;
        private Boolean _IsFeatured;
        private Boolean _IsProhibited;
        private Boolean _AllowReviews;
        private Boolean _AllowBackorder;
        private Int32 _WrapGroupId;
        private Boolean _ExcludeFromFeed;
        private String _HtmlHead = string.Empty;
        private Boolean _DisablePurchase;
        private Int16 _MinQuantity;
        private Int16 _MaxQuantity;
        private Byte _VisibilityId;
        private String _Theme = string.Empty;
        private String _IconAltText = string.Empty;
        private Boolean _IsGiftCertificate;
        private Boolean _UseVariablePrice;
        private LSDecimal _MinimumPrice;
        private LSDecimal _MaximumPrice;
        private String _SearchKeywords = string.Empty;
        private Boolean _HidePrice;
        private bool _IsDirty;

        /// <summary>
        /// ProductId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 ProductId
        {
            get { return this._ProductId; }
            set
            {
                if (this._ProductId != value)
                {
                    this._ProductId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public override String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Price
        /// </summary>
        public LSDecimal Price
        {
            get { return this._Price; }
            set
            {
                if (this._Price != value)
                {
                    this._Price = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CostOfGoods
        /// </summary>
        public LSDecimal CostOfGoods
        {
            get { return this._CostOfGoods; }
            set
            {
                if (this._CostOfGoods != value)
                {
                    this._CostOfGoods = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MSRP
        /// </summary>
        public LSDecimal MSRP
        {
            get { return this._MSRP; }
            set
            {
                if (this._MSRP != value)
                {
                    this._MSRP = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Weight
        /// </summary>
        public LSDecimal Weight
        {
            get { return this._Weight; }
            set
            {
                if (this._Weight != value)
                {
                    this._Weight = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Length
        /// </summary>
        public LSDecimal Length
        {
            get { return this._Length; }
            set
            {
                if (this._Length != value)
                {
                    this._Length = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Width
        /// </summary>
        public LSDecimal Width
        {
            get { return this._Width; }
            set
            {
                if (this._Width != value)
                {
                    this._Width = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Height
        /// </summary>
        public LSDecimal Height
        {
            get { return this._Height; }
            set
            {
                if (this._Height != value)
                {
                    this._Height = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ManufacturerId
        /// </summary>
        public Int32 ManufacturerId
        {
            get { return this._ManufacturerId; }
            set
            {
                if (this._ManufacturerId != value)
                {
                    this._ManufacturerId = value;
                    this.IsDirty = true;
                    this._Manufacturer = null;
                }
            }
        }

        /// <summary>
        /// Sku
        /// </summary>
        public String Sku
        {
            get { return this._Sku; }
            set
            {
                if (this._Sku != value)
                {
                    this._Sku = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ModelNumber
        /// </summary>
        public String ModelNumber
        {
            get { return this._ModelNumber; }
            set
            {
                if (this._ModelNumber != value)
                {
                    this._ModelNumber = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DisplayPage
        /// </summary>
        public override String DisplayPage
        {
            get { return this._DisplayPage; }
            set
            {
                if (this._DisplayPage != value)
                {
                    this._DisplayPage = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// TaxCodeId
        /// </summary>
        public Int32 TaxCodeId
        {
            get { return this._TaxCodeId; }
            set
            {
                if (this._TaxCodeId != value)
                {
                    this._TaxCodeId = value;
                    this.IsDirty = true;
                    this._TaxCode = null;
                }
            }
        }

        /// <summary>
        /// ShippableId
        /// </summary>
        public Byte ShippableId
        {
            get { return this._ShippableId; }
            set
            {
                if (this._ShippableId != value)
                {
                    this._ShippableId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// WarehouseId
        /// </summary>
        public Int32 WarehouseId
        {
            get { return this._WarehouseId; }
            set
            {
                if (this._WarehouseId != value)
                {
                    this._WarehouseId = value;
                    this.IsDirty = true;
                    this._Warehouse = null;
                }
            }
        }

        /// <summary>
        /// InventoryModeId
        /// </summary>
        public Byte InventoryModeId
        {
            get { return this._InventoryModeId; }
            set
            {
                if (this._InventoryModeId != value)
                {
                    this._InventoryModeId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// InStock
        /// </summary>
        public Int32 InStock
        {
            get { return this._InStock; }
            set
            {
                if (this._InStock != value)
                {
                    this._InStock = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// InStockWarningLevel
        /// </summary>
        public Int32 InStockWarningLevel
        {
            get { return this._InStockWarningLevel; }
            set
            {
                if (this._InStockWarningLevel != value)
                {
                    this._InStockWarningLevel = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ThumbnailAltText
        /// </summary>
        public override String ThumbnailAltText
        {
            get
            {
                if (string.IsNullOrEmpty(_ThumbnailAltText)) return this.Name;
                if (_ThumbnailAltText == ".") return string.Empty;
                return _ThumbnailAltText;
            }
            set
            {
                if (this._ThumbnailAltText != value)
                {
                    this._ThumbnailAltText = value;
                    if (_ThumbnailAltText == this.Name) _ThumbnailAltText = string.Empty;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ImageAltText
        /// </summary>
        public String ImageAltText
        {
            get
            {
                if (string.IsNullOrEmpty(_ImageAltText)) return this.Name;
                if (_ImageAltText == ".") return string.Empty;
                return _ImageAltText;
            }
            set
            {
                if (this._ImageAltText != value)
                {
                    this._ImageAltText = value;
                    if (_ImageAltText == this.Name) _ImageAltText = string.Empty;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Summary
        /// </summary>
        public override String Summary
        {
            get { return this._Summary; }
            set
            {
                if (this._Summary != value)
                {
                    this._Summary = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Description
        /// </summary>
        public override String Description
        {
            get { return this._Description; }
            set
            {
                if (this._Description != value)
                {
                    this._Description = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ExtendedDescription
        /// </summary>
        public String ExtendedDescription
        {
            get { return this._ExtendedDescription; }
            set
            {
                if (this._ExtendedDescription != value)
                {
                    this._ExtendedDescription = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// VendorId
        /// </summary>
        public Int32 VendorId
        {
            get { return this._VendorId; }
            set
            {
                if (this._VendorId != value)
                {
                    this._VendorId = value;
                    this.IsDirty = true;
                    this._Vendor = null;
                }
            }
        }

        /// <summary>
        /// CreatedDate
        /// </summary>
        public DateTime CreatedDate
        {
            get { return this._CreatedDate; }
            set
            {
                if (this._CreatedDate != value)
                {
                    this._CreatedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastModifiedDate
        /// </summary>
        public DateTime LastModifiedDate
        {
            get { return this._LastModifiedDate; }
            set
            {
                if (this._LastModifiedDate != value)
                {
                    this._LastModifiedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsFeatured
        /// </summary>
        public Boolean IsFeatured
        {
            get { return this._IsFeatured; }
            set
            {
                if (this._IsFeatured != value)
                {
                    this._IsFeatured = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsProhibited
        /// </summary>
        public Boolean IsProhibited
        {
            get { return this._IsProhibited; }
            set
            {
                if (this._IsProhibited != value)
                {
                    this._IsProhibited = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// AllowReviews
        /// </summary>
        public Boolean AllowReviews
        {
            get { return this._AllowReviews; }
            set
            {
                if (this._AllowReviews != value)
                {
                    this._AllowReviews = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// AllowBackorder
        /// </summary>
        public Boolean AllowBackorder
        {
            get { return this._AllowBackorder; }
            set
            {
                if (this._AllowBackorder != value)
                {
                    this._AllowBackorder = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// WrapGroupId
        /// </summary>
        public Int32 WrapGroupId
        {
            get { return this._WrapGroupId; }
            set
            {
                if (this._WrapGroupId != value)
                {
                    this._WrapGroupId = value;
                    this.IsDirty = true;
                    this._WrapGroup = null;
                }
            }
        }

        /// <summary>
        /// ExcludeFromFeed
        /// </summary>
        public Boolean ExcludeFromFeed
        {
            get { return this._ExcludeFromFeed; }
            set
            {
                if (this._ExcludeFromFeed != value)
                {
                    this._ExcludeFromFeed = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// HtmlHead
        /// </summary>
        public override String HtmlHead
        {
            get { return this._HtmlHead; }
            set
            {
                if (this._HtmlHead != value)
                {
                    this._HtmlHead = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// DisablePurchase
        /// </summary>
        public Boolean DisablePurchase
        {
            get { return this._DisablePurchase; }
            set
            {
                if (this._DisablePurchase != value)
                {
                    this._DisablePurchase = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MinQuantity
        /// </summary>
        public Int16 MinQuantity
        {
            get { return this._MinQuantity; }
            set
            {
                if (this._MinQuantity != value)
                {
                    this._MinQuantity = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MaxQuantity
        /// </summary>
        public Int16 MaxQuantity
        {
            get { return this._MaxQuantity; }
            set
            {
                if (this._MaxQuantity != value)
                {
                    this._MaxQuantity = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// VisibilityId
        /// </summary>
        public override Byte VisibilityId
        {
            get { return this._VisibilityId; }
            set
            {
                if (this._VisibilityId != value)
                {
                    this._VisibilityId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Theme
        /// </summary>
        public override String Theme
        {
            get { return this._Theme; }
            set
            {
                if (this._Theme != value)
                {
                    this._Theme = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IconAltText
        /// </summary>
        public String IconAltText
        {
            get
            {
                if (string.IsNullOrEmpty(_IconAltText)) return this.Name;
                if (_IconAltText == ".") return string.Empty;
                return _IconAltText;
            }
            set
            {
                if (this._IconAltText != value)
                {
                    this._IconAltText = value;
                    if (_IconAltText == this.Name) _IconAltText = string.Empty;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsGiftCertificate
        /// </summary>
        public Boolean IsGiftCertificate
        {
            get { return this._IsGiftCertificate; }
            set
            {
                if (this._IsGiftCertificate != value)
                {
                    this._IsGiftCertificate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// UseVariablePrice
        /// </summary>
        public Boolean UseVariablePrice
        {
            get { return this._UseVariablePrice; }
            set
            {
                if (this._UseVariablePrice != value)
                {
                    this._UseVariablePrice = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MinimumPrice
        /// </summary>
        public LSDecimal MinimumPrice
        {
            get { return this._MinimumPrice; }
            set
            {
                if (this._MinimumPrice != value)
                {
                    this._MinimumPrice = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// MaximumPrice
        /// </summary>
        public LSDecimal MaximumPrice
        {
            get { return this._MaximumPrice; }
            set
            {
                if (this._MaximumPrice != value)
                {
                    this._MaximumPrice = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// SearchKeywords
        /// </summary>
        public String SearchKeywords
        {
            get { return this._SearchKeywords; }
            set
            {
                if (this._SearchKeywords != value)
                {
                    this._SearchKeywords = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// HidePrice
        /// </summary>
        public Boolean HidePrice
        {
            get { return this._HidePrice; }
            set
            {
                if (this._HidePrice != value)
                {
                    this._HidePrice = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Product object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.BasketItemsLoaded && this.BasketItems.IsDirty) return true;
                if (this.CouponProductsLoaded && this.CouponProducts.IsDirty) return true;
                if (this.KitLoaded && this.Kit.IsDirty) return true;
                if (this.OrderItemsLoaded && this.OrderItems.IsDirty) return true;
                if (this.AssetsLoaded && this.Assets.IsDirty) return true;
                if (this.CustomFieldsLoaded && this.CustomFields.IsDirty) return true;
                if (this.DigitalGoodsLoaded && this.DigitalGoods.IsDirty) return true;
                if (this.ImagesLoaded && this.Images.IsDirty) return true;
                if (this.ProductKitComponentsLoaded && this.ProductKitComponents.IsDirty) return true;
                if (this.ProductOptionsLoaded && this.ProductOptions.IsDirty) return true;
                if (this.ProductProductTemplatesLoaded && this.ProductProductTemplates.IsDirty) return true;
                if (this.ReviewsLoaded && this.Reviews.IsDirty) return true;
                if (this.TemplateFieldsLoaded && this.TemplateFields.IsDirty) return true;
                if (this.VariantsLoaded && this.Variants.IsDirty) return true;
                if (this.ProductVolumeDiscountsLoaded && this.ProductVolumeDiscounts.IsDirty) return true;
                if (this.SpecialsLoaded && this.Specials.IsDirty) return true;
                if (this.SubscriptionPlanLoaded && this.SubscriptionPlan.IsDirty) return true;
                if (this.UpsellProductsLoaded && this.UpsellProducts.IsDirty) return true;
                if (this.WishlistItemsLoaded && this.WishlistItems.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Product are properly associated with this Product object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.BasketItemsLoaded) { foreach (BasketItem basketItem in this.BasketItems) { basketItem.ProductId = this.ProductId; } }
            if (this.CouponProductsLoaded) { foreach (CouponProduct couponProduct in this.CouponProducts) { couponProduct.ProductId = this.ProductId; } }
            if (this.KitLoaded) { Kit.ProductId = this.ProductId; }
            if (this.OrderItemsLoaded) { foreach (OrderItem orderItem in this.OrderItems) { orderItem.ProductId = this.ProductId; } }
            if (this.AssetsLoaded) { foreach (ProductAsset productAsset in this.Assets) { productAsset.ProductId = this.ProductId; } }
            if (this.CustomFieldsLoaded) { foreach (ProductCustomField productCustomField in this.CustomFields) { productCustomField.ProductId = this.ProductId; } }
            if (this.DigitalGoodsLoaded) { foreach (ProductDigitalGood productDigitalGood in this.DigitalGoods) { productDigitalGood.ProductId = this.ProductId; } }
            if (this.ImagesLoaded) { foreach (ProductImage productImage in this.Images) { productImage.ProductId = this.ProductId; } }
            if (this.ProductKitComponentsLoaded) { foreach (ProductKitComponent productKitComponent in this.ProductKitComponents) { productKitComponent.ProductId = this.ProductId; } }
            if (this.ProductOptionsLoaded) { foreach (ProductOption productOption in this.ProductOptions) { productOption.ProductId = this.ProductId; } }
            if (this.ProductProductTemplatesLoaded) { foreach (ProductProductTemplate productProductTemplate in this.ProductProductTemplates) { productProductTemplate.ProductId = this.ProductId; } }
            if (this.ReviewsLoaded) { foreach (ProductReview productReview in this.Reviews) { productReview.ProductId = this.ProductId; } }
            if (this.TemplateFieldsLoaded) { foreach (ProductTemplateField productTemplateField in this.TemplateFields) { productTemplateField.ProductId = this.ProductId; } }
            if (this.VariantsLoaded) { foreach (ProductVariant productVariant in this.Variants) { productVariant.ProductId = this.ProductId; } }
            if (this.ProductVolumeDiscountsLoaded) { foreach (ProductVolumeDiscount productVolumeDiscount in this.ProductVolumeDiscounts) { productVolumeDiscount.ProductId = this.ProductId; } }
            if (this.SpecialsLoaded) { foreach (Special special in this.Specials) { special.ProductId = this.ProductId; } }
            if (this.SubscriptionPlanLoaded) { SubscriptionPlan.ProductId = this.ProductId; }
            if (this.UpsellProductsLoaded) { foreach (UpsellProduct upsellProduct in this.UpsellProducts) { upsellProduct.ProductId = this.ProductId; } }
            if (this.WishlistItemsLoaded) { foreach (WishlistItem wishlistItem in this.WishlistItems) { wishlistItem.ProductId = this.ProductId; } }
        }

#region Parents
        private Manufacturer _Manufacturer;
        private Store _Store;
        private TaxCode _TaxCode;
        private Vendor _Vendor;
        private Warehouse _Warehouse;
        private WrapGroup _WrapGroup;

        /// <summary>
        /// The Manufacturer object that this Product object is associated with
        /// </summary>
        public Manufacturer Manufacturer
        {
            get
            {
                if (!this.ManufacturerLoaded)
                {
                    this._Manufacturer = ManufacturerDataSource.Load(this.ManufacturerId);
                }
                return this._Manufacturer;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ManufacturerLoaded { get { return ((this._Manufacturer != null) && (this._Manufacturer.ManufacturerId == this.ManufacturerId)); } }

        /// <summary>
        /// The Store object that this Product object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

        /// <summary>
        /// The TaxCode object that this Product object is associated with
        /// </summary>
        public TaxCode TaxCode
        {
            get
            {
                if (!this.TaxCodeLoaded)
                {
                    this._TaxCode = TaxCodeDataSource.Load(this.TaxCodeId);
                }
                return this._TaxCode;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxCodeLoaded { get { return ((this._TaxCode != null) && (this._TaxCode.TaxCodeId == this.TaxCodeId)); } }

        /// <summary>
        /// The Vendor object that this Product object is associated with
        /// </summary>
        public Vendor Vendor
        {
            get
            {
                if (!this.VendorLoaded)
                {
                    this._Vendor = VendorDataSource.Load(this.VendorId);
                }
                return this._Vendor;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool VendorLoaded { get { return ((this._Vendor != null) && (this._Vendor.VendorId == this.VendorId)); } }

        /// <summary>
        /// The Warehouse object that this Product object is associated with
        /// </summary>
        public Warehouse Warehouse
        {
            get
            {
                if (!this.WarehouseLoaded)
                {
                    this._Warehouse = WarehouseDataSource.Load(this.WarehouseId);
                }
                return this._Warehouse;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WarehouseLoaded { get { return ((this._Warehouse != null) && (this._Warehouse.WarehouseId == this.WarehouseId)); } }

        /// <summary>
        /// The WrapGroup object that this Product object is associated with
        /// </summary>
        public WrapGroup WrapGroup
        {
            get
            {
                if (!this.WrapGroupLoaded)
                {
                    this._WrapGroup = WrapGroupDataSource.Load(this.WrapGroupId);
                }
                return this._WrapGroup;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WrapGroupLoaded { get { return ((this._WrapGroup != null) && (this._WrapGroup.WrapGroupId == this.WrapGroupId)); } }

#endregion

#region Children
        private BasketItemCollection _BasketItems;
        private Kit _Kit;
        private OrderItemCollection _OrderItems;
        private ProductAssetCollection _Assets;
        private ProductCustomFieldCollection _CustomFields;
        private ProductDigitalGoodCollection _DigitalGoods;
        private ProductImageCollection _Images;
        private ProductReviewCollection _Reviews;
        private ProductTemplateFieldCollection _TemplateFields;
        private ProductVariantCollection _Variants;
        private SpecialCollection _Specials;
        private SubscriptionPlan _SubscriptionPlan;
        private UpsellProductCollection _UpsellProducts;
        private WishlistItemCollection _WishlistItems;

        /// <summary>
        /// A collection of BasketItem objects associated with this Product object.
        /// </summary>
        public BasketItemCollection BasketItems
        {
            get
            {
                if (!this.BasketItemsLoaded)
                {
                    this._BasketItems = BasketItemDataSource.LoadForProduct(this.ProductId);
                }
                return this._BasketItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketItemsLoaded { get { return (this._BasketItems != null); } }

        /// <summary>
        /// The Kit object associated with this Product
        /// </summary>
        public Kit Kit
        {
            get
            {
                if (!this.KitLoaded)
                {
                    this._Kit = KitDataSource.Load(this.ProductId);
                }
                return this._Kit;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool KitLoaded { get { return (this._Kit != null); } }

        /// <summary>
        /// A collection of OrderItem objects associated with this Product object.
        /// </summary>
        public OrderItemCollection OrderItems
        {
            get
            {
                if (!this.OrderItemsLoaded)
                {
                    this._OrderItems = OrderItemDataSource.LoadForProduct(this.ProductId);
                }
                return this._OrderItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemsLoaded { get { return (this._OrderItems != null); } }

        /// <summary>
        /// A collection of ProductAsset objects associated with this Product object.
        /// </summary>
        public ProductAssetCollection Assets
        {
            get
            {
                if (!this.AssetsLoaded)
                {
                    this._Assets = ProductAssetDataSource.LoadForProduct(this.ProductId);
                }
                return this._Assets;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AssetsLoaded { get { return (this._Assets != null); } }

        /// <summary>
        /// A collection of ProductCustomField objects associated with this Product object.
        /// </summary>
        public ProductCustomFieldCollection CustomFields
        {
            get
            {
                if (!this.CustomFieldsLoaded)
                {
                    this._CustomFields = ProductCustomFieldDataSource.LoadForProduct(this.ProductId);
                }
                return this._CustomFields;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CustomFieldsLoaded { get { return (this._CustomFields != null); } }

        /// <summary>
        /// A collection of ProductDigitalGood objects associated with this Product object.
        /// </summary>
        public ProductDigitalGoodCollection DigitalGoods
        {
            get
            {
                if (!this.DigitalGoodsLoaded)
                {
                    this._DigitalGoods = ProductDigitalGoodDataSource.LoadForProduct(this.ProductId);
                }
                return this._DigitalGoods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool DigitalGoodsLoaded { get { return (this._DigitalGoods != null); } }

        /// <summary>
        /// A collection of ProductImage objects associated with this Product object.
        /// </summary>
        public ProductImageCollection Images
        {
            get
            {
                if (!this.ImagesLoaded)
                {
                    this._Images = ProductImageDataSource.LoadForProduct(this.ProductId);
                }
                return this._Images;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ImagesLoaded { get { return (this._Images != null); } }

        /// <summary>
        /// A collection of ProductReview objects associated with this Product object.
        /// </summary>
        public ProductReviewCollection Reviews
        {
            get
            {
                if (!this.ReviewsLoaded)
                {
                    this._Reviews = ProductReviewDataSource.LoadForProduct(this.ProductId);
                }
                return this._Reviews;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ReviewsLoaded { get { return (this._Reviews != null); } }

        /// <summary>
        /// A collection of ProductTemplateField objects associated with this Product object.
        /// </summary>
        public ProductTemplateFieldCollection TemplateFields
        {
            get
            {
                if (!this.TemplateFieldsLoaded)
                {
                    this._TemplateFields = ProductTemplateFieldDataSource.LoadForProduct(this.ProductId);
                }
                return this._TemplateFields;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TemplateFieldsLoaded { get { return (this._TemplateFields != null); } }

        /// <summary>
        /// A collection of ProductVariant objects associated with this Product object.
        /// </summary>
        public ProductVariantCollection Variants
        {
            get
            {
                if (!this.VariantsLoaded)
                {
                    this._Variants = ProductVariantDataSource.LoadForProduct(this.ProductId);
                }
                return this._Variants;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool VariantsLoaded { get { return (this._Variants != null); } }

        /// <summary>
        /// A collection of Special objects associated with this Product object.
        /// </summary>
        public SpecialCollection Specials
        {
            get
            {
                if (!this.SpecialsLoaded)
                {
                    this._Specials = SpecialDataSource.LoadForProduct(this.ProductId);
                }
                return this._Specials;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SpecialsLoaded { get { return (this._Specials != null); } }

        /// <summary>
        /// The SubscriptionPlan object associated with this Product
        /// </summary>
        public SubscriptionPlan SubscriptionPlan
        {
            get
            {
                if (!this.SubscriptionPlanLoaded)
                {
                    this._SubscriptionPlan = SubscriptionPlanDataSource.Load(this.ProductId);
                }
                return this._SubscriptionPlan;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SubscriptionPlanLoaded { get { return (this._SubscriptionPlan != null); } }

        /// <summary>
        /// A collection of UpsellProduct objects associated with this Product object.
        /// </summary>
        public UpsellProductCollection UpsellProducts
        {
            get
            {
                if (!this.UpsellProductsLoaded)
                {
                    this._UpsellProducts = UpsellProductDataSource.LoadForProduct(this.ProductId);
                }
                return this._UpsellProducts;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UpsellProductsLoaded { get { return (this._UpsellProducts != null); } }

        /// <summary>
        /// A collection of WishlistItem objects associated with this Product object.
        /// </summary>
        public WishlistItemCollection WishlistItems
        {
            get
            {
                if (!this.WishlistItemsLoaded)
                {
                    this._WishlistItems = WishlistItemDataSource.LoadForProduct(this.ProductId);
                }
                return this._WishlistItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WishlistItemsLoaded { get { return (this._WishlistItems != null); } }

#endregion

#region Associations
        private CouponProductCollection _CouponProducts;
        private ProductKitComponentCollection _ProductKitComponents;
        private ProductOptionCollection _ProductOptions;
        private ProductProductTemplateCollection _ProductProductTemplates;
        private ProductVolumeDiscountCollection _ProductVolumeDiscounts;

        /// <summary>
        /// A collection of CouponProduct objects associated with this Product object.
        /// </summary>
        public CouponProductCollection CouponProducts
        {
            get
            {
                if (!this.CouponProductsLoaded)
                {
                    this._CouponProducts = CouponProductDataSource.LoadForProduct(this.ProductId);
                }
                return this._CouponProducts;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CouponProductsLoaded { get { return (this._CouponProducts != null); } }
        /// <summary>
        /// A collection of ProductKitComponent objects associated with this Product object.
        /// </summary>
        public ProductKitComponentCollection ProductKitComponents
        {
            get
            {
                if (!this.ProductKitComponentsLoaded)
                {
                    this._ProductKitComponents = ProductKitComponentDataSource.LoadForProduct(this.ProductId);
                }
                return this._ProductKitComponents;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductKitComponentsLoaded { get { return (this._ProductKitComponents != null); } }
        /// <summary>
        /// A collection of ProductOption objects associated with this Product object.
        /// </summary>
        public ProductOptionCollection ProductOptions
        {
            get
            {
                if (!this.ProductOptionsLoaded)
                {
                    this._ProductOptions = ProductOptionDataSource.LoadForProduct(this.ProductId);
                }
                return this._ProductOptions;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductOptionsLoaded { get { return (this._ProductOptions != null); } }
        /// <summary>
        /// A collection of ProductProductTemplate objects associated with this Product object.
        /// </summary>
        public ProductProductTemplateCollection ProductProductTemplates
        {
            get
            {
                if (!this.ProductProductTemplatesLoaded)
                {
                    this._ProductProductTemplates = ProductProductTemplateDataSource.LoadForProduct(this.ProductId);
                }
                return this._ProductProductTemplates;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductProductTemplatesLoaded { get { return (this._ProductProductTemplates != null); } }
        /// <summary>
        /// A collection of ProductVolumeDiscount objects associated with this Product object.
        /// </summary>
        public ProductVolumeDiscountCollection ProductVolumeDiscounts
        {
            get
            {
                if (!this.ProductVolumeDiscountsLoaded)
                {
                    this._ProductVolumeDiscounts = ProductVolumeDiscountDataSource.LoadForProduct(this.ProductId);
                }
                return this._ProductVolumeDiscounts;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductVolumeDiscountsLoaded { get { return (this._ProductVolumeDiscounts != null); } }
#endregion

        /// <summary>
        /// Deletes this Product object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Products");
            deleteQuery.Append(" WHERE ProductId = @ProductId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Product object from the database for the given primary key.
        /// </summary>
        /// <param name="productId">Value of ProductId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 productId)
        {
            bool result = false;
            this.ProductId = productId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Products");
            selectQuery.Append(" WHERE ProductId = @productId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@productId", System.Data.DbType.Int32, productId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Product object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.ProductId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.CreatedDate == System.DateTime.MinValue) this.CreatedDate = LocaleHelper.LocalNow;
                if (this.LastModifiedDate == System.DateTime.MinValue) this.LastModifiedDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Products");
                    selectQuery.Append(" WHERE ProductId = @ProductId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Products SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", Price = @Price");
                    updateQuery.Append(", CostOfGoods = @CostOfGoods");
                    updateQuery.Append(", MSRP = @MSRP");
                    updateQuery.Append(", Weight = @Weight");
                    updateQuery.Append(", Length = @Length");
                    updateQuery.Append(", Width = @Width");
                    updateQuery.Append(", Height = @Height");
                    updateQuery.Append(", ManufacturerId = @ManufacturerId");
                    updateQuery.Append(", Sku = @Sku");
                    updateQuery.Append(", ModelNumber = @ModelNumber");
                    updateQuery.Append(", DisplayPage = @DisplayPage");
                    updateQuery.Append(", TaxCodeId = @TaxCodeId");
                    updateQuery.Append(", ShippableId = @ShippableId");
                    updateQuery.Append(", WarehouseId = @WarehouseId");
                    updateQuery.Append(", InventoryModeId = @InventoryModeId");
                    updateQuery.Append(", InStock = @InStock");
                    updateQuery.Append(", InStockWarningLevel = @InStockWarningLevel");
                    updateQuery.Append(", ThumbnailUrl = @ThumbnailUrl");
                    updateQuery.Append(", ThumbnailAltText = @ThumbnailAltText");
                    updateQuery.Append(", ImageUrl = @ImageUrl");
                    updateQuery.Append(", ImageAltText = @ImageAltText");
                    updateQuery.Append(", Summary = @Summary");
                    updateQuery.Append(", Description = @Description");
                    updateQuery.Append(", ExtendedDescription = @ExtendedDescription");
                    updateQuery.Append(", VendorId = @VendorId");
                    updateQuery.Append(", CreatedDate = @CreatedDate");
                    updateQuery.Append(", LastModifiedDate = @LastModifiedDate");
                    updateQuery.Append(", IsFeatured = @IsFeatured");
                    updateQuery.Append(", IsProhibited = @IsProhibited");
                    updateQuery.Append(", AllowReviews = @AllowReviews");
                    updateQuery.Append(", AllowBackorder = @AllowBackorder");
                    updateQuery.Append(", WrapGroupId = @WrapGroupId");
                    updateQuery.Append(", ExcludeFromFeed = @ExcludeFromFeed");
                    updateQuery.Append(", HtmlHead = @HtmlHead");
                    updateQuery.Append(", DisablePurchase = @DisablePurchase");
                    updateQuery.Append(", MinQuantity = @MinQuantity");
                    updateQuery.Append(", MaxQuantity = @MaxQuantity");
                    updateQuery.Append(", VisibilityId = @VisibilityId");
                    updateQuery.Append(", Theme = @Theme");
                    updateQuery.Append(", IconUrl = @IconUrl");
                    updateQuery.Append(", IconAltText = @IconAltText");
                    updateQuery.Append(", IsGiftCertificate = @IsGiftCertificate");
                    updateQuery.Append(", UseVariablePrice = @UseVariablePrice");
                    updateQuery.Append(", MinimumPrice = @MinimumPrice");
                    updateQuery.Append(", MaximumPrice = @MaximumPrice");
                    updateQuery.Append(", SearchKeywords = @SearchKeywords");
                    updateQuery.Append(", HidePrice = @HidePrice");
                    updateQuery.Append(" WHERE ProductId = @ProductId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(updateCommand, "@CostOfGoods", System.Data.DbType.Decimal, this.CostOfGoods);
                        database.AddInParameter(updateCommand, "@MSRP", System.Data.DbType.Decimal, this.MSRP);
                        database.AddInParameter(updateCommand, "@Weight", System.Data.DbType.Decimal, this.Weight);
                        database.AddInParameter(updateCommand, "@Length", System.Data.DbType.Decimal, this.Length);
                        database.AddInParameter(updateCommand, "@Width", System.Data.DbType.Decimal, this.Width);
                        database.AddInParameter(updateCommand, "@Height", System.Data.DbType.Decimal, this.Height);
                        database.AddInParameter(updateCommand, "@ManufacturerId", System.Data.DbType.Int32, NullableData.DbNullify(this.ManufacturerId));
                        database.AddInParameter(updateCommand, "@Sku", System.Data.DbType.String, NullableData.DbNullify(this.Sku));
                        database.AddInParameter(updateCommand, "@ModelNumber", System.Data.DbType.String, NullableData.DbNullify(this.ModelNumber));
                        database.AddInParameter(updateCommand, "@DisplayPage", System.Data.DbType.String, NullableData.DbNullify(this.DisplayPage));
                        database.AddInParameter(updateCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(updateCommand, "@ShippableId", System.Data.DbType.Byte, this.ShippableId);
                        database.AddInParameter(updateCommand, "@WarehouseId", System.Data.DbType.Int32, NullableData.DbNullify(this.WarehouseId));
                        database.AddInParameter(updateCommand, "@InventoryModeId", System.Data.DbType.Byte, this.InventoryModeId);
                        database.AddInParameter(updateCommand, "@InStock", System.Data.DbType.Int32, this.InStock);
                        database.AddInParameter(updateCommand, "@InStockWarningLevel", System.Data.DbType.Int32, this.InStockWarningLevel);
                        database.AddInParameter(updateCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(updateCommand, "@ThumbnailAltText", System.Data.DbType.String, NullableData.DbNullify(_ThumbnailAltText));
                        database.AddInParameter(updateCommand, "@ImageUrl", System.Data.DbType.String, NullableData.DbNullify(this.ImageUrl));
                        database.AddInParameter(updateCommand, "@ImageAltText", System.Data.DbType.String, NullableData.DbNullify(_ImageAltText));
                        database.AddInParameter(updateCommand, "@Summary", System.Data.DbType.String, NullableData.DbNullify(this.Summary));
                        database.AddInParameter(updateCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        database.AddInParameter(updateCommand, "@ExtendedDescription", System.Data.DbType.String, NullableData.DbNullify(this.ExtendedDescription));
                        database.AddInParameter(updateCommand, "@VendorId", System.Data.DbType.Int32, NullableData.DbNullify(this.VendorId));
                        database.AddInParameter(updateCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        database.AddInParameter(updateCommand, "@LastModifiedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.LastModifiedDate));
                        database.AddInParameter(updateCommand, "@IsFeatured", System.Data.DbType.Boolean, this.IsFeatured);
                        database.AddInParameter(updateCommand, "@IsProhibited", System.Data.DbType.Boolean, this.IsProhibited);
                        database.AddInParameter(updateCommand, "@AllowReviews", System.Data.DbType.Boolean, this.AllowReviews);
                        database.AddInParameter(updateCommand, "@AllowBackorder", System.Data.DbType.Boolean, this.AllowBackorder);
                        database.AddInParameter(updateCommand, "@WrapGroupId", System.Data.DbType.Int32, NullableData.DbNullify(this.WrapGroupId));
                        database.AddInParameter(updateCommand, "@ExcludeFromFeed", System.Data.DbType.Boolean, this.ExcludeFromFeed);
                        database.AddInParameter(updateCommand, "@HtmlHead", System.Data.DbType.String, NullableData.DbNullify(this.HtmlHead));
                        database.AddInParameter(updateCommand, "@DisablePurchase", System.Data.DbType.Boolean, this.DisablePurchase);
                        database.AddInParameter(updateCommand, "@MinQuantity", System.Data.DbType.Int16, this.MinQuantity);
                        database.AddInParameter(updateCommand, "@MaxQuantity", System.Data.DbType.Int16, this.MaxQuantity);
                        database.AddInParameter(updateCommand, "@VisibilityId", System.Data.DbType.Byte, this.VisibilityId);
                        database.AddInParameter(updateCommand, "@Theme", System.Data.DbType.String, NullableData.DbNullify(this.Theme));
                        database.AddInParameter(updateCommand, "@IconUrl", System.Data.DbType.String, NullableData.DbNullify(this.IconUrl));
                        database.AddInParameter(updateCommand, "@IconAltText", System.Data.DbType.String, NullableData.DbNullify(_IconAltText));
                        database.AddInParameter(updateCommand, "@IsGiftCertificate", System.Data.DbType.Boolean, this.IsGiftCertificate);
                        database.AddInParameter(updateCommand, "@UseVariablePrice", System.Data.DbType.Boolean, this.UseVariablePrice);
                        database.AddInParameter(updateCommand, "@MinimumPrice", System.Data.DbType.Decimal, NullableData.DbNullify(this.MinimumPrice));
                        database.AddInParameter(updateCommand, "@MaximumPrice", System.Data.DbType.Decimal, NullableData.DbNullify(this.MaximumPrice));
                        database.AddInParameter(updateCommand, "@SearchKeywords", System.Data.DbType.String, NullableData.DbNullify(this.SearchKeywords));
                        database.AddInParameter(updateCommand, "@HidePrice", System.Data.DbType.Boolean, this.HidePrice);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Products (StoreId, Name, Price, CostOfGoods, MSRP, Weight, Length, Width, Height, ManufacturerId, Sku, ModelNumber, DisplayPage, TaxCodeId, ShippableId, WarehouseId, InventoryModeId, InStock, InStockWarningLevel, ThumbnailUrl, ThumbnailAltText, ImageUrl, ImageAltText, Summary, Description, ExtendedDescription, VendorId, CreatedDate, LastModifiedDate, IsFeatured, IsProhibited, AllowReviews, AllowBackorder, WrapGroupId, ExcludeFromFeed, HtmlHead, DisablePurchase, MinQuantity, MaxQuantity, VisibilityId, Theme, IconUrl, IconAltText, IsGiftCertificate, UseVariablePrice, MinimumPrice, MaximumPrice, SearchKeywords, HidePrice)");
                    insertQuery.Append(" VALUES (@StoreId, @Name, @Price, @CostOfGoods, @MSRP, @Weight, @Length, @Width, @Height, @ManufacturerId, @Sku, @ModelNumber, @DisplayPage, @TaxCodeId, @ShippableId, @WarehouseId, @InventoryModeId, @InStock, @InStockWarningLevel, @ThumbnailUrl, @ThumbnailAltText, @ImageUrl, @ImageAltText, @Summary, @Description, @ExtendedDescription, @VendorId, @CreatedDate, @LastModifiedDate, @IsFeatured, @IsProhibited, @AllowReviews, @AllowBackorder, @WrapGroupId, @ExcludeFromFeed, @HtmlHead, @DisablePurchase, @MinQuantity, @MaxQuantity, @VisibilityId, @Theme, @IconUrl, @IconAltText, @IsGiftCertificate, @UseVariablePrice, @MinimumPrice, @MaximumPrice, @SearchKeywords, @HidePrice)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ProductId", System.Data.DbType.Int32, this.ProductId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@Price", System.Data.DbType.Decimal, this.Price);
                        database.AddInParameter(insertCommand, "@CostOfGoods", System.Data.DbType.Decimal, this.CostOfGoods);
                        database.AddInParameter(insertCommand, "@MSRP", System.Data.DbType.Decimal, this.MSRP);
                        database.AddInParameter(insertCommand, "@Weight", System.Data.DbType.Decimal, this.Weight);
                        database.AddInParameter(insertCommand, "@Length", System.Data.DbType.Decimal, this.Length);
                        database.AddInParameter(insertCommand, "@Width", System.Data.DbType.Decimal, this.Width);
                        database.AddInParameter(insertCommand, "@Height", System.Data.DbType.Decimal, this.Height);
                        database.AddInParameter(insertCommand, "@ManufacturerId", System.Data.DbType.Int32, NullableData.DbNullify(this.ManufacturerId));
                        database.AddInParameter(insertCommand, "@Sku", System.Data.DbType.String, NullableData.DbNullify(this.Sku));
                        database.AddInParameter(insertCommand, "@ModelNumber", System.Data.DbType.String, NullableData.DbNullify(this.ModelNumber));
                        database.AddInParameter(insertCommand, "@DisplayPage", System.Data.DbType.String, NullableData.DbNullify(this.DisplayPage));
                        database.AddInParameter(insertCommand, "@TaxCodeId", System.Data.DbType.Int32, NullableData.DbNullify(this.TaxCodeId));
                        database.AddInParameter(insertCommand, "@ShippableId", System.Data.DbType.Byte, this.ShippableId);
                        database.AddInParameter(insertCommand, "@WarehouseId", System.Data.DbType.Int32, NullableData.DbNullify(this.WarehouseId));
                        database.AddInParameter(insertCommand, "@InventoryModeId", System.Data.DbType.Byte, this.InventoryModeId);
                        database.AddInParameter(insertCommand, "@InStock", System.Data.DbType.Int32, this.InStock);
                        database.AddInParameter(insertCommand, "@InStockWarningLevel", System.Data.DbType.Int32, this.InStockWarningLevel);
                        database.AddInParameter(insertCommand, "@ThumbnailUrl", System.Data.DbType.String, NullableData.DbNullify(this.ThumbnailUrl));
                        database.AddInParameter(insertCommand, "@ThumbnailAltText", System.Data.DbType.String, NullableData.DbNullify(_ThumbnailAltText));
                        database.AddInParameter(insertCommand, "@ImageUrl", System.Data.DbType.String, NullableData.DbNullify(this.ImageUrl));
                        database.AddInParameter(insertCommand, "@ImageAltText", System.Data.DbType.String, NullableData.DbNullify(_ImageAltText));
                        database.AddInParameter(insertCommand, "@Summary", System.Data.DbType.String, NullableData.DbNullify(this.Summary));
                        database.AddInParameter(insertCommand, "@Description", System.Data.DbType.String, NullableData.DbNullify(this.Description));
                        database.AddInParameter(insertCommand, "@ExtendedDescription", System.Data.DbType.String, NullableData.DbNullify(this.ExtendedDescription));
                        database.AddInParameter(insertCommand, "@VendorId", System.Data.DbType.Int32, NullableData.DbNullify(this.VendorId));
                        database.AddInParameter(insertCommand, "@CreatedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreatedDate));
                        database.AddInParameter(insertCommand, "@LastModifiedDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.LastModifiedDate));
                        database.AddInParameter(insertCommand, "@IsFeatured", System.Data.DbType.Boolean, this.IsFeatured);
                        database.AddInParameter(insertCommand, "@IsProhibited", System.Data.DbType.Boolean, this.IsProhibited);
                        database.AddInParameter(insertCommand, "@AllowReviews", System.Data.DbType.Boolean, this.AllowReviews);
                        database.AddInParameter(insertCommand, "@AllowBackorder", System.Data.DbType.Boolean, this.AllowBackorder);
                        database.AddInParameter(insertCommand, "@WrapGroupId", System.Data.DbType.Int32, NullableData.DbNullify(this.WrapGroupId));
                        database.AddInParameter(insertCommand, "@ExcludeFromFeed", System.Data.DbType.Boolean, this.ExcludeFromFeed);
                        database.AddInParameter(insertCommand, "@HtmlHead", System.Data.DbType.String, NullableData.DbNullify(this.HtmlHead));
                        database.AddInParameter(insertCommand, "@DisablePurchase", System.Data.DbType.Boolean, this.DisablePurchase);
                        database.AddInParameter(insertCommand, "@MinQuantity", System.Data.DbType.Int16, this.MinQuantity);
                        database.AddInParameter(insertCommand, "@MaxQuantity", System.Data.DbType.Int16, this.MaxQuantity);
                        database.AddInParameter(insertCommand, "@VisibilityId", System.Data.DbType.Byte, this.VisibilityId);
                        database.AddInParameter(insertCommand, "@Theme", System.Data.DbType.String, NullableData.DbNullify(this.Theme));
                        database.AddInParameter(insertCommand, "@IconUrl", System.Data.DbType.String, NullableData.DbNullify(this.IconUrl));
                        database.AddInParameter(insertCommand, "@IconAltText", System.Data.DbType.String, NullableData.DbNullify(_IconAltText));
                        database.AddInParameter(insertCommand, "@IsGiftCertificate", System.Data.DbType.Boolean, this.IsGiftCertificate);
                        database.AddInParameter(insertCommand, "@UseVariablePrice", System.Data.DbType.Boolean, this.UseVariablePrice);
                        database.AddInParameter(insertCommand, "@MinimumPrice", System.Data.DbType.Decimal, NullableData.DbNullify(this.MinimumPrice));
                        database.AddInParameter(insertCommand, "@MaximumPrice", System.Data.DbType.Decimal, NullableData.DbNullify(this.MaximumPrice));
                        database.AddInParameter(insertCommand, "@SearchKeywords", System.Data.DbType.String, NullableData.DbNullify(this.SearchKeywords));
                        database.AddInParameter(insertCommand, "@HidePrice", System.Data.DbType.Boolean, this.HidePrice);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._ProductId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Product object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.BasketItemsLoaded) this.BasketItems.Save();
            if (this.CouponProductsLoaded) this.CouponProducts.Save();
            if (this.KitLoaded) this.Kit.Save();
            if (this.OrderItemsLoaded) this.OrderItems.Save();
            if (this.AssetsLoaded) this.Assets.Save();
            if (this.CustomFieldsLoaded) this.CustomFields.Save();
            if (this.DigitalGoodsLoaded) this.DigitalGoods.Save();
            if (this.ImagesLoaded) this.Images.Save();
            if (this.ProductKitComponentsLoaded) this.ProductKitComponents.Save();
            if (this.ProductOptionsLoaded) this.ProductOptions.Save();
            if (this.ProductProductTemplatesLoaded) this.ProductProductTemplates.Save();
            if (this.ReviewsLoaded) this.Reviews.Save();
            if (this.TemplateFieldsLoaded) this.TemplateFields.Save();
            if (this.VariantsLoaded) this.Variants.Save();
            if (this.ProductVolumeDiscountsLoaded) this.ProductVolumeDiscounts.Save();
            if (this.SpecialsLoaded) this.Specials.Save();
            if (this.SubscriptionPlanLoaded) this.SubscriptionPlan.Save();
            if (this.UpsellProductsLoaded) this.UpsellProducts.Save();
            if (this.WishlistItemsLoaded) this.WishlistItems.Save();
        }

     }
}
