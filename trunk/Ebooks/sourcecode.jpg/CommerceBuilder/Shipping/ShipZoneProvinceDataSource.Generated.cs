//Generated by DataSourceBaseGenerator_Assn

using System;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
namespace CommerceBuilder.Shipping
{

    /// <summary>
    /// DataSource class for ShipZoneProvince objects
    /// </summary>
    public partial class ShipZoneProvinceDataSource
    {
        /// <summary>
        /// Deletes a ShipZoneProvince object from the database
        /// </summary>
        /// <param name="shipZoneProvince">The ShipZoneProvince object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(ShipZoneProvince shipZoneProvince)
        {
            return shipZoneProvince.Delete();
        }

        /// <summary>
        /// Deletes a ShipZoneProvince object with given id from the database
        /// </summary>
        /// <param name="shipZoneId">Value of ShipZoneId of the object to delete.</param>
        /// <param name="provinceId">Value of ProvinceId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 shipZoneId, Int32 provinceId)
        {
            ShipZoneProvince shipZoneProvince = new ShipZoneProvince();
            if (shipZoneProvince.Load(shipZoneId, provinceId)) return shipZoneProvince.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a ShipZoneProvince object to the database.
        /// </summary>
        /// <param name="shipZoneProvince">The ShipZoneProvince object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(ShipZoneProvince shipZoneProvince) { return shipZoneProvince.Save(); }

        /// <summary>
        /// Load a ShipZoneProvince object for the given primary key from the database.
        /// </summary>
        /// <param name="shipZoneId">Value of ShipZoneId of the object to load.</param>
        /// <param name="provinceId">Value of ProvinceId of the object to load.</param>
        /// <returns>The loaded ShipZoneProvince object.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipZoneProvince Load(Int32 shipZoneId, Int32 provinceId)
        {
            ShipZoneProvince shipZoneProvince = new ShipZoneProvince();
            shipZoneProvince.ShipZoneId = shipZoneId;
            shipZoneProvince.ProvinceId = provinceId;
            shipZoneProvince.IsDirty = false;
            return shipZoneProvince;
        }

        /// <summary>
        /// Loads a collection of ShipZoneProvince objects for the given criteria for Province from the database.
        /// </summary>
        /// <param name="provinceId">Value of ProvinceId of the object to load.</param>
        /// <returns>A collection of ShipZoneProvince objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipZoneProvinceCollection LoadForProvince(Int32 provinceId)
        {
            ShipZoneProvinceCollection ShipZoneProvinces = new ShipZoneProvinceCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT ShipZoneId");
            selectQuery.Append(" FROM ac_ShipZoneProvinces");
            selectQuery.Append(" WHERE ProvinceId = @provinceId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@provinceId", System.Data.DbType.Int32, provinceId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    ShipZoneProvince shipZoneProvince = new ShipZoneProvince();
                    shipZoneProvince.ProvinceId = provinceId;
                    shipZoneProvince.ShipZoneId = dr.GetInt32(0);
                    ShipZoneProvinces.Add(shipZoneProvince);
                }
                dr.Close();
            }
            return ShipZoneProvinces;
        }

        /// <summary>
        /// Loads a collection of ShipZoneProvince objects for the given criteria for ShipZone from the database.
        /// </summary>
        /// <param name="shipZoneId">Value of ShipZoneId of the object to load.</param>
        /// <returns>A collection of ShipZoneProvince objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static ShipZoneProvinceCollection LoadForShipZone(Int32 shipZoneId)
        {
            ShipZoneProvinceCollection ShipZoneProvinces = new ShipZoneProvinceCollection();
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT ProvinceId");
            selectQuery.Append(" FROM ac_ShipZoneProvinces");
            selectQuery.Append(" WHERE ShipZoneId = @shipZoneId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipZoneId", System.Data.DbType.Int32, shipZoneId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read())
                {
                    ShipZoneProvince shipZoneProvince = new ShipZoneProvince();
                    shipZoneProvince.ShipZoneId = shipZoneId;
                    shipZoneProvince.ProvinceId = dr.GetInt32(0);
                    ShipZoneProvinces.Add(shipZoneProvince);
                }
                dr.Close();
            }
            return ShipZoneProvinces;
        }

        /// <summary>
        /// Updates/Saves the given ShipZoneProvince object to the database.
        /// </summary>
        /// <param name="shipZoneProvince">The ShipZoneProvince object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(ShipZoneProvince shipZoneProvince) { return shipZoneProvince.Save(); }

    }
}
