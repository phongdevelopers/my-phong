//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Shipping;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Shipping
{
    /// <summary>
    /// This class represents a ShipRateMatrix object in the database.
    /// </summary>
    public partial class ShipRateMatrix : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public ShipRateMatrix() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="shipRateMatrixId">Value of ShipRateMatrixId.</param>
        /// </summary>
        public ShipRateMatrix(Int32 shipRateMatrixId)
        {
            this.ShipRateMatrixId = shipRateMatrixId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ShipRateMatrixId");
          columnNames.Add(prefix + "ShipMethodId");
          columnNames.Add(prefix + "RangeStart");
          columnNames.Add(prefix + "RangeEnd");
          columnNames.Add(prefix + "Rate");
          columnNames.Add(prefix + "IsPercent");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given ShipRateMatrix object from the given database data reader.
        /// </summary>
        /// <param name="shipRateMatrix">The ShipRateMatrix object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(ShipRateMatrix shipRateMatrix, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            shipRateMatrix.ShipRateMatrixId = dr.GetInt32(0);
            shipRateMatrix.ShipMethodId = dr.GetInt32(1);
            shipRateMatrix.RangeStart = NullableData.GetDecimal(dr, 2);
            shipRateMatrix.RangeEnd = NullableData.GetDecimal(dr, 3);
            shipRateMatrix.Rate = dr.GetDecimal(4);
            shipRateMatrix.IsPercent = dr.GetBoolean(5);
            shipRateMatrix.IsDirty = false;
        }

#endregion

        private Int32 _ShipRateMatrixId;
        private Int32 _ShipMethodId;
        private LSDecimal _RangeStart;
        private LSDecimal _RangeEnd;
        private LSDecimal _Rate;
        private Boolean _IsPercent;
        private bool _IsDirty;

        /// <summary>
        /// ShipRateMatrixId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 ShipRateMatrixId
        {
            get { return this._ShipRateMatrixId; }
            set
            {
                if (this._ShipRateMatrixId != value)
                {
                    this._ShipRateMatrixId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// ShipMethodId
        /// </summary>
        public Int32 ShipMethodId
        {
            get { return this._ShipMethodId; }
            set
            {
                if (this._ShipMethodId != value)
                {
                    this._ShipMethodId = value;
                    this.IsDirty = true;
                    this._ShipMethod = null;
                }
            }
        }

        /// <summary>
        /// RangeStart
        /// </summary>
        public LSDecimal RangeStart
        {
            get { return this._RangeStart; }
            set
            {
                if (this._RangeStart != value)
                {
                    this._RangeStart = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// RangeEnd
        /// </summary>
        public LSDecimal RangeEnd
        {
            get { return this._RangeEnd; }
            set
            {
                if (this._RangeEnd != value)
                {
                    this._RangeEnd = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Rate
        /// </summary>
        public LSDecimal Rate
        {
            get { return this._Rate; }
            set
            {
                if (this._Rate != value)
                {
                    this._Rate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsPercent
        /// </summary>
        public Boolean IsPercent
        {
            get { return this._IsPercent; }
            set
            {
                if (this._IsPercent != value)
                {
                    this._IsPercent = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this ShipRateMatrix object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get { return this._IsDirty; }
            set { this._IsDirty = value; }
        }

#region Parents
        private ShipMethod _ShipMethod;

        /// <summary>
        /// The ShipMethod object that this ShipRateMatrix object is associated with
        /// </summary>
        public ShipMethod ShipMethod
        {
            get
            {
                if (!this.ShipMethodLoaded)
                {
                    this._ShipMethod = ShipMethodDataSource.Load(this.ShipMethodId);
                }
                return this._ShipMethod;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodLoaded { get { return ((this._ShipMethod != null) && (this._ShipMethod.ShipMethodId == this.ShipMethodId)); } }

#endregion

        /// <summary>
        /// Deletes this ShipRateMatrix object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_ShipRateMatrix");
            deleteQuery.Append(" WHERE ShipRateMatrixId = @ShipRateMatrixId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ShipRateMatrixId", System.Data.DbType.Int32, this.ShipRateMatrixId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this ShipRateMatrix object from the database for the given primary key.
        /// </summary>
        /// <param name="shipRateMatrixId">Value of ShipRateMatrixId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 shipRateMatrixId)
        {
            bool result = false;
            this.ShipRateMatrixId = shipRateMatrixId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_ShipRateMatrix");
            selectQuery.Append(" WHERE ShipRateMatrixId = @shipRateMatrixId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipRateMatrixId", System.Data.DbType.Int32, shipRateMatrixId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this ShipRateMatrix object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.ShipRateMatrixId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_ShipRateMatrix");
                    selectQuery.Append(" WHERE ShipRateMatrixId = @ShipRateMatrixId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ShipRateMatrixId", System.Data.DbType.Int32, this.ShipRateMatrixId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_ShipRateMatrix SET ");
                    updateQuery.Append("ShipMethodId = @ShipMethodId");
                    updateQuery.Append(", RangeStart = @RangeStart");
                    updateQuery.Append(", RangeEnd = @RangeEnd");
                    updateQuery.Append(", Rate = @Rate");
                    updateQuery.Append(", IsPercent = @IsPercent");
                    updateQuery.Append(" WHERE ShipRateMatrixId = @ShipRateMatrixId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@ShipRateMatrixId", System.Data.DbType.Int32, this.ShipRateMatrixId);
                        database.AddInParameter(updateCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);
                        database.AddInParameter(updateCommand, "@RangeStart", System.Data.DbType.Decimal, NullableData.DbNullify(this.RangeStart));
                        database.AddInParameter(updateCommand, "@RangeEnd", System.Data.DbType.Decimal, NullableData.DbNullify(this.RangeEnd));
                        database.AddInParameter(updateCommand, "@Rate", System.Data.DbType.Decimal, this.Rate);
                        database.AddInParameter(updateCommand, "@IsPercent", System.Data.DbType.Boolean, this.IsPercent);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_ShipRateMatrix (ShipMethodId, RangeStart, RangeEnd, Rate, IsPercent)");
                    insertQuery.Append(" VALUES (@ShipMethodId, @RangeStart, @RangeEnd, @Rate, @IsPercent)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ShipRateMatrixId", System.Data.DbType.Int32, this.ShipRateMatrixId);
                        database.AddInParameter(insertCommand, "@ShipMethodId", System.Data.DbType.Int32, this.ShipMethodId);
                        database.AddInParameter(insertCommand, "@RangeStart", System.Data.DbType.Decimal, NullableData.DbNullify(this.RangeStart));
                        database.AddInParameter(insertCommand, "@RangeEnd", System.Data.DbType.Decimal, NullableData.DbNullify(this.RangeEnd));
                        database.AddInParameter(insertCommand, "@Rate", System.Data.DbType.Decimal, this.Rate);
                        database.AddInParameter(insertCommand, "@IsPercent", System.Data.DbType.Boolean, this.IsPercent);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._ShipRateMatrixId = result;
                    }
                }

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

     }
}
