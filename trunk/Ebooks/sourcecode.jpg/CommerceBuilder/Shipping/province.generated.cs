//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Shipping;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Shipping
{
    /// <summary>
    /// This class represents a Province object in the database.
    /// </summary>
    public partial class Province : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public Province() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="provinceId">Value of ProvinceId.</param>
        /// </summary>
        public Province(Int32 provinceId)
        {
            this.ProvinceId = provinceId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "ProvinceId");
          columnNames.Add(prefix + "CountryCode");
          columnNames.Add(prefix + "Name");
          columnNames.Add(prefix + "ProvinceCode");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given Province object from the given database data reader.
        /// </summary>
        /// <param name="province">The Province object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(Province province, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            province.ProvinceId = dr.GetInt32(0);
            province.CountryCode = dr.GetString(1);
            province.Name = dr.GetString(2);
            province.ProvinceCode = NullableData.GetString(dr, 3);
            province.IsDirty = false;
        }

#endregion

        private Int32 _ProvinceId;
        private String _CountryCode = string.Empty;
        private String _Name = string.Empty;
        private String _LoweredName = string.Empty;
        private String _ProvinceCode = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// ProvinceId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 ProvinceId
        {
            get { return this._ProvinceId; }
            set
            {
                if (this._ProvinceId != value)
                {
                    this._ProvinceId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// CountryCode
        /// </summary>
        public String CountryCode
        {
            get { return this._CountryCode; }
            set
            {
                if (this._CountryCode != value)
                {
                    this._CountryCode = value;
                    this.IsDirty = true;
                    this._Country = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                    this._LoweredName = value.ToLowerInvariant();
                }
            }
        }

        /// <summary>
        /// LoweredName
        /// </summary>
        public String LoweredName
        {
            get { return this._LoweredName; }
        }

        /// <summary>
        /// ProvinceCode
        /// </summary>
        public String ProvinceCode
        {
            get { return this._ProvinceCode; }
            set
            {
                if (this._ProvinceCode != value)
                {
                    this._ProvinceCode = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this Province object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.ShipZoneProvincesLoaded && this.ShipZoneProvinces.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this Province are properly associated with this Province object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.ShipZoneProvincesLoaded) { foreach (ShipZoneProvince shipZoneProvince in this.ShipZoneProvinces) { shipZoneProvince.ProvinceId = this.ProvinceId; } }
        }

#region Parents
        private Country _Country;

        /// <summary>
        /// The Country object that this Province object is associated with
        /// </summary>
        public Country Country
        {
            get
            {
                if (!this.CountryLoaded)
                {
                    this._Country = CountryDataSource.Load(this.CountryCode);
                }
                return this._Country;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool CountryLoaded { get { return ((this._Country != null) && (this._Country.CountryCode == this.CountryCode)); } }

#endregion

#region Associations
        private ShipZoneProvinceCollection _ShipZoneProvinces;

        /// <summary>
        /// A collection of ShipZoneProvince objects associated with this Province object.
        /// </summary>
        public ShipZoneProvinceCollection ShipZoneProvinces
        {
            get
            {
                if (!this.ShipZoneProvincesLoaded)
                {
                    this._ShipZoneProvinces = ShipZoneProvinceDataSource.LoadForProvince(this.ProvinceId);
                }
                return this._ShipZoneProvinces;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipZoneProvincesLoaded { get { return (this._ShipZoneProvinces != null); } }
#endregion

        /// <summary>
        /// Deletes this Province object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Provinces");
            deleteQuery.Append(" WHERE ProvinceId = @ProvinceId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@ProvinceId", System.Data.DbType.Int32, this.ProvinceId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this Province object from the database for the given primary key.
        /// </summary>
        /// <param name="provinceId">Value of ProvinceId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 provinceId)
        {
            bool result = false;
            this.ProvinceId = provinceId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Provinces");
            selectQuery.Append(" WHERE ProvinceId = @provinceId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@provinceId", System.Data.DbType.Int32, provinceId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this Province object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                if (this.ProvinceId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Provinces");
                    selectQuery.Append(" WHERE ProvinceId = @ProvinceId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@ProvinceId", System.Data.DbType.Int32, this.ProvinceId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Provinces SET ");
                    updateQuery.Append("CountryCode = @CountryCode");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(", LoweredName = @LoweredName");
                    updateQuery.Append(", ProvinceCode = @ProvinceCode");
                    updateQuery.Append(" WHERE ProvinceId = @ProvinceId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@ProvinceId", System.Data.DbType.Int32, this.ProvinceId);
                        database.AddInParameter(updateCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(updateCommand, "@LoweredName", System.Data.DbType.String, this.LoweredName);
                        database.AddInParameter(updateCommand, "@ProvinceCode", System.Data.DbType.String, NullableData.DbNullify(this.ProvinceCode));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Provinces (CountryCode, Name, LoweredName, ProvinceCode)");
                    insertQuery.Append(" VALUES (@CountryCode, @Name, @LoweredName, @ProvinceCode)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@ProvinceId", System.Data.DbType.Int32, this.ProvinceId);
                        database.AddInParameter(insertCommand, "@CountryCode", System.Data.DbType.String, this.CountryCode);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        database.AddInParameter(insertCommand, "@LoweredName", System.Data.DbType.String, this.LoweredName);
                        database.AddInParameter(insertCommand, "@ProvinceCode", System.Data.DbType.String, NullableData.DbNullify(this.ProvinceCode));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._ProvinceId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this Province object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.ShipZoneProvincesLoaded) this.ShipZoneProvinces.Save();
        }

     }
}
