//Generated by DataSourceBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Users
{
    /// <summary>
    /// DataSource class for Group objects
    /// </summary>
    public partial class GroupDataSource
    {
        /// <summary>
        /// Deletes a Group object from the database
        /// </summary>
        /// <param name="group">The Group object to delete</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static bool Delete(Group group)
        {
            return group.Delete();
        }

        /// <summary>
        /// Deletes a Group object with given id from the database
        /// </summary>
        /// <param name="groupId">Value of GroupId of the object to delete.</param>
        /// <returns><b>true</b> if delete operation is successful, <b>false</b> otherwise</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete)]
        public static bool Delete(Int32 groupId)
        {
            Group group = new Group();
            if (group.Load(groupId)) return group.Delete();
            return false;
        }

        /// <summary>
        /// Inserts/Saves a Group object to the database.
        /// </summary>
        /// <param name="group">The Group object to insert</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Insert(Group group) { return group.Save(); }

        /// <summary>
        /// Loads a Group object for given Id from the database.
        /// </summary>
        /// <param name="groupId">Value of GroupId of the object to load.</param>
        /// <returns>If the load is successful the newly loaded Group object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Group Load(Int32 groupId)
        {
            return GroupDataSource.Load(groupId, true);
        }

        /// <summary>
        /// Loads a Group object for given Id from the database.
        /// </summary>
        /// <param name="groupId">Value of GroupId of the object to load.</param>
        /// <param name="useCache">If true tries to load object from cache first.</param>
        /// <returns>If the load is successful the newly loaded Group object is returned. If load fails null is returned.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static Group Load(Int32 groupId, bool useCache)
        {
            if (groupId == 0) return null;
            Group group = null;
            string key = "Group_" + groupId.ToString();
            if (useCache)
            {
                group = ContextCache.GetObject(key) as Group;
                if (group != null) return group;
            }
            group = new Group();
            if (group.Load(groupId))
            {
                if (useCache) ContextCache.SetObject(key, group);
                return group;
            }
            return null;
        }

        /// <summary>
        /// Counts the number of Group objects in result if retrieved using the given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the Group objects that should be loaded.</param>
        /// <returns>The number of Group objects matching the criteria</returns>
        public static int CountForCriteria(string sqlCriteria)
        {
            Database database = Token.Instance.Database;
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Groups" + whereClause);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Group objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForCriteria(string sqlCriteria)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Group objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForCriteria(string sqlCriteria, string sortExpression)
        {
            return LoadForCriteria(sqlCriteria, 0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Group objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex)
        {
            return LoadForCriteria(sqlCriteria, maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Group objects from the database based on given SQL criteria
        /// </summary>
        /// <param name="sqlCriteria">The SQL criteria string that determines the objects that should be loaded.</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection  LoadForCriteria(string sqlCriteria, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Groups");
            string whereClause = string.IsNullOrEmpty(sqlCriteria) ? string.Empty : " WHERE " + sqlCriteria;
            selectQuery.Append(whereClause);
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>The number of Group objects associated with with the given CouponId</returns>
        public static int CountForCoupon(Int32 couponId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_CouponGroups WHERE CouponId = @couponId");
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <returns>A collection of Group objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForCoupon(Int32 couponId)
        {
            return GroupDataSource.LoadForCoupon(couponId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForCoupon(Int32 couponId, string sortExpression)
        {
            return GroupDataSource.LoadForCoupon(couponId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForCoupon(couponId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given CouponId
        /// </summary>
        /// <param name="couponId">The given CouponId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given CouponId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForCoupon(Int32 couponId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_CouponGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_CouponGroups.GroupId");
            selectQuery.Append(" AND ac_CouponGroups.CouponId = @couponId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@couponId", System.Data.DbType.Int32, couponId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given RoleId
        /// </summary>
        /// <param name="roleId">The given RoleId</param>
        /// <returns>The number of Group objects associated with with the given RoleId</returns>
        public static int CountForRole(Int32 roleId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_GroupRoles WHERE RoleId = @roleId");
            database.AddInParameter(selectCommand, "@roleId", System.Data.DbType.Int32, roleId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given RoleId
        /// </summary>
        /// <param name="roleId">The given RoleId</param>
        /// <returns>A collection of Group objects associated with with the given RoleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForRole(Int32 roleId)
        {
            return GroupDataSource.LoadForRole(roleId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given RoleId
        /// </summary>
        /// <param name="roleId">The given RoleId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given RoleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForRole(Int32 roleId, string sortExpression)
        {
            return GroupDataSource.LoadForRole(roleId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given RoleId
        /// </summary>
        /// <param name="roleId">The given RoleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given RoleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForRole(Int32 roleId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForRole(roleId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given RoleId
        /// </summary>
        /// <param name="roleId">The given RoleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given RoleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForRole(Int32 roleId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_GroupRoles");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_GroupRoles.GroupId");
            selectQuery.Append(" AND ac_GroupRoles.RoleId = @roleId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@roleId", System.Data.DbType.Int32, roleId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given PaymentMethodId
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <returns>The number of Group objects associated with with the given PaymentMethodId</returns>
        public static int CountForPaymentMethod(Int32 paymentMethodId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_PaymentMethodGroups WHERE PaymentMethodId = @paymentMethodId");
            database.AddInParameter(selectCommand, "@paymentMethodId", System.Data.DbType.Int32, paymentMethodId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given PaymentMethodId
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <returns>A collection of Group objects associated with with the given PaymentMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForPaymentMethod(Int32 paymentMethodId)
        {
            return GroupDataSource.LoadForPaymentMethod(paymentMethodId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given PaymentMethodId
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given PaymentMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForPaymentMethod(Int32 paymentMethodId, string sortExpression)
        {
            return GroupDataSource.LoadForPaymentMethod(paymentMethodId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given PaymentMethodId
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given PaymentMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForPaymentMethod(Int32 paymentMethodId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForPaymentMethod(paymentMethodId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given PaymentMethodId
        /// </summary>
        /// <param name="paymentMethodId">The given PaymentMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given PaymentMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForPaymentMethod(Int32 paymentMethodId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_PaymentMethodGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_PaymentMethodGroups.GroupId");
            selectQuery.Append(" AND ac_PaymentMethodGroups.PaymentMethodId = @paymentMethodId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@paymentMethodId", System.Data.DbType.Int32, paymentMethodId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <returns>The number of Group objects associated with with the given ShipMethodId</returns>
        public static int CountForShipMethod(Int32 shipMethodId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_ShipMethodGroups WHERE ShipMethodId = @shipMethodId");
            database.AddInParameter(selectCommand, "@shipMethodId", System.Data.DbType.Int32, shipMethodId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <returns>A collection of Group objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForShipMethod(Int32 shipMethodId)
        {
            return GroupDataSource.LoadForShipMethod(shipMethodId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForShipMethod(Int32 shipMethodId, string sortExpression)
        {
            return GroupDataSource.LoadForShipMethod(shipMethodId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForShipMethod(Int32 shipMethodId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForShipMethod(shipMethodId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given ShipMethodId
        /// </summary>
        /// <param name="shipMethodId">The given ShipMethodId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given ShipMethodId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForShipMethod(Int32 shipMethodId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_ShipMethodGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_ShipMethodGroups.GroupId");
            selectQuery.Append(" AND ac_ShipMethodGroups.ShipMethodId = @shipMethodId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@shipMethodId", System.Data.DbType.Int32, shipMethodId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given SpecialId
        /// </summary>
        /// <param name="specialId">The given SpecialId</param>
        /// <returns>The number of Group objects associated with with the given SpecialId</returns>
        public static int CountForSpecial(Int32 specialId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_SpecialGroups WHERE SpecialId = @specialId");
            database.AddInParameter(selectCommand, "@specialId", System.Data.DbType.Int32, specialId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given SpecialId
        /// </summary>
        /// <param name="specialId">The given SpecialId</param>
        /// <returns>A collection of Group objects associated with with the given SpecialId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForSpecial(Int32 specialId)
        {
            return GroupDataSource.LoadForSpecial(specialId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given SpecialId
        /// </summary>
        /// <param name="specialId">The given SpecialId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given SpecialId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForSpecial(Int32 specialId, string sortExpression)
        {
            return GroupDataSource.LoadForSpecial(specialId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given SpecialId
        /// </summary>
        /// <param name="specialId">The given SpecialId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given SpecialId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForSpecial(Int32 specialId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForSpecial(specialId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given SpecialId
        /// </summary>
        /// <param name="specialId">The given SpecialId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given SpecialId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForSpecial(Int32 specialId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_SpecialGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_SpecialGroups.GroupId");
            selectQuery.Append(" AND ac_SpecialGroups.SpecialId = @specialId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@specialId", System.Data.DbType.Int32, specialId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <returns>The number of Group objects associated with with the given TaxRuleId</returns>
        public static int CountForTaxRule(Int32 taxRuleId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_TaxRuleGroups WHERE TaxRuleId = @taxRuleId");
            database.AddInParameter(selectCommand, "@taxRuleId", System.Data.DbType.Int32, taxRuleId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <returns>A collection of Group objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForTaxRule(Int32 taxRuleId)
        {
            return GroupDataSource.LoadForTaxRule(taxRuleId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForTaxRule(Int32 taxRuleId, string sortExpression)
        {
            return GroupDataSource.LoadForTaxRule(taxRuleId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForTaxRule(Int32 taxRuleId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForTaxRule(taxRuleId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given TaxRuleId
        /// </summary>
        /// <param name="taxRuleId">The given TaxRuleId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given TaxRuleId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForTaxRule(Int32 taxRuleId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_TaxRuleGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_TaxRuleGroups.GroupId");
            selectQuery.Append(" AND ac_TaxRuleGroups.TaxRuleId = @taxRuleId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxRuleId", System.Data.DbType.Int32, taxRuleId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given UserId
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <returns>The number of Group objects associated with with the given UserId</returns>
        public static int CountForUser(Int32 userId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_UserGroups WHERE UserId = @userId");
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given UserId
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <returns>A collection of Group objects associated with with the given UserId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForUser(Int32 userId)
        {
            return GroupDataSource.LoadForUser(userId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given UserId
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given UserId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForUser(Int32 userId, string sortExpression)
        {
            return GroupDataSource.LoadForUser(userId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given UserId
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given UserId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForUser(Int32 userId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForUser(userId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given UserId
        /// </summary>
        /// <param name="userId">The given UserId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given UserId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForUser(Int32 userId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_UserGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_UserGroups.GroupId");
            selectQuery.Append(" AND ac_UserGroups.UserId = @userId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given VendorId
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <returns>The number of Group objects associated with with the given VendorId</returns>
        public static int CountForVendor(Int32 vendorId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_VendorGroups WHERE VendorId = @vendorId");
            database.AddInParameter(selectCommand, "@vendorId", System.Data.DbType.Int32, vendorId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given VendorId
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <returns>A collection of Group objects associated with with the given VendorId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVendor(Int32 vendorId)
        {
            return GroupDataSource.LoadForVendor(vendorId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given VendorId
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given VendorId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVendor(Int32 vendorId, string sortExpression)
        {
            return GroupDataSource.LoadForVendor(vendorId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given VendorId
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given VendorId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVendor(Int32 vendorId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForVendor(vendorId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given VendorId
        /// </summary>
        /// <param name="vendorId">The given VendorId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given VendorId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVendor(Int32 vendorId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_VendorGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_VendorGroups.GroupId");
            selectQuery.Append(" AND ac_VendorGroups.VendorId = @vendorId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@vendorId", System.Data.DbType.Int32, vendorId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <returns>The number of Group objects associated with with the given VolumeDiscountId</returns>
        public static int CountForVolumeDiscount(Int32 volumeDiscountId)
        {
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_VolumeDiscountGroups WHERE VolumeDiscountId = @volumeDiscountId");
            database.AddInParameter(selectCommand, "@volumeDiscountId", System.Data.DbType.Int32, volumeDiscountId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }
        /// <summary>
        /// Loads the Group objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <returns>A collection of Group objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVolumeDiscount(Int32 volumeDiscountId)
        {
            return GroupDataSource.LoadForVolumeDiscount(volumeDiscountId, 0, 0, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVolumeDiscount(Int32 volumeDiscountId, string sortExpression)
        {
            return GroupDataSource.LoadForVolumeDiscount(volumeDiscountId, 0, 0, sortExpression);
        }
        /// <summary>
        /// Loads the Group objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVolumeDiscount(Int32 volumeDiscountId, int maximumRows, int startRowIndex)
        {
            return GroupDataSource.LoadForVolumeDiscount(volumeDiscountId, maximumRows, startRowIndex, string.Empty);
        }
        /// <summary>
        /// Loads the Group objects associated with the given VolumeDiscountId
        /// </summary>
        /// <param name="volumeDiscountId">The given VolumeDiscountId</param>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects associated with with the given VolumeDiscountId</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForVolumeDiscount(Int32 volumeDiscountId, int maximumRows, int startRowIndex, string sortExpression)
        {
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames("ac_Groups"));
            selectQuery.Append(" FROM ac_Groups, ac_VolumeDiscountGroups");
            selectQuery.Append(" WHERE ac_Groups.GroupId = ac_VolumeDiscountGroups.GroupId");
            selectQuery.Append(" AND ac_VolumeDiscountGroups.VolumeDiscountId = @volumeDiscountId");
            selectQuery.Append(" AND StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@volumeDiscountId", System.Data.DbType.Int32, volumeDiscountId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Counts the number of Group objects for the current store.
        /// </summary>
        /// <returns>The Number of Group objects in the current store.</returns>
        public static int CountForStore()
        {
            int storeId = Token.Instance.StoreId;
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand("SELECT COUNT(*) AS TotalRecords FROM ac_Groups WHERE StoreId = @storeId");
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            return CommerceBuilder.Utility.AlwaysConvert.ToInt(database.ExecuteScalar(selectCommand));
        }

        /// <summary>
        /// Loads a collection of Group objects for the current store from the database
        /// </summary>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForStore()
        {
            return LoadForStore(0, 0, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Group objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForStore(string sortExpression)
        {
            return LoadForStore(0, 0, sortExpression);
        }

        /// <summary>
        /// Loads a collection of Group objects for the current store from the database.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForStore(int maximumRows, int startRowIndex)
        {
            return LoadForStore(maximumRows, startRowIndex, string.Empty);
        }

        /// <summary>
        /// Loads a collection of Group objects for the current store from the database. Sorts using the given sort exrpression.
        /// </summary>
        /// <param name="maximumRows">Maximum number of rows to retrieve.</param>
        /// <param name="startRowIndex">Starting index from where to start retrieving.</param>
        /// <param name="sortExpression">The sort expression to use for sorting the loaded objects.</param>
        /// <returns>A collection of Group objects</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select)]
        public static GroupCollection LoadForStore(int maximumRows, int startRowIndex, string sortExpression)
        {
            int storeId = Token.Instance.StoreId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT");
            if (maximumRows > 0) selectQuery.Append(" TOP " + (startRowIndex + maximumRows).ToString());
            selectQuery.Append(" " + Group.GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Groups");
            selectQuery.Append(" WHERE StoreId = @storeId");
            if (!string.IsNullOrEmpty(sortExpression)) selectQuery.Append(" ORDER BY " + sortExpression);
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, storeId);
            //EXECUTE THE COMMAND
            GroupCollection results = new GroupCollection();
            int thisIndex = 0;
            int rowCount = 0;
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                while (dr.Read() && ((maximumRows < 1) || (rowCount < maximumRows)))
                {
                    if (thisIndex >= startRowIndex)
                    {
                        Group group = new Group();
                        Group.LoadDataReader(group, dr);
                        results.Add(group);
                        rowCount++;
                    }
                    thisIndex++;
                }
                dr.Close();
            }
            return results;
        }

        /// <summary>
        /// Updates/Saves the given Group object to the database.
        /// </summary>
        /// <param name="group">The Group object to update/save to database.</param>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update)]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static SaveResult Update(Group group) { return group.Save(); }

    }
}
