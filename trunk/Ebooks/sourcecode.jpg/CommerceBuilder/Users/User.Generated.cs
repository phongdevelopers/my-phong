//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Marketing;
using CommerceBuilder.Orders;
using CommerceBuilder.Personalization;
using CommerceBuilder.Reporting;
using CommerceBuilder.Stores;
using CommerceBuilder.Users;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Users
{
    /// <summary>
    /// This class represents a User object in the database.
    /// </summary>
    public partial class User : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public User() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="userId">Value of UserId.</param>
        /// </summary>
        public User(Int32 userId)
        {
            this.UserId = userId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "UserId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "UserName");
          columnNames.Add(prefix + "Email");
          columnNames.Add(prefix + "AffiliateId");
          columnNames.Add(prefix + "AffiliateReferralDate");
          columnNames.Add(prefix + "PrimaryAddressId");
          columnNames.Add(prefix + "PrimaryWishlistId");
          columnNames.Add(prefix + "PayPalId");
          columnNames.Add(prefix + "PasswordQuestion");
          columnNames.Add(prefix + "PasswordAnswer");
          columnNames.Add(prefix + "IsApproved");
          columnNames.Add(prefix + "IsAnonymous");
          columnNames.Add(prefix + "IsLockedOut");
          columnNames.Add(prefix + "CreateDate");
          columnNames.Add(prefix + "LastActivityDate");
          columnNames.Add(prefix + "LastLoginDate");
          columnNames.Add(prefix + "LastPasswordChangedDate");
          columnNames.Add(prefix + "LastLockoutDate");
          columnNames.Add(prefix + "FailedPasswordAttemptCount");
          columnNames.Add(prefix + "FailedPasswordAttemptWindowStart");
          columnNames.Add(prefix + "FailedPasswordAnswerAttemptCount");
          columnNames.Add(prefix + "FailedPasswordAnswerAttemptWindowStart");
          columnNames.Add(prefix + "Comment");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given User object from the given database data reader.
        /// </summary>
        /// <param name="user">The User object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(User user, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            user.UserId = dr.GetInt32(0);
            user.StoreId = dr.GetInt32(1);
            user.UserName = dr.GetString(2);
            user.Email = NullableData.GetString(dr, 3);
            user.AffiliateId = NullableData.GetInt32(dr, 4);
            user.AffiliateReferralDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 5));
            user.PrimaryAddressId = NullableData.GetInt32(dr, 6);
            user.PrimaryWishlistId = NullableData.GetInt32(dr, 7);
            user.PayPalId = NullableData.GetString(dr, 8);
            user.PasswordQuestion = NullableData.GetString(dr, 9);
            user.PasswordAnswer = NullableData.GetString(dr, 10);
            user.IsApproved = dr.GetBoolean(11);
            user.IsAnonymous = dr.GetBoolean(12);
            user.IsLockedOut = dr.GetBoolean(13);
            user.CreateDate = LocaleHelper.ToLocalTime(dr.GetDateTime(14));
            user.LastActivityDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 15));
            user.LastLoginDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 16));
            user.LastPasswordChangedDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 17));
            user.LastLockoutDate = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 18));
            user.FailedPasswordAttemptCount = dr.GetInt32(19);
            user.FailedPasswordAttemptWindowStart = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 20));
            user.FailedPasswordAnswerAttemptCount = dr.GetInt32(21);
            user.FailedPasswordAnswerAttemptWindowStart = LocaleHelper.ToLocalTime(NullableData.GetDateTime(dr, 22));
            user.Comment = NullableData.GetString(dr, 23);
            user.IsDirty = false;
        }

#endregion

        private Int32 _UserId;
        private Int32 _StoreId;
        private String _UserName = string.Empty;
        private String _LoweredUserName = string.Empty;
        private String _Email = string.Empty;
        private String _LoweredEmail = string.Empty;
        private Int32 _AffiliateId;
        private DateTime _AffiliateReferralDate;
        private Int32 _PrimaryAddressId;
        private Int32 _PrimaryWishlistId;
        private String _PayPalId = string.Empty;
        private String _PasswordQuestion = string.Empty;
        private String _PasswordAnswer = string.Empty;
        private Boolean _IsApproved;
        private Boolean _IsAnonymous;
        private Boolean _IsLockedOut;
        private DateTime _CreateDate;
        private DateTime _LastActivityDate;
        private DateTime _LastLoginDate;
        private DateTime _LastPasswordChangedDate;
        private DateTime _LastLockoutDate;
        private Int32 _FailedPasswordAttemptCount;
        private DateTime _FailedPasswordAttemptWindowStart;
        private Int32 _FailedPasswordAnswerAttemptCount;
        private DateTime _FailedPasswordAnswerAttemptWindowStart;
        private String _Comment = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// UserId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 UserId
        {
            get { return this._UserId; }
            set
            {
                if (this._UserId != value)
                {
                    this._UserId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// UserName
        /// </summary>
        public String UserName
        {
            get { return this._UserName; }
            set
            {
                if (this._UserName != value)
                {
                    this._UserName = value;
                    this.IsDirty = true;
                    this._LoweredUserName = value.ToLowerInvariant();
                }
            }
        }

        /// <summary>
        /// LoweredUserName
        /// </summary>
        public String LoweredUserName
        {
            get { return this._LoweredUserName; }
        }

        /// <summary>
        /// Email
        /// </summary>
        public String Email
        {
            get { return this._Email; }
            set
            {
                if (this._Email != value)
                {
                    this._Email = value;
                    this.IsDirty = true;
                    this._LoweredEmail = value.ToLowerInvariant();
                }
            }
        }

        /// <summary>
        /// LoweredEmail
        /// </summary>
        public String LoweredEmail
        {
            get { return this._LoweredEmail; }
        }

        /// <summary>
        /// AffiliateId
        /// </summary>
        public Int32 AffiliateId
        {
            get { return this._AffiliateId; }
            set
            {
                if (this._AffiliateId != value)
                {
                    this._AffiliateId = value;
                    this.IsDirty = true;
                    this._Affiliate = null;
                }
            }
        }

        /// <summary>
        /// AffiliateReferralDate
        /// </summary>
        public DateTime AffiliateReferralDate
        {
            get { return this._AffiliateReferralDate; }
            set
            {
                if (this._AffiliateReferralDate != value)
                {
                    this._AffiliateReferralDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PrimaryAddressId
        /// </summary>
        public Int32 PrimaryAddressId
        {
            get { return this._PrimaryAddressId; }
            set
            {
                if (this._PrimaryAddressId != value)
                {
                    this._PrimaryAddressId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PrimaryWishlistId
        /// </summary>
        public Int32 PrimaryWishlistId
        {
            get { return this._PrimaryWishlistId; }
            set
            {
                if (this._PrimaryWishlistId != value)
                {
                    this._PrimaryWishlistId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PayPalId
        /// </summary>
        public String PayPalId
        {
            get { return this._PayPalId; }
            set
            {
                if (this._PayPalId != value)
                {
                    this._PayPalId = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PasswordQuestion
        /// </summary>
        public String PasswordQuestion
        {
            get { return this._PasswordQuestion; }
            set
            {
                if (this._PasswordQuestion != value)
                {
                    this._PasswordQuestion = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// PasswordAnswer
        /// </summary>
        public String PasswordAnswer
        {
            get { return this._PasswordAnswer; }
            set
            {
                if (this._PasswordAnswer != value)
                {
                    this._PasswordAnswer = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsApproved
        /// </summary>
        public Boolean IsApproved
        {
            get { return this._IsApproved; }
            set
            {
                if (this._IsApproved != value)
                {
                    this._IsApproved = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsAnonymous
        /// </summary>
        public Boolean IsAnonymous
        {
            get { return this._IsAnonymous; }
            set
            {
                if (this._IsAnonymous != value)
                {
                    this._IsAnonymous = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// IsLockedOut
        /// </summary>
        public Boolean IsLockedOut
        {
            get { return this._IsLockedOut; }
            set
            {
                if (this._IsLockedOut != value)
                {
                    this._IsLockedOut = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// CreateDate
        /// </summary>
        public DateTime CreateDate
        {
            get { return this._CreateDate; }
            set
            {
                if (this._CreateDate != value)
                {
                    this._CreateDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastActivityDate
        /// </summary>
        public DateTime LastActivityDate
        {
            get { return this._LastActivityDate; }
            set
            {
                if (this._LastActivityDate != value)
                {
                    this._LastActivityDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastLoginDate
        /// </summary>
        public DateTime LastLoginDate
        {
            get { return this._LastLoginDate; }
            set
            {
                if (this._LastLoginDate != value)
                {
                    this._LastLoginDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastPasswordChangedDate
        /// </summary>
        public DateTime LastPasswordChangedDate
        {
            get { return this._LastPasswordChangedDate; }
            set
            {
                if (this._LastPasswordChangedDate != value)
                {
                    this._LastPasswordChangedDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// LastLockoutDate
        /// </summary>
        public DateTime LastLockoutDate
        {
            get { return this._LastLockoutDate; }
            set
            {
                if (this._LastLockoutDate != value)
                {
                    this._LastLockoutDate = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FailedPasswordAttemptCount
        /// </summary>
        public Int32 FailedPasswordAttemptCount
        {
            get { return this._FailedPasswordAttemptCount; }
            set
            {
                if (this._FailedPasswordAttemptCount != value)
                {
                    this._FailedPasswordAttemptCount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FailedPasswordAttemptWindowStart
        /// </summary>
        public DateTime FailedPasswordAttemptWindowStart
        {
            get { return this._FailedPasswordAttemptWindowStart; }
            set
            {
                if (this._FailedPasswordAttemptWindowStart != value)
                {
                    this._FailedPasswordAttemptWindowStart = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FailedPasswordAnswerAttemptCount
        /// </summary>
        public Int32 FailedPasswordAnswerAttemptCount
        {
            get { return this._FailedPasswordAnswerAttemptCount; }
            set
            {
                if (this._FailedPasswordAnswerAttemptCount != value)
                {
                    this._FailedPasswordAnswerAttemptCount = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// FailedPasswordAnswerAttemptWindowStart
        /// </summary>
        public DateTime FailedPasswordAnswerAttemptWindowStart
        {
            get { return this._FailedPasswordAnswerAttemptWindowStart; }
            set
            {
                if (this._FailedPasswordAnswerAttemptWindowStart != value)
                {
                    this._FailedPasswordAnswerAttemptWindowStart = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Comment
        /// </summary>
        public String Comment
        {
            get { return this._Comment; }
            set
            {
                if (this._Comment != value)
                {
                    this._Comment = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this User object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.AddressesLoaded && this.Addresses.IsDirty) return true;
                if (this.AuditEventsLoaded && this.AuditEvents.IsDirty) return true;
                if (this.BasketsLoaded && this.Baskets.IsDirty) return true;
                if (this.OrderNotesLoaded && this.OrderNotes.IsDirty) return true;
                if (this.OrdersLoaded && this.Orders.IsDirty) return true;
                if (this.PageViewsLoaded && this.PageViews.IsDirty) return true;
                if (this.ProfileLoaded && this.Profile.IsDirty) return true;
                if (this.SubscriptionsLoaded && this.Subscriptions.IsDirty) return true;
                if (this.UserGroupsLoaded && this.UserGroups.IsDirty) return true;
                if (this.PasswordsLoaded && this.Passwords.IsDirty) return true;
                if (this.UserPersonalizationsLoaded && this.UserPersonalizations.IsDirty) return true;
                if (this.SettingsLoaded && this.Settings.IsDirty) return true;
                if (this.WishlistsLoaded && this.Wishlists.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this User are properly associated with this User object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.AddressesLoaded) { foreach (Address address in this.Addresses) { address.UserId = this.UserId; } }
            if (this.AuditEventsLoaded) { foreach (AuditEvent auditEvent in this.AuditEvents) { auditEvent.UserId = this.UserId; } }
            if (this.BasketsLoaded) { foreach (Basket basket in this.Baskets) { basket.UserId = this.UserId; } }
            if (this.OrderNotesLoaded) { foreach (OrderNote orderNote in this.OrderNotes) { orderNote.UserId = this.UserId; } }
            if (this.OrdersLoaded) { foreach (Order order in this.Orders) { order.UserId = this.UserId; } }
            if (this.PageViewsLoaded) { foreach (PageView pageView in this.PageViews) { pageView.UserId = this.UserId; } }
            if (this.ProfileLoaded) { Profile.UserId = this.UserId; }
            if (this.SubscriptionsLoaded) { foreach (Subscription subscription in this.Subscriptions) { subscription.UserId = this.UserId; } }
            if (this.UserGroupsLoaded) { foreach (UserGroup userGroup in this.UserGroups) { userGroup.UserId = this.UserId; } }
            if (this.PasswordsLoaded) { foreach (UserPassword userPassword in this.Passwords) { userPassword.UserId = this.UserId; } }
            if (this.UserPersonalizationsLoaded) { foreach (UserPersonalization userPersonalization in this.UserPersonalizations) { userPersonalization.UserId = this.UserId; } }
            if (this.SettingsLoaded) { foreach (UserSetting userSetting in this.Settings) { userSetting.UserId = this.UserId; } }
            if (this.WishlistsLoaded) { foreach (Wishlist wishlist in this.Wishlists) { wishlist.UserId = this.UserId; } }
        }

#region Parents
        private Affiliate _Affiliate;
        private Store _Store;

        /// <summary>
        /// The Affiliate object that this User object is associated with
        /// </summary>
        public Affiliate Affiliate
        {
            get
            {
                if (!this.AffiliateLoaded)
                {
                    this._Affiliate = AffiliateDataSource.Load(this.AffiliateId);
                }
                return this._Affiliate;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AffiliateLoaded { get { return ((this._Affiliate != null) && (this._Affiliate.AffiliateId == this.AffiliateId)); } }

        /// <summary>
        /// The Store object that this User object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private AddressCollection _Addresses;
        private AuditEventCollection _AuditEvents;
        private BasketCollection _Baskets;
        private OrderNoteCollection _OrderNotes;
        private OrderCollection _Orders;
        private PageViewCollection _PageViews;
        private Profile _Profile;
        private SubscriptionCollection _Subscriptions;
        private UserPasswordCollection _Passwords;
        private UserSettingCollection _Settings;
        private WishlistCollection _Wishlists;

        /// <summary>
        /// A collection of Address objects associated with this User object.
        /// </summary>
        public AddressCollection Addresses
        {
            get
            {
                if (!this.AddressesLoaded)
                {
                    this._Addresses = AddressDataSource.LoadForUser(this.UserId);
                }
                return this._Addresses;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AddressesLoaded { get { return (this._Addresses != null); } }

        /// <summary>
        /// A collection of AuditEvent objects associated with this User object.
        /// </summary>
        public AuditEventCollection AuditEvents
        {
            get
            {
                if (!this.AuditEventsLoaded)
                {
                    this._AuditEvents = AuditEventDataSource.LoadForUser(this.UserId);
                }
                return this._AuditEvents;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool AuditEventsLoaded { get { return (this._AuditEvents != null); } }

        /// <summary>
        /// A collection of Basket objects associated with this User object.
        /// </summary>
        public BasketCollection Baskets
        {
            get
            {
                if (!this.BasketsLoaded)
                {
                    this._Baskets = BasketDataSource.LoadForUser(this.UserId);
                }
                return this._Baskets;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketsLoaded { get { return (this._Baskets != null); } }

        /// <summary>
        /// A collection of OrderNote objects associated with this User object.
        /// </summary>
        public OrderNoteCollection OrderNotes
        {
            get
            {
                if (!this.OrderNotesLoaded)
                {
                    this._OrderNotes = OrderNoteDataSource.LoadForUser(this.UserId);
                }
                return this._OrderNotes;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderNotesLoaded { get { return (this._OrderNotes != null); } }

        /// <summary>
        /// A collection of Order objects associated with this User object.
        /// </summary>
        public OrderCollection Orders
        {
            get
            {
                if (!this.OrdersLoaded)
                {
                    this._Orders = OrderDataSource.LoadForUser(this.UserId);
                }
                return this._Orders;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrdersLoaded { get { return (this._Orders != null); } }

        /// <summary>
        /// A collection of PageView objects associated with this User object.
        /// </summary>
        public PageViewCollection PageViews
        {
            get
            {
                if (!this.PageViewsLoaded)
                {
                    this._PageViews = PageViewDataSource.LoadForUser(this.UserId);
                }
                return this._PageViews;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PageViewsLoaded { get { return (this._PageViews != null); } }

        /// <summary>
        /// The Profile object associated with this User
        /// </summary>
        public Profile Profile
        {
            get
            {
                if (!this.ProfileLoaded)
                {
                    this._Profile = ProfileDataSource.Load(this.UserId);
                }
                return this._Profile;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProfileLoaded { get { return (this._Profile != null); } }

        /// <summary>
        /// A collection of Subscription objects associated with this User object.
        /// </summary>
        public SubscriptionCollection Subscriptions
        {
            get
            {
                if (!this.SubscriptionsLoaded)
                {
                    this._Subscriptions = SubscriptionDataSource.LoadForUser(this.UserId);
                }
                return this._Subscriptions;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SubscriptionsLoaded { get { return (this._Subscriptions != null); } }

        /// <summary>
        /// A collection of UserPassword objects associated with this User object.
        /// </summary>
        public UserPasswordCollection Passwords
        {
            get
            {
                if (!this.PasswordsLoaded)
                {
                    this._Passwords = UserPasswordDataSource.LoadForUser(this.UserId);
                }
                return this._Passwords;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool PasswordsLoaded { get { return (this._Passwords != null); } }

        /// <summary>
        /// A collection of UserSetting objects associated with this User object.
        /// </summary>
        public UserSettingCollection Settings
        {
            get
            {
                if (!this.SettingsLoaded)
                {
                    this._Settings = UserSettingDataSource.LoadForUser(this.UserId);
                }
                return this._Settings;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SettingsLoaded { get { return (this._Settings != null); } }

        /// <summary>
        /// A collection of Wishlist objects associated with this User object.
        /// </summary>
        public WishlistCollection Wishlists
        {
            get
            {
                if (!this.WishlistsLoaded)
                {
                    this._Wishlists = WishlistDataSource.LoadForUser(this.UserId);
                }
                return this._Wishlists;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WishlistsLoaded { get { return (this._Wishlists != null); } }

#endregion

#region Associations
        private UserGroupCollection _UserGroups;
        private UserPersonalizationCollection _UserPersonalizations;

        /// <summary>
        /// A collection of UserGroup objects associated with this User object.
        /// </summary>
        public UserGroupCollection UserGroups
        {
            get
            {
                if (!this.UserGroupsLoaded)
                {
                    this._UserGroups = UserGroupDataSource.LoadForUser(this.UserId);
                }
                return this._UserGroups;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserGroupsLoaded { get { return (this._UserGroups != null); } }
        /// <summary>
        /// A collection of UserPersonalization objects associated with this User object.
        /// </summary>
        public UserPersonalizationCollection UserPersonalizations
        {
            get
            {
                if (!this.UserPersonalizationsLoaded)
                {
                    this._UserPersonalizations = UserPersonalizationDataSource.LoadForUser(this.UserId);
                }
                return this._UserPersonalizations;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool UserPersonalizationsLoaded { get { return (this._UserPersonalizations != null); } }
#endregion

        /// <summary>
        /// Deletes this User object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        protected bool BaseDelete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_Users");
            deleteQuery.Append(" WHERE UserId = @UserId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this User object from the database for the given primary key.
        /// </summary>
        /// <param name="userId">Value of UserId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 userId)
        {
            bool result = false;
            this.UserId = userId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_Users");
            selectQuery.Append(" WHERE UserId = @userId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@userId", System.Data.DbType.Int32, userId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this User object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        protected SaveResult BaseSave()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.UserId == 0) recordExists = false;

                //SET DEFAULT FOR DATE FIELD
                if (this.CreateDate == System.DateTime.MinValue) this.CreateDate = LocaleHelper.LocalNow;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_Users");
                    selectQuery.Append(" WHERE UserId = @UserId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_Users SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", UserName = @UserName");
                    updateQuery.Append(", LoweredUserName = @LoweredUserName");
                    updateQuery.Append(", Email = @Email");
                    updateQuery.Append(", LoweredEmail = @LoweredEmail");
                    updateQuery.Append(", AffiliateId = @AffiliateId");
                    updateQuery.Append(", AffiliateReferralDate = @AffiliateReferralDate");
                    updateQuery.Append(", PrimaryAddressId = @PrimaryAddressId");
                    updateQuery.Append(", PrimaryWishlistId = @PrimaryWishlistId");
                    updateQuery.Append(", PayPalId = @PayPalId");
                    updateQuery.Append(", PasswordQuestion = @PasswordQuestion");
                    updateQuery.Append(", PasswordAnswer = @PasswordAnswer");
                    updateQuery.Append(", IsApproved = @IsApproved");
                    updateQuery.Append(", IsAnonymous = @IsAnonymous");
                    updateQuery.Append(", IsLockedOut = @IsLockedOut");
                    updateQuery.Append(", CreateDate = @CreateDate");
                    updateQuery.Append(", LastActivityDate = @LastActivityDate");
                    updateQuery.Append(", LastLoginDate = @LastLoginDate");
                    updateQuery.Append(", LastPasswordChangedDate = @LastPasswordChangedDate");
                    updateQuery.Append(", LastLockoutDate = @LastLockoutDate");
                    updateQuery.Append(", FailedPasswordAttemptCount = @FailedPasswordAttemptCount");
                    updateQuery.Append(", FailedPasswordAttemptWindowStart = @FailedPasswordAttemptWindowStart");
                    updateQuery.Append(", FailedPasswordAnswerAttemptCount = @FailedPasswordAnswerAttemptCount");
                    updateQuery.Append(", FailedPasswordAnswerAttemptWindowStart = @FailedPasswordAnswerAttemptWindowStart");
                    updateQuery.Append(", Comment = @Comment");
                    updateQuery.Append(" WHERE UserId = @UserId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@UserName", System.Data.DbType.String, this.UserName);
                        database.AddInParameter(updateCommand, "@LoweredUserName", System.Data.DbType.String, this.LoweredUserName);
                        database.AddInParameter(updateCommand, "@Email", System.Data.DbType.String, NullableData.DbNullify(this.Email));
                        database.AddInParameter(updateCommand, "@LoweredEmail", System.Data.DbType.String, NullableData.DbNullify(this.LoweredEmail));
                        database.AddInParameter(updateCommand, "@AffiliateId", System.Data.DbType.Int32, NullableData.DbNullify(this.AffiliateId));
                        database.AddInParameter(updateCommand, "@AffiliateReferralDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.AffiliateReferralDate)));
                        database.AddInParameter(updateCommand, "@PrimaryAddressId", System.Data.DbType.Int32, NullableData.DbNullify(this.PrimaryAddressId));
                        database.AddInParameter(updateCommand, "@PrimaryWishlistId", System.Data.DbType.Int32, NullableData.DbNullify(this.PrimaryWishlistId));
                        database.AddInParameter(updateCommand, "@PayPalId", System.Data.DbType.String, NullableData.DbNullify(this.PayPalId));
                        database.AddInParameter(updateCommand, "@PasswordQuestion", System.Data.DbType.String, NullableData.DbNullify(this.PasswordQuestion));
                        database.AddInParameter(updateCommand, "@PasswordAnswer", System.Data.DbType.String, NullableData.DbNullify(this.PasswordAnswer));
                        database.AddInParameter(updateCommand, "@IsApproved", System.Data.DbType.Boolean, this.IsApproved);
                        database.AddInParameter(updateCommand, "@IsAnonymous", System.Data.DbType.Boolean, this.IsAnonymous);
                        database.AddInParameter(updateCommand, "@IsLockedOut", System.Data.DbType.Boolean, this.IsLockedOut);
                        database.AddInParameter(updateCommand, "@CreateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreateDate));
                        database.AddInParameter(updateCommand, "@LastActivityDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastActivityDate)));
                        database.AddInParameter(updateCommand, "@LastLoginDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastLoginDate)));
                        database.AddInParameter(updateCommand, "@LastPasswordChangedDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastPasswordChangedDate)));
                        database.AddInParameter(updateCommand, "@LastLockoutDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastLockoutDate)));
                        database.AddInParameter(updateCommand, "@FailedPasswordAttemptCount", System.Data.DbType.Int32, this.FailedPasswordAttemptCount);
                        database.AddInParameter(updateCommand, "@FailedPasswordAttemptWindowStart", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.FailedPasswordAttemptWindowStart)));
                        database.AddInParameter(updateCommand, "@FailedPasswordAnswerAttemptCount", System.Data.DbType.Int32, this.FailedPasswordAnswerAttemptCount);
                        database.AddInParameter(updateCommand, "@FailedPasswordAnswerAttemptWindowStart", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.FailedPasswordAnswerAttemptWindowStart)));
                        database.AddInParameter(updateCommand, "@Comment", System.Data.DbType.String, NullableData.DbNullify(this.Comment));
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_Users (StoreId, UserName, LoweredUserName, Email, LoweredEmail, AffiliateId, AffiliateReferralDate, PrimaryAddressId, PrimaryWishlistId, PayPalId, PasswordQuestion, PasswordAnswer, IsApproved, IsAnonymous, IsLockedOut, CreateDate, LastActivityDate, LastLoginDate, LastPasswordChangedDate, LastLockoutDate, FailedPasswordAttemptCount, FailedPasswordAttemptWindowStart, FailedPasswordAnswerAttemptCount, FailedPasswordAnswerAttemptWindowStart, Comment)");
                    insertQuery.Append(" VALUES (@StoreId, @UserName, @LoweredUserName, @Email, @LoweredEmail, @AffiliateId, @AffiliateReferralDate, @PrimaryAddressId, @PrimaryWishlistId, @PayPalId, @PasswordQuestion, @PasswordAnswer, @IsApproved, @IsAnonymous, @IsLockedOut, @CreateDate, @LastActivityDate, @LastLoginDate, @LastPasswordChangedDate, @LastLockoutDate, @FailedPasswordAttemptCount, @FailedPasswordAttemptWindowStart, @FailedPasswordAnswerAttemptCount, @FailedPasswordAnswerAttemptWindowStart, @Comment)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@UserId", System.Data.DbType.Int32, this.UserId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@UserName", System.Data.DbType.String, this.UserName);
                        database.AddInParameter(insertCommand, "@LoweredUserName", System.Data.DbType.String, this.LoweredUserName);
                        database.AddInParameter(insertCommand, "@Email", System.Data.DbType.String, NullableData.DbNullify(this.Email));
                        database.AddInParameter(insertCommand, "@LoweredEmail", System.Data.DbType.String, NullableData.DbNullify(this.LoweredEmail));
                        database.AddInParameter(insertCommand, "@AffiliateId", System.Data.DbType.Int32, NullableData.DbNullify(this.AffiliateId));
                        database.AddInParameter(insertCommand, "@AffiliateReferralDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.AffiliateReferralDate)));
                        database.AddInParameter(insertCommand, "@PrimaryAddressId", System.Data.DbType.Int32, NullableData.DbNullify(this.PrimaryAddressId));
                        database.AddInParameter(insertCommand, "@PrimaryWishlistId", System.Data.DbType.Int32, NullableData.DbNullify(this.PrimaryWishlistId));
                        database.AddInParameter(insertCommand, "@PayPalId", System.Data.DbType.String, NullableData.DbNullify(this.PayPalId));
                        database.AddInParameter(insertCommand, "@PasswordQuestion", System.Data.DbType.String, NullableData.DbNullify(this.PasswordQuestion));
                        database.AddInParameter(insertCommand, "@PasswordAnswer", System.Data.DbType.String, NullableData.DbNullify(this.PasswordAnswer));
                        database.AddInParameter(insertCommand, "@IsApproved", System.Data.DbType.Boolean, this.IsApproved);
                        database.AddInParameter(insertCommand, "@IsAnonymous", System.Data.DbType.Boolean, this.IsAnonymous);
                        database.AddInParameter(insertCommand, "@IsLockedOut", System.Data.DbType.Boolean, this.IsLockedOut);
                        database.AddInParameter(insertCommand, "@CreateDate", System.Data.DbType.DateTime, LocaleHelper.FromLocalTime(this.CreateDate));
                        database.AddInParameter(insertCommand, "@LastActivityDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastActivityDate)));
                        database.AddInParameter(insertCommand, "@LastLoginDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastLoginDate)));
                        database.AddInParameter(insertCommand, "@LastPasswordChangedDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastPasswordChangedDate)));
                        database.AddInParameter(insertCommand, "@LastLockoutDate", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.LastLockoutDate)));
                        database.AddInParameter(insertCommand, "@FailedPasswordAttemptCount", System.Data.DbType.Int32, this.FailedPasswordAttemptCount);
                        database.AddInParameter(insertCommand, "@FailedPasswordAttemptWindowStart", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.FailedPasswordAttemptWindowStart)));
                        database.AddInParameter(insertCommand, "@FailedPasswordAnswerAttemptCount", System.Data.DbType.Int32, this.FailedPasswordAnswerAttemptCount);
                        database.AddInParameter(insertCommand, "@FailedPasswordAnswerAttemptWindowStart", System.Data.DbType.DateTime, NullableData.DbNullify(LocaleHelper.FromLocalTime(this.FailedPasswordAnswerAttemptWindowStart)));
                        database.AddInParameter(insertCommand, "@Comment", System.Data.DbType.String, NullableData.DbNullify(this.Comment));
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._UserId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this User object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.AddressesLoaded) this.Addresses.Save();
            if (this.AuditEventsLoaded) this.AuditEvents.Save();
            if (this.BasketsLoaded) this.Baskets.Save();
            if (this.OrderNotesLoaded) this.OrderNotes.Save();
            if (this.OrdersLoaded) this.Orders.Save();
            if (this.PageViewsLoaded) this.PageViews.Save();
            if (this.ProfileLoaded) this.Profile.Save();
            if (this.SubscriptionsLoaded) this.Subscriptions.Save();
            if (this.UserGroupsLoaded) this.UserGroups.Save();
            if (this.PasswordsLoaded) this.Passwords.Save();
            if (this.UserPersonalizationsLoaded) this.UserPersonalizations.Save();
            if (this.SettingsLoaded) this.Settings.Save();
            if (this.WishlistsLoaded) this.Wishlists.Save();
        }

     }
}
