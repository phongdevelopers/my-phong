//Generated by PersistableBaseGenerator

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Text;
using CommerceBuilder.Common;
using CommerceBuilder.Data;
using CommerceBuilder.Orders;
using CommerceBuilder.Products;
using CommerceBuilder.Shipping;
using CommerceBuilder.Stores;
using CommerceBuilder.Taxes;
using CommerceBuilder.Utility;

namespace CommerceBuilder.Taxes
{
    /// <summary>
    /// This class represents a TaxCode object in the database.
    /// </summary>
    public partial class TaxCode : IPersistable
    {

#region Constructors

        /// <summary>
        /// Default Constructor
        /// </summary>
        public TaxCode() { }

        /// <summary>
        /// Constructor with primary key
        /// <param name="taxCodeId">Value of TaxCodeId.</param>
        /// </summary>
        public TaxCode(Int32 taxCodeId)
        {
            this.TaxCodeId = taxCodeId;
        }

        /// <summary>
        /// Returns a coma separated list of column names in this database object.
        /// </summary>
        /// <param name="prefix">Prefix to use with column names. Leave null or empty for no prefix.</param>
        /// <returns>A coman separated list of column names for this database object.</returns>
        public static string GetColumnNames(string prefix)
        {
          if (string.IsNullOrEmpty(prefix)) prefix = string.Empty;
          else prefix = prefix + ".";
          List<string> columnNames = new List<string>();
          columnNames.Add(prefix + "TaxCodeId");
          columnNames.Add(prefix + "StoreId");
          columnNames.Add(prefix + "Name");
          return string.Join(",", columnNames.ToArray());
        }

        /// <summary>
        /// Loads the given TaxCode object from the given database data reader.
        /// </summary>
        /// <param name="taxCode">The TaxCode object to load.</param>
        /// <param name="dr">The database data reader to read data from.</param>
        public static void LoadDataReader(TaxCode taxCode, IDataReader dr)
        {
            //SET FIELDS FROM ROW DATA
            taxCode.TaxCodeId = dr.GetInt32(0);
            taxCode.StoreId = dr.GetInt32(1);
            taxCode.Name = dr.GetString(2);
            taxCode.IsDirty = false;
        }

#endregion

        private Int32 _TaxCodeId;
        private Int32 _StoreId;
        private String _Name = string.Empty;
        private bool _IsDirty;

        /// <summary>
        /// TaxCodeId
        /// </summary>
        [DataObjectField(true, true, false)]
        public Int32 TaxCodeId
        {
            get { return this._TaxCodeId; }
            set
            {
                if (this._TaxCodeId != value)
                {
                    this._TaxCodeId = value;
                    this.IsDirty = true;
                    this.EnsureChildProperties();
                }
            }
        }

        /// <summary>
        /// StoreId
        /// </summary>
        public Int32 StoreId
        {
            get { return this._StoreId; }
            set
            {
                if (this._StoreId != value)
                {
                    this._StoreId = value;
                    this.IsDirty = true;
                    this._Store = null;
                }
            }
        }

        /// <summary>
        /// Name
        /// </summary>
        public String Name
        {
            get { return this._Name; }
            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.IsDirty = true;
                }
            }
        }

        /// <summary>
        /// Indicates whether this TaxCode object has changed since it was loaded from the database.
        /// </summary>
        public bool IsDirty
        {
            get
            {
                if (this._IsDirty) return true;
                if (this.BasketItemsLoaded && this.BasketItems.IsDirty) return true;
                if (this.OrderItemsLoaded && this.OrderItems.IsDirty) return true;
                if (this.ProductsLoaded && this.Products.IsDirty) return true;
                if (this.ShipMethodsLoaded && this.ShipMethods.IsDirty) return true;
                if (this.SubscriptionPlansLoaded && this.SubscriptionPlans.IsDirty) return true;
                if (this.TaxRuleTaxCodesLoaded && this.TaxRuleTaxCodes.IsDirty) return true;
                if (this.WrapStylesLoaded && this.WrapStyles.IsDirty) return true;
                return false;
            }
            set { this._IsDirty = value; }
        }

        /// <summary>
        /// Ensures that child objects of this TaxCode are properly associated with this TaxCode object.
        /// </summary>
        public virtual void EnsureChildProperties()
        {
            if (this.BasketItemsLoaded) { foreach (BasketItem basketItem in this.BasketItems) { basketItem.TaxCodeId = this.TaxCodeId; } }
            if (this.OrderItemsLoaded) { foreach (OrderItem orderItem in this.OrderItems) { orderItem.TaxCodeId = this.TaxCodeId; } }
            if (this.ProductsLoaded) { foreach (Product product in this.Products) { product.TaxCodeId = this.TaxCodeId; } }
            if (this.ShipMethodsLoaded) { foreach (ShipMethod shipMethod in this.ShipMethods) { shipMethod.TaxCodeId = this.TaxCodeId; } }
            if (this.SubscriptionPlansLoaded) { foreach (SubscriptionPlan subscriptionPlan in this.SubscriptionPlans) { subscriptionPlan.TaxCodeId = this.TaxCodeId; } }
            if (this.TaxRuleTaxCodesLoaded) { foreach (TaxRuleTaxCode taxRuleTaxCode in this.TaxRuleTaxCodes) { taxRuleTaxCode.TaxCodeId = this.TaxCodeId; } }
            if (this.WrapStylesLoaded) { foreach (WrapStyle wrapStyle in this.WrapStyles) { wrapStyle.TaxCodeId = this.TaxCodeId; } }
        }

#region Parents
        private Store _Store;

        /// <summary>
        /// The Store object that this TaxCode object is associated with
        /// </summary>
        public Store Store
        {
            get
            {
                if (!this.StoreLoaded)
                {
                    this._Store = StoreDataSource.Load(this.StoreId);
                }
                return this._Store;
            }
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool StoreLoaded { get { return ((this._Store != null) && (this._Store.StoreId == this.StoreId)); } }

#endregion

#region Children
        private BasketItemCollection _BasketItems;
        private OrderItemCollection _OrderItems;
        private ProductCollection _Products;
        private ShipMethodCollection _ShipMethods;
        private SubscriptionPlanCollection _SubscriptionPlans;
        private WrapStyleCollection _WrapStyles;

        /// <summary>
        /// A collection of BasketItem objects associated with this TaxCode object.
        /// </summary>
        public BasketItemCollection BasketItems
        {
            get
            {
                if (!this.BasketItemsLoaded)
                {
                    this._BasketItems = BasketItemDataSource.LoadForTaxCode(this.TaxCodeId);
                }
                return this._BasketItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool BasketItemsLoaded { get { return (this._BasketItems != null); } }

        /// <summary>
        /// A collection of OrderItem objects associated with this TaxCode object.
        /// </summary>
        public OrderItemCollection OrderItems
        {
            get
            {
                if (!this.OrderItemsLoaded)
                {
                    this._OrderItems = OrderItemDataSource.LoadForTaxCode(this.TaxCodeId);
                }
                return this._OrderItems;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool OrderItemsLoaded { get { return (this._OrderItems != null); } }

        /// <summary>
        /// A collection of Product objects associated with this TaxCode object.
        /// </summary>
        public ProductCollection Products
        {
            get
            {
                if (!this.ProductsLoaded)
                {
                    this._Products = ProductDataSource.LoadForTaxCode(this.TaxCodeId);
                }
                return this._Products;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ProductsLoaded { get { return (this._Products != null); } }

        /// <summary>
        /// A collection of ShipMethod objects associated with this TaxCode object.
        /// </summary>
        public ShipMethodCollection ShipMethods
        {
            get
            {
                if (!this.ShipMethodsLoaded)
                {
                    this._ShipMethods = ShipMethodDataSource.LoadForTaxCode(this.TaxCodeId);
                }
                return this._ShipMethods;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool ShipMethodsLoaded { get { return (this._ShipMethods != null); } }

        /// <summary>
        /// A collection of SubscriptionPlan objects associated with this TaxCode object.
        /// </summary>
        public SubscriptionPlanCollection SubscriptionPlans
        {
            get
            {
                if (!this.SubscriptionPlansLoaded)
                {
                    this._SubscriptionPlans = SubscriptionPlanDataSource.LoadForTaxCode(this.TaxCodeId);
                }
                return this._SubscriptionPlans;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool SubscriptionPlansLoaded { get { return (this._SubscriptionPlans != null); } }

        /// <summary>
        /// A collection of WrapStyle objects associated with this TaxCode object.
        /// </summary>
        public WrapStyleCollection WrapStyles
        {
            get
            {
                if (!this.WrapStylesLoaded)
                {
                    this._WrapStyles = WrapStyleDataSource.LoadForTaxCode(this.TaxCodeId);
                }
                return this._WrapStyles;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool WrapStylesLoaded { get { return (this._WrapStyles != null); } }

#endregion

#region Associations
        private TaxRuleTaxCodeCollection _TaxRuleTaxCodes;

        /// <summary>
        /// A collection of TaxRuleTaxCode objects associated with this TaxCode object.
        /// </summary>
        public TaxRuleTaxCodeCollection TaxRuleTaxCodes
        {
            get
            {
                if (!this.TaxRuleTaxCodesLoaded)
                {
                    this._TaxRuleTaxCodes = TaxRuleTaxCodeDataSource.LoadForTaxCode(this.TaxCodeId);
                }
                return this._TaxRuleTaxCodes;
            }
        }
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        internal bool TaxRuleTaxCodesLoaded { get { return (this._TaxRuleTaxCodes != null); } }
#endregion

        /// <summary>
        /// Deletes this TaxCode object from the database.
        /// </summary>
        /// <returns><b>true</b> if delete successful, <b>false</b> otherwise.</returns>
        public virtual bool Delete()
        {
            int recordsAffected = 0;
            StringBuilder deleteQuery = new StringBuilder();
            deleteQuery.Append("DELETE FROM ac_TaxCodes");
            deleteQuery.Append(" WHERE TaxCodeId = @TaxCodeId");
            Database database = Token.Instance.Database;
            using (DbCommand deleteCommand = database.GetSqlStringCommand(deleteQuery.ToString()))
            {
                database.AddInParameter(deleteCommand, "@TaxCodeId", System.Data.DbType.Int32, this.TaxCodeId);
                recordsAffected = database.ExecuteNonQuery(deleteCommand);
            }
            return (recordsAffected > 0);
        }


        /// <summary>
        /// Load this TaxCode object from the database for the given primary key.
        /// </summary>
        /// <param name="taxCodeId">Value of TaxCodeId of the object to load.</param>
        /// <returns><b>true</b> if load is successful, <b>false</b> otherwise</returns>
        public virtual bool Load(Int32 taxCodeId)
        {
            bool result = false;
            this.TaxCodeId = taxCodeId;
            //CREATE THE DYNAMIC SQL TO LOAD OBJECT
            StringBuilder selectQuery = new StringBuilder();
            selectQuery.Append("SELECT " + GetColumnNames(string.Empty));
            selectQuery.Append(" FROM ac_TaxCodes");
            selectQuery.Append(" WHERE TaxCodeId = @taxCodeId");
            selectQuery.Append(" AND StoreId = @storeId");
            Database database = Token.Instance.Database;
            DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString());
            database.AddInParameter(selectCommand, "@taxCodeId", System.Data.DbType.Int32, taxCodeId);
            database.AddInParameter(selectCommand, "@storeId", System.Data.DbType.Int32, Token.Instance.StoreId);
            //EXECUTE THE COMMAND
            using (IDataReader dr = database.ExecuteReader(selectCommand))
            {
                if (dr.Read())
                {
                    result = true;
                    LoadDataReader(this, dr);;
                }
                dr.Close();
            }
            return result;
        }

        /// <summary>
        /// Saves this TaxCode object to the database.
        /// </summary>
        /// <returns><b>SaveResult</b> enumeration that represents the result of the save operation.</returns>
        public virtual SaveResult Save()
        {
            if (this.IsDirty)
            {
                Database database = Token.Instance.Database;
                bool recordExists = true;
                
                //SET EMPTY STOREID TO CURRENT CONTEXT
                if (this.StoreId == 0) this.StoreId = Token.Instance.StoreId;
                if (this.TaxCodeId == 0) recordExists = false;

                if (recordExists) {
                    //verify whether record is already present
                    StringBuilder selectQuery = new StringBuilder();
                    selectQuery.Append("SELECT COUNT(*) As RecordCount FROM ac_TaxCodes");
                    selectQuery.Append(" WHERE TaxCodeId = @TaxCodeId");
                    using (DbCommand selectCommand = database.GetSqlStringCommand(selectQuery.ToString()))
                    {
                        database.AddInParameter(selectCommand, "@TaxCodeId", System.Data.DbType.Int32, this.TaxCodeId);
                        if ((int)database.ExecuteScalar(selectCommand) == 0)
                        {
                            recordExists = false;
                        }
                    }
                }

                int result = 0;
                if (recordExists)
                {
                    //UPDATE
                    StringBuilder updateQuery = new StringBuilder();
                    updateQuery.Append("UPDATE ac_TaxCodes SET ");
                    updateQuery.Append("StoreId = @StoreId");
                    updateQuery.Append(", Name = @Name");
                    updateQuery.Append(" WHERE TaxCodeId = @TaxCodeId");
                    using (DbCommand updateCommand = database.GetSqlStringCommand(updateQuery.ToString()))
                    {
                        database.AddInParameter(updateCommand, "@TaxCodeId", System.Data.DbType.Int32, this.TaxCodeId);
                        database.AddInParameter(updateCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(updateCommand, "@Name", System.Data.DbType.String, this.Name);
                        //RESULT IS NUMBER OF RECORDS AFFECTED
                        result = database.ExecuteNonQuery(updateCommand);
                    }
                }
                else
                {
                    //INSERT
                    StringBuilder insertQuery = new StringBuilder();
                    insertQuery.Append("INSERT INTO ac_TaxCodes (StoreId, Name)");
                    insertQuery.Append(" VALUES (@StoreId, @Name)");
                    insertQuery.Append("; SELECT Scope_Identity()");
                    using (DbCommand insertCommand = database.GetSqlStringCommand(insertQuery.ToString()))
                    {
                        database.AddInParameter(insertCommand, "@TaxCodeId", System.Data.DbType.Int32, this.TaxCodeId);
                        database.AddInParameter(insertCommand, "@StoreId", System.Data.DbType.Int32, this.StoreId);
                        database.AddInParameter(insertCommand, "@Name", System.Data.DbType.String, this.Name);
                        //RESULT IS NEW IDENTITY;
                        result = AlwaysConvert.ToInt(database.ExecuteScalar(insertCommand));
                        this._TaxCodeId = result;
                    }
                }
                this.SaveChildren();

                //OBJECT IS DIRTY IF NO RECORDS WERE UPDATED OR INSERTED
                this.IsDirty = (result == 0);
                if (this.IsDirty) { return SaveResult.Failed; }
                else { return (recordExists ? SaveResult.RecordUpdated : SaveResult.RecordInserted); }
            }

            //SAVE IS SUCCESSFUL IF OBJECT IS NOT DIRTY
            return SaveResult.NotDirty;
        }

        /// <summary>
        /// Saves that child objects associated with this TaxCode object.
        /// </summary>
        public virtual void SaveChildren()
        {
            this.EnsureChildProperties();
            if (this.BasketItemsLoaded) this.BasketItems.Save();
            if (this.OrderItemsLoaded) this.OrderItems.Save();
            if (this.ProductsLoaded) this.Products.Save();
            if (this.ShipMethodsLoaded) this.ShipMethods.Save();
            if (this.SubscriptionPlansLoaded) this.SubscriptionPlans.Save();
            if (this.TaxRuleTaxCodesLoaded) this.TaxRuleTaxCodes.Save();
            if (this.WrapStylesLoaded) this.WrapStyles.Save();
        }

     }
}
